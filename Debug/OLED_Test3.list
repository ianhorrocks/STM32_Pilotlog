
OLED_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a37c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c9c  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800c124  0800c124  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c124  0800c124  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c128  0800c128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002928  20000090  0800c1bc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200029b8  0800c1bc  000229b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1f1  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003410  00000000  00000000  0002f2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c71  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a669  00000000  00000000  000343d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017082  00000000  00000000  0004ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008878e  00000000  00000000  00065abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c78  00000000  00000000  000ee24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f2ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a470 	.word	0x0800a470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800a470 	.word	0x0800a470

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <writeCSVRecord>:
#include "csv_utils.h"
#include <stdio.h>

void writeCSVRecord(FIL* file, TimeRecord* record) {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b0a6      	sub	sp, #152	; 0x98
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    // 1) Si está vacío, escribimos cabecera
    if (f_size(file) == 0) {
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d10f      	bne.n	8000192 <writeCSVRecord+0x36>
        const char header[] = "id,id_embebed,id_tag,timestamp\n";
 8000172:	4b19      	ldr	r3, [pc, #100]	; (80001d8 <writeCSVRecord+0x7c>)
 8000174:	f107 040c 	add.w	r4, r7, #12
 8000178:	461d      	mov	r5, r3
 800017a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800017c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800017e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        f_puts(header, file);
 8000186:	f107 030c 	add.w	r3, r7, #12
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4618      	mov	r0, r3
 800018e:	f008 fe8d 	bl	8008eac <f_puts>
    }

    // 2) Construimos línea CSV
    char buf[100];
    sprintf(buf, "%s,%s,%s,%s\n",
            record->id,
 8000192:	6839      	ldr	r1, [r7, #0]
            record->id_embebed,
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	f103 0419 	add.w	r4, r3, #25
            record->id_tag,
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	332d      	adds	r3, #45	; 0x2d
            record->timestamp);
 800019e:	683a      	ldr	r2, [r7, #0]
 80001a0:	3236      	adds	r2, #54	; 0x36
    sprintf(buf, "%s,%s,%s,%s\n",
 80001a2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80001a6:	9201      	str	r2, [sp, #4]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	4623      	mov	r3, r4
 80001ac:	460a      	mov	r2, r1
 80001ae:	490b      	ldr	r1, [pc, #44]	; (80001dc <writeCSVRecord+0x80>)
 80001b0:	f009 f89a 	bl	80092e8 <siprintf>

    // 3) Vamos al final y escribimos
    f_lseek(file, f_size(file));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	4619      	mov	r1, r3
 80001be:	6878      	ldr	r0, [r7, #4]
 80001c0:	f008 fb46 	bl	8008850 <f_lseek>
    f_puts(buf, file);
 80001c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 fe6e 	bl	8008eac <f_puts>
}
 80001d0:	bf00      	nop
 80001d2:	3790      	adds	r7, #144	; 0x90
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bdb0      	pop	{r4, r5, r7, pc}
 80001d8:	0800a498 	.word	0x0800a498
 80001dc:	0800a488 	.word	0x0800a488

080001e0 <ds1307_write_byte>:
 * 
 * @param ds1307_reg_addres: REG Address you can see more in datasheet page 4 figure 2
 * @param data 
 * @return ds1307_err_t: 0 if everything is ok
 */
static ds1307_err_t ds1307_write_byte(uint8_t ds1307_reg_addres, uint8_t data){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af02      	add	r7, sp, #8
 80001e6:	4603      	mov	r3, r0
 80001e8:	460a      	mov	r2, r1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	4613      	mov	r3, r2
 80001ee:	71bb      	strb	r3, [r7, #6]

	uint8_t buff[2] = {ds1307_reg_addres,data};
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	733b      	strb	r3, [r7, #12]
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	737b      	strb	r3, [r7, #13]
	ds1307_err_t ret_val;
	ret_val = HAL_I2C_Master_Transmit(&DS1307_HANDLER, DS1307_ADDRES << 1, buff, 2, DS1307_TIMEOUT);
 80001f8:	f107 020c 	add.w	r2, r7, #12
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2302      	movs	r3, #2
 8000204:	21d0      	movs	r1, #208	; 0xd0
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <ds1307_write_byte+0x3c>)
 8000208:	f002 ff80 	bl	800310c <HAL_I2C_Master_Transmit>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]

	return ret_val;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000108 	.word	0x20000108

08000220 <ds1307_read_byte>:
 * @brief Read byte data from an specific address ds1307 RTC
 * 
 * @param ds1307_reg_addres: REG Address you can see more in datasheet page 4 figure 2
 * @return data: data read from reg address
 */
static uint8_t ds1307_read_byte(uint8_t ds1307_reg_addres){
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	HAL_I2C_Master_Transmit(&DS1307_HANDLER, DS1307_ADDRES << 1, &ds1307_reg_addres, 1, DS1307_TIMEOUT);
 800022a:	1dfa      	adds	r2, r7, #7
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	21d0      	movs	r1, #208	; 0xd0
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <ds1307_read_byte+0x3c>)
 8000238:	f002 ff68 	bl	800310c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&DS1307_HANDLER, DS1307_ADDRES << 1, &data, 1, DS1307_TIMEOUT);
 800023c:	f107 020f 	add.w	r2, r7, #15
 8000240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2301      	movs	r3, #1
 8000248:	21d0      	movs	r1, #208	; 0xd0
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <ds1307_read_byte+0x3c>)
 800024c:	f003 f85c 	bl	8003308 <HAL_I2C_Master_Receive>
	return data;
 8000250:	7bfb      	ldrb	r3, [r7, #15]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000108 	.word	0x20000108

08000260 <ds1307_bcd_decode>:
 * @brief BCD decode
 * 
 * @param data: Value to convert
 * @return uint8_t: data converted
 */
static uint8_t ds1307_bcd_decode(uint8_t data){
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	return (((data & 0xf0) >> 4) * 10) + (data & 0x0f);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	091b      	lsrs	r3, r3, #4
 800026e:	b2db      	uxtb	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	0092      	lsls	r2, r2, #2
 8000274:	4413      	add	r3, r2
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	b2da      	uxtb	r2, r3
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 030f 	and.w	r3, r3, #15
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4413      	add	r3, r2
 8000284:	b2db      	uxtb	r3, r3
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <ds1307_init>:

/**
 * @brief Init ds1307
 * 
 */
void ds1307_init(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	ds1307_set_clock_halt(0);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f802 	bl	800029e <ds1307_set_clock_halt>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}

0800029e <ds1307_set_clock_halt>:
 * @brief To start the time and calendar, we must set the stop bit of the clock (CH) in 0, to stop, put the bit in 1
 * more information see datasheet on page 4
 * 
 * @param halt: 0 init, 1 stop
 */
void ds1307_set_clock_halt(uint8_t halt){
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4603      	mov	r3, r0
 80002a6:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <ds1307_set_clock_halt+0x14>
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	e000      	b.n	80002b4 <ds1307_set_clock_halt+0x16>
 80002b2:	2300      	movs	r3, #0
 80002b4:	73fb      	strb	r3, [r7, #15]
	ds1307_write_byte(DS1307_SECONDS, ch | (ds1307_read_byte(DS1307_SECONDS) & 0x7F));
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffb2 	bl	8000220 <ds1307_read_byte>
 80002bc:	4603      	mov	r3, r0
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002c4:	b25a      	sxtb	r2, r3
 80002c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002ca:	4313      	orrs	r3, r2
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4619      	mov	r1, r3
 80002d2:	2000      	movs	r0, #0
 80002d4:	f7ff ff84 	bl	80001e0 <ds1307_write_byte>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <ds1307_get_hour>:
/**
 * @brief ds1307_get_hour
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_hour(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_HOURS) & 0x3F);
 80002e4:	2002      	movs	r0, #2
 80002e6:	f7ff ff9b 	bl	8000220 <ds1307_read_byte>
 80002ea:	4603      	mov	r3, r0
 80002ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ffb4 	bl	8000260 <ds1307_bcd_decode>
 80002f8:	4603      	mov	r3, r0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	bd80      	pop	{r7, pc}

080002fe <ds1307_get_second>:
/**
 * @brief ds1307_get_second
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_second(void){
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_SECONDS) & 0x7F);
 8000302:	2000      	movs	r0, #0
 8000304:	f7ff ff8c 	bl	8000220 <ds1307_read_byte>
 8000308:	4603      	mov	r3, r0
 800030a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffa5 	bl	8000260 <ds1307_bcd_decode>
 8000316:	4603      	mov	r3, r0
}
 8000318:	4618      	mov	r0, r3
 800031a:	bd80      	pop	{r7, pc}

0800031c <ds1307_get_minutes>:
/**
 * @brief ds1307_get_minutes
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_minutes(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_MINUTES));
 8000320:	2001      	movs	r0, #1
 8000322:	f7ff ff7d 	bl	8000220 <ds1307_read_byte>
 8000326:	4603      	mov	r3, r0
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff99 	bl	8000260 <ds1307_bcd_decode>
 800032e:	4603      	mov	r3, r0

}
 8000330:	4618      	mov	r0, r3
 8000332:	bd80      	pop	{r7, pc}

08000334 <ds1307_get_day>:
/**
 * @brief ds1307_get_day
 * 
 * @return ds1307_days_t 
 */
ds1307_days_t ds1307_get_day(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	return ds1307_read_byte(ds1307_bcd_decode(DS1307_DAY));
 8000338:	2003      	movs	r0, #3
 800033a:	f7ff ff91 	bl	8000260 <ds1307_bcd_decode>
 800033e:	4603      	mov	r3, r0
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff6d 	bl	8000220 <ds1307_read_byte>
 8000346:	4603      	mov	r3, r0
}
 8000348:	4618      	mov	r0, r3
 800034a:	bd80      	pop	{r7, pc}

0800034c <ds1307_get_date>:
/**
 * @brief 
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_date(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_DATE));
 8000350:	2004      	movs	r0, #4
 8000352:	f7ff ff65 	bl	8000220 <ds1307_read_byte>
 8000356:	4603      	mov	r3, r0
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff81 	bl	8000260 <ds1307_bcd_decode>
 800035e:	4603      	mov	r3, r0
}
 8000360:	4618      	mov	r0, r3
 8000362:	bd80      	pop	{r7, pc}

08000364 <ds1307_get_month>:
/**
 * @brief ds1307_get_month
 * 
 * @return ds1307_months_t 
 */
ds1307_months_t ds1307_get_month(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	return ds1307_read_byte(ds1307_bcd_decode(DS1307_MONTH));
 8000368:	2005      	movs	r0, #5
 800036a:	f7ff ff79 	bl	8000260 <ds1307_bcd_decode>
 800036e:	4603      	mov	r3, r0
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff55 	bl	8000220 <ds1307_read_byte>
 8000376:	4603      	mov	r3, r0
}
 8000378:	4618      	mov	r0, r3
 800037a:	bd80      	pop	{r7, pc}

0800037c <ds1307_get_year>:
/**
 * @brief ds1307_get_year
 * 
 * @return uint16_t: current year
 */
uint16_t ds1307_get_year(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	uint16_t cent = ds1307_read_byte(DS1307_REG_CENT) * 100;
 8000382:	2010      	movs	r0, #16
 8000384:	f7ff ff4c 	bl	8000220 <ds1307_read_byte>
 8000388:	4603      	mov	r3, r0
 800038a:	b29b      	uxth	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	4413      	add	r3, r2
 8000392:	461a      	mov	r2, r3
 8000394:	0091      	lsls	r1, r2, #2
 8000396:	461a      	mov	r2, r3
 8000398:	460b      	mov	r3, r1
 800039a:	4413      	add	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	80fb      	strh	r3, [r7, #6]
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_YEAR)) + cent;
 80003a0:	2006      	movs	r0, #6
 80003a2:	f7ff ff3d 	bl	8000220 <ds1307_read_byte>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff59 	bl	8000260 <ds1307_bcd_decode>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	4413      	add	r3, r2
 80003b6:	b29b      	uxth	r3, r3

}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <ds1307_get_time_zone_hour>:
/**
 * @brief Get the actual timezone-hour configured in the rtc
 * 
 * @return int8_t actual time zone
 */
int8_t ds1307_get_time_zone_hour(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	return ds1307_read_byte(DS1307_REG_UTC_HR);
 80003c4:	2008      	movs	r0, #8
 80003c6:	f7ff ff2b 	bl	8000220 <ds1307_read_byte>
 80003ca:	4603      	mov	r3, r0
 80003cc:	b25b      	sxtb	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <ds1307_get_time_zone_min>:
/**
 * @brief  Get the actual timezone-min configured in the rtc
 * 
 * @return int8_t: actual time zone
 */
int8_t ds1307_get_time_zone_min(void){
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
	return ds1307_read_byte(DS1307_REG_UTC_MIN);
 80003d6:	2009      	movs	r0, #9
 80003d8:	f7ff ff22 	bl	8000220 <ds1307_read_byte>
 80003dc:	4603      	mov	r3, r0
 80003de:	b25b      	sxtb	r3, r3
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <ds1307_update>:
/**
 * @brief Update ds1307 data
 * 
 * @param dev: ds1307 pointer
 */
void ds1307_update(ds1307_dev_t *ds1307_dev){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

	ds1307_dev->seconds = ds1307_get_second();
 80003ec:	f7ff ff87 	bl	80002fe <ds1307_get_second>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	701a      	strb	r2, [r3, #0]
	ds1307_dev->minutes = ds1307_get_minutes();
 80003f8:	f7ff ff90 	bl	800031c <ds1307_get_minutes>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	705a      	strb	r2, [r3, #1]
	ds1307_dev->hours = ds1307_get_hour();
 8000404:	f7ff ff6c 	bl	80002e0 <ds1307_get_hour>
 8000408:	4603      	mov	r3, r0
 800040a:	461a      	mov	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	709a      	strb	r2, [r3, #2]
	ds1307_dev->day = ds1307_get_day();
 8000410:	f7ff ff90 	bl	8000334 <ds1307_get_day>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	70da      	strb	r2, [r3, #3]
	ds1307_dev->date = ds1307_get_date();
 800041c:	f7ff ff96 	bl	800034c <ds1307_get_date>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	711a      	strb	r2, [r3, #4]
	ds1307_dev->month = ds1307_get_month();
 8000428:	f7ff ff9c 	bl	8000364 <ds1307_get_month>
 800042c:	4603      	mov	r3, r0
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	715a      	strb	r2, [r3, #5]
	ds1307_dev->year = ds1307_get_year();
 8000434:	f7ff ffa2 	bl	800037c <ds1307_get_year>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	80da      	strh	r2, [r3, #6]
	ds1307_dev->t_zone_hour = ds1307_get_time_zone_hour();
 8000440:	f7ff ffbe 	bl	80003c0 <ds1307_get_time_zone_hour>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	721a      	strb	r2, [r3, #8]
	ds1307_dev->t_zone_min = ds1307_get_time_zone_min();
 800044c:	f7ff ffc1 	bl	80003d2 <ds1307_get_time_zone_min>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	725a      	strb	r2, [r3, #9]
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <SELECT+0x1c>)
 800046c:	f002 fcf1 	bl	8002e52 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f002 fa4b 	bl	800290c <HAL_Delay>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010c00 	.word	0x40010c00

08000480 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048a:	4804      	ldr	r0, [pc, #16]	; (800049c <DESELECT+0x1c>)
 800048c:	f002 fce1 	bl	8002e52 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000490:	2001      	movs	r0, #1
 8000492:	f002 fa3b 	bl	800290c <HAL_Delay>
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010c00 	.word	0x40010c00

080004a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004aa:	bf00      	nop
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <SPI_TxByte+0x30>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	f003 0302 	and.w	r3, r3, #2
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d1f8      	bne.n	80004ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004ba:	1df9      	adds	r1, r7, #7
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2201      	movs	r2, #1
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <SPI_TxByte+0x30>)
 80004c2:	f004 fac1 	bl	8004a48 <HAL_SPI_Transmit>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200021d0 	.word	0x200021d0

080004d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004e0:	bf00      	nop
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <SPI_TxBuffer+0x30>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d1f8      	bne.n	80004e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004f0:	887a      	ldrh	r2, [r7, #2]
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <SPI_TxBuffer+0x30>)
 80004f8:	f004 faa6 	bl	8004a48 <HAL_SPI_Transmit>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200021d0 	.word	0x200021d0

08000508 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800050e:	23ff      	movs	r3, #255	; 0xff
 8000510:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <SPI_RxByte+0x34>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000522:	1dba      	adds	r2, r7, #6
 8000524:	1df9      	adds	r1, r7, #7
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_RxByte+0x34>)
 800052e:	f004 fbce 	bl	8004cce <HAL_SPI_TransmitReceive>

	return data;
 8000532:	79bb      	ldrb	r3, [r7, #6]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200021d0 	.word	0x200021d0

08000540 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000548:	f7ff ffde 	bl	8000508 <SPI_RxByte>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <SD_ReadyWait+0x30>)
 8000564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000568:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800056a:	f7ff ffcd 	bl	8000508 <SPI_RxByte>
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2bff      	cmp	r3, #255	; 0xff
 8000576:	d003      	beq.n	8000580 <SD_ReadyWait+0x24>
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <SD_ReadyWait+0x30>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1f4      	bne.n	800056a <SD_ReadyWait+0xe>

	return res;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000ae 	.word	0x200000ae

08000590 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000596:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800059a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800059c:	f7ff ff70 	bl	8000480 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	e005      	b.n	80005b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005a6:	20ff      	movs	r0, #255	; 0xff
 80005a8:	f7ff ff7a 	bl	80004a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b09      	cmp	r3, #9
 80005b6:	ddf6      	ble.n	80005a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005b8:	f7ff ff52 	bl	8000460 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005d0:	2395      	movs	r3, #149	; 0x95
 80005d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005d4:	463b      	mov	r3, r7
 80005d6:	2106      	movs	r1, #6
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff7b 	bl	80004d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005de:	e002      	b.n	80005e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005e6:	f7ff ff8f 	bl	8000508 <SPI_RxByte>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d002      	beq.n	80005f6 <SD_PowerOn+0x66>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f4      	bne.n	80005e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80005f6:	f7ff ff43 	bl	8000480 <DESELECT>
	SPI_TxByte(0XFF);
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	f7ff ff50 	bl	80004a0 <SPI_TxByte>

	PowerFlag = 1;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <SD_PowerOn+0x80>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000b1 	.word	0x200000b1

08000614 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SD_PowerOff+0x14>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000b1 	.word	0x200000b1

0800062c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <SD_CheckPower+0x10>)
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	200000b1 	.word	0x200000b1

08000640 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <SD_RxDataBlock+0x58>)
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000650:	f7ff ff5a 	bl	8000508 <SPI_RxByte>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2bff      	cmp	r3, #255	; 0xff
 800065c:	d103      	bne.n	8000666 <SD_RxDataBlock+0x26>
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <SD_RxDataBlock+0x58>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f4      	bne.n	8000650 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2bfe      	cmp	r3, #254	; 0xfe
 800066a:	d001      	beq.n	8000670 <SD_RxDataBlock+0x30>
 800066c:	2300      	movs	r3, #0
 800066e:	e00f      	b.n	8000690 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff62 	bl	8000540 <SPI_RxBytePtr>
	} while(len--);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	603a      	str	r2, [r7, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000686:	f7ff ff3f 	bl	8000508 <SPI_RxByte>
	SPI_RxByte();
 800068a:	f7ff ff3d 	bl	8000508 <SPI_RxByte>

	return TRUE;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000ac 	.word	0x200000ac

0800069c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006ac:	f7ff ff56 	bl	800055c <SD_ReadyWait>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2bff      	cmp	r3, #255	; 0xff
 80006b4:	d001      	beq.n	80006ba <SD_TxDataBlock+0x1e>
 80006b6:	2300      	movs	r3, #0
 80006b8:	e02f      	b.n	800071a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feef 	bl	80004a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2bfd      	cmp	r3, #253	; 0xfd
 80006c6:	d020      	beq.n	800070a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff01 	bl	80004d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006d2:	f7ff ff19 	bl	8000508 <SPI_RxByte>
		SPI_RxByte();
 80006d6:	f7ff ff17 	bl	8000508 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006da:	e00b      	b.n	80006f4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006dc:	f7ff ff14 	bl	8000508 <SPI_RxByte>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f003 031f 	and.w	r3, r3, #31
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d006      	beq.n	80006fc <SD_TxDataBlock+0x60>
			i++;
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	3301      	adds	r3, #1
 80006f2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	2b40      	cmp	r3, #64	; 0x40
 80006f8:	d9f0      	bls.n	80006dc <SD_TxDataBlock+0x40>
 80006fa:	e000      	b.n	80006fe <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80006fc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80006fe:	bf00      	nop
 8000700:	f7ff ff02 	bl	8000508 <SPI_RxByte>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0fa      	beq.n	8000700 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f003 031f 	and.w	r3, r3, #31
 8000710:	2b05      	cmp	r3, #5
 8000712:	d101      	bne.n	8000718 <SD_TxDataBlock+0x7c>
 8000714:	2301      	movs	r3, #1
 8000716:	e000      	b.n	800071a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	6039      	str	r1, [r7, #0]
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800072e:	f7ff ff15 	bl	800055c <SD_ReadyWait>
 8000732:	4603      	mov	r3, r0
 8000734:	2bff      	cmp	r3, #255	; 0xff
 8000736:	d001      	beq.n	800073c <SD_SendCmd+0x1a>
 8000738:	23ff      	movs	r3, #255	; 0xff
 800073a:	e042      	b.n	80007c2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff feae 	bl	80004a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	0e1b      	lsrs	r3, r3, #24
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fea8 	bl	80004a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea2 	bl	80004a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe9c 	bl	80004a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe97 	bl	80004a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b40      	cmp	r3, #64	; 0x40
 8000776:	d102      	bne.n	800077e <SD_SendCmd+0x5c>
 8000778:	2395      	movs	r3, #149	; 0x95
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e007      	b.n	800078e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b48      	cmp	r3, #72	; 0x48
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x68>
 8000784:	2387      	movs	r3, #135	; 0x87
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e001      	b.n	800078e <SD_SendCmd+0x6c>
	else crc = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe85 	bl	80004a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b4c      	cmp	r3, #76	; 0x4c
 800079a:	d101      	bne.n	80007a0 <SD_SendCmd+0x7e>
 800079c:	f7ff feb4 	bl	8000508 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007a0:	230a      	movs	r3, #10
 80007a2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007a4:	f7ff feb0 	bl	8000508 <SPI_RxByte>
 80007a8:	4603      	mov	r3, r0
 80007aa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	da05      	bge.n	80007c0 <SD_SendCmd+0x9e>
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	73bb      	strb	r3, [r7, #14]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f1      	bne.n	80007a4 <SD_SendCmd+0x82>

	return res;
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SD_disk_initialize+0x14>
 80007dc:	2301      	movs	r3, #1
 80007de:	e0d1      	b.n	8000984 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007e0:	4b6a      	ldr	r3, [pc, #424]	; (800098c <SD_disk_initialize+0x1c0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <SD_disk_initialize+0x2a>
 80007ee:	4b67      	ldr	r3, [pc, #412]	; (800098c <SD_disk_initialize+0x1c0>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	e0c6      	b.n	8000984 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80007f6:	f7ff fecb 	bl	8000590 <SD_PowerOn>

	/* slave select */
	SELECT();
 80007fa:	f7ff fe31 	bl	8000460 <SELECT>

	/* check disk type */
	type = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000802:	2100      	movs	r1, #0
 8000804:	2040      	movs	r0, #64	; 0x40
 8000806:	f7ff ff8c 	bl	8000722 <SD_SendCmd>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	f040 80a1 	bne.w	8000954 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000812:	4b5f      	ldr	r3, [pc, #380]	; (8000990 <SD_disk_initialize+0x1c4>)
 8000814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000818:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800081a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800081e:	2048      	movs	r0, #72	; 0x48
 8000820:	f7ff ff7f 	bl	8000722 <SD_SendCmd>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d155      	bne.n	80008d6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00c      	b.n	800084a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000830:	7bfc      	ldrb	r4, [r7, #15]
 8000832:	f7ff fe69 	bl	8000508 <SPI_RxByte>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	f104 0310 	add.w	r3, r4, #16
 800083e:	443b      	add	r3, r7
 8000840:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	3301      	adds	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d9ef      	bls.n	8000830 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d17e      	bne.n	8000954 <SD_disk_initialize+0x188>
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	2baa      	cmp	r3, #170	; 0xaa
 800085a:	d17b      	bne.n	8000954 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800085c:	2100      	movs	r1, #0
 800085e:	2077      	movs	r0, #119	; 0x77
 8000860:	f7ff ff5f 	bl	8000722 <SD_SendCmd>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d807      	bhi.n	800087a <SD_disk_initialize+0xae>
 800086a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800086e:	2069      	movs	r0, #105	; 0x69
 8000870:	f7ff ff57 	bl	8000722 <SD_SendCmd>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <SD_disk_initialize+0x1c4>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1ec      	bne.n	800085c <SD_disk_initialize+0x90>
 8000882:	e000      	b.n	8000886 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000884:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d062      	beq.n	8000954 <SD_disk_initialize+0x188>
 800088e:	2100      	movs	r1, #0
 8000890:	207a      	movs	r0, #122	; 0x7a
 8000892:	f7ff ff46 	bl	8000722 <SD_SendCmd>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d15b      	bne.n	8000954 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e00c      	b.n	80008bc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008a2:	7bfc      	ldrb	r4, [r7, #15]
 80008a4:	f7ff fe30 	bl	8000508 <SPI_RxByte>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	f104 0310 	add.w	r3, r4, #16
 80008b0:	443b      	add	r3, r7
 80008b2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3301      	adds	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d9ef      	bls.n	80008a2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008c2:	7a3b      	ldrb	r3, [r7, #8]
 80008c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SD_disk_initialize+0x104>
 80008cc:	230c      	movs	r3, #12
 80008ce:	e000      	b.n	80008d2 <SD_disk_initialize+0x106>
 80008d0:	2304      	movs	r3, #4
 80008d2:	73bb      	strb	r3, [r7, #14]
 80008d4:	e03e      	b.n	8000954 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008d6:	2100      	movs	r1, #0
 80008d8:	2077      	movs	r0, #119	; 0x77
 80008da:	f7ff ff22 	bl	8000722 <SD_SendCmd>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d808      	bhi.n	80008f6 <SD_disk_initialize+0x12a>
 80008e4:	2100      	movs	r1, #0
 80008e6:	2069      	movs	r0, #105	; 0x69
 80008e8:	f7ff ff1b 	bl	8000722 <SD_SendCmd>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d801      	bhi.n	80008f6 <SD_disk_initialize+0x12a>
 80008f2:	2302      	movs	r3, #2
 80008f4:	e000      	b.n	80008f8 <SD_disk_initialize+0x12c>
 80008f6:	2301      	movs	r3, #1
 80008f8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d10e      	bne.n	800091e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000900:	2100      	movs	r1, #0
 8000902:	2077      	movs	r0, #119	; 0x77
 8000904:	f7ff ff0d 	bl	8000722 <SD_SendCmd>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d80e      	bhi.n	800092c <SD_disk_initialize+0x160>
 800090e:	2100      	movs	r1, #0
 8000910:	2069      	movs	r0, #105	; 0x69
 8000912:	f7ff ff06 	bl	8000722 <SD_SendCmd>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d107      	bne.n	800092c <SD_disk_initialize+0x160>
 800091c:	e00c      	b.n	8000938 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800091e:	2100      	movs	r1, #0
 8000920:	2041      	movs	r0, #65	; 0x41
 8000922:	f7ff fefe 	bl	8000722 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <SD_disk_initialize+0x1c4>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1e2      	bne.n	80008fa <SD_disk_initialize+0x12e>
 8000934:	e000      	b.n	8000938 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000936:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d007      	beq.n	8000950 <SD_disk_initialize+0x184>
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	2050      	movs	r0, #80	; 0x50
 8000946:	f7ff feec 	bl	8000722 <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SD_disk_initialize+0x188>
 8000950:	2300      	movs	r3, #0
 8000952:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <SD_disk_initialize+0x1c8>)
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800095a:	f7ff fd91 	bl	8000480 <DESELECT>
	SPI_RxByte();
 800095e:	f7ff fdd3 	bl	8000508 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d008      	beq.n	800097a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SD_disk_initialize+0x1c0>)
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e001      	b.n	800097e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800097a:	f7ff fe4b 	bl	8000614 <SD_PowerOff>
	}

	return Stat;
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <SD_disk_initialize+0x1c0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	200000ac 	.word	0x200000ac
 8000994:	200000b0 	.word	0x200000b0

08000998 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SD_disk_status+0x14>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e002      	b.n	80009b2 <SD_disk_status+0x1a>
	return Stat;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <SD_disk_status+0x24>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000000 	.word	0x20000000

080009c0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <SD_disk_read+0x1c>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <SD_disk_read+0x20>
 80009dc:	2304      	movs	r3, #4
 80009de:	e051      	b.n	8000a84 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <SD_disk_read+0xcc>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SD_disk_read+0x32>
 80009ee:	2303      	movs	r3, #3
 80009f0:	e048      	b.n	8000a84 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SD_disk_read+0xd0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <SD_disk_read+0x44>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	025b      	lsls	r3, r3, #9
 8000a02:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a04:	f7ff fd2c 	bl	8000460 <SELECT>

	if (count == 1)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d111      	bne.n	8000a32 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2051      	movs	r0, #81	; 0x51
 8000a12:	f7ff fe86 	bl	8000722 <SD_SendCmd>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d129      	bne.n	8000a70 <SD_disk_read+0xb0>
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f7ff fe0d 	bl	8000640 <SD_RxDataBlock>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d021      	beq.n	8000a70 <SD_disk_read+0xb0>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	e01e      	b.n	8000a70 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2052      	movs	r0, #82	; 0x52
 8000a36:	f7ff fe74 	bl	8000722 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d117      	bne.n	8000a70 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a44:	68b8      	ldr	r0, [r7, #8]
 8000a46:	f7ff fdfb 	bl	8000640 <SD_RxDataBlock>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00a      	beq.n	8000a66 <SD_disk_read+0xa6>
				buff += 512;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a56:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1ed      	bne.n	8000a40 <SD_disk_read+0x80>
 8000a64:	e000      	b.n	8000a68 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a66:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	204c      	movs	r0, #76	; 0x4c
 8000a6c:	f7ff fe59 	bl	8000722 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a70:	f7ff fd06 	bl	8000480 <DESELECT>
	SPI_RxByte();
 8000a74:	f7ff fd48 	bl	8000508 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	200000b0 	.word	0x200000b0

08000a94 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <SD_disk_write+0x1c>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <SD_disk_write+0x20>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e06b      	b.n	8000b8c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <SD_disk_write+0x100>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SD_disk_write+0x32>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e062      	b.n	8000b8c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <SD_disk_write+0x100>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SD_disk_write+0x44>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e059      	b.n	8000b8c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <SD_disk_write+0x104>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <SD_disk_write+0x56>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	025b      	lsls	r3, r3, #9
 8000ae8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aea:	f7ff fcb9 	bl	8000460 <SELECT>

	if (count == 1)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d110      	bne.n	8000b16 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2058      	movs	r0, #88	; 0x58
 8000af8:	f7ff fe13 	bl	8000722 <SD_SendCmd>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d13a      	bne.n	8000b78 <SD_disk_write+0xe4>
 8000b02:	21fe      	movs	r1, #254	; 0xfe
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f7ff fdc9 	bl	800069c <SD_TxDataBlock>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d033      	beq.n	8000b78 <SD_disk_write+0xe4>
			count = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	e030      	b.n	8000b78 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <SD_disk_write+0x104>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d007      	beq.n	8000b32 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2077      	movs	r0, #119	; 0x77
 8000b26:	f7ff fdfc 	bl	8000722 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	2057      	movs	r0, #87	; 0x57
 8000b2e:	f7ff fdf8 	bl	8000722 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2059      	movs	r0, #89	; 0x59
 8000b36:	f7ff fdf4 	bl	8000722 <SD_SendCmd>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11b      	bne.n	8000b78 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b40:	21fc      	movs	r1, #252	; 0xfc
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f7ff fdaa 	bl	800069c <SD_TxDataBlock>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00a      	beq.n	8000b64 <SD_disk_write+0xd0>
				buff += 512;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b54:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1ee      	bne.n	8000b40 <SD_disk_write+0xac>
 8000b62:	e000      	b.n	8000b66 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b64:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b66:	21fd      	movs	r1, #253	; 0xfd
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fd97 	bl	800069c <SD_TxDataBlock>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b78:	f7ff fc82 	bl	8000480 <DESELECT>
	SPI_RxByte();
 8000b7c:	f7ff fcc4 	bl	8000508 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200000b0 	.word	0x200000b0

08000b9c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	603a      	str	r2, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_ioctl+0x1e>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e115      	b.n	8000de6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d124      	bne.n	8000c10 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d012      	beq.n	8000bf4 <SD_disk_ioctl+0x58>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	dc1a      	bgt.n	8000c08 <SD_disk_ioctl+0x6c>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <SD_disk_ioctl+0x40>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d006      	beq.n	8000be8 <SD_disk_ioctl+0x4c>
 8000bda:	e015      	b.n	8000c08 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000bdc:	f7ff fd1a 	bl	8000614 <SD_PowerOff>
			res = RES_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000be6:	e0fc      	b.n	8000de2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000be8:	f7ff fcd2 	bl	8000590 <SD_PowerOn>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0f6      	b.n	8000de2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	1c5c      	adds	r4, r3, #1
 8000bf8:	f7ff fd18 	bl	800062c <SD_CheckPower>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c06:	e0ec      	b.n	8000de2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c0e:	e0e8      	b.n	8000de2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c10:	4b77      	ldr	r3, [pc, #476]	; (8000df0 <SD_disk_ioctl+0x254>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SD_disk_ioctl+0x86>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e0e1      	b.n	8000de6 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c22:	f7ff fc1d 	bl	8000460 <SELECT>

		switch (ctrl)
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b0d      	cmp	r3, #13
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <SD_disk_ioctl+0x228>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <SD_disk_ioctl+0x98>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000d2f 	.word	0x08000d2f
 8000c38:	08000c6d 	.word	0x08000c6d
 8000c3c:	08000d1f 	.word	0x08000d1f
 8000c40:	08000dc5 	.word	0x08000dc5
 8000c44:	08000dc5 	.word	0x08000dc5
 8000c48:	08000dc5 	.word	0x08000dc5
 8000c4c:	08000dc5 	.word	0x08000dc5
 8000c50:	08000dc5 	.word	0x08000dc5
 8000c54:	08000dc5 	.word	0x08000dc5
 8000c58:	08000dc5 	.word	0x08000dc5
 8000c5c:	08000dc5 	.word	0x08000dc5
 8000c60:	08000d41 	.word	0x08000d41
 8000c64:	08000d65 	.word	0x08000d65
 8000c68:	08000d89 	.word	0x08000d89
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2049      	movs	r0, #73	; 0x49
 8000c70:	f7ff fd57 	bl	8000722 <SD_SendCmd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 80a8 	bne.w	8000dcc <SD_disk_ioctl+0x230>
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2110      	movs	r1, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fcdc 	bl	8000640 <SD_RxDataBlock>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 809e 	beq.w	8000dcc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c90:	7b3b      	ldrb	r3, [r7, #12]
 8000c92:	099b      	lsrs	r3, r3, #6
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d10e      	bne.n	8000cb8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	7d3b      	ldrb	r3, [r7, #20]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cae:	8bfb      	ldrh	r3, [r7, #30]
 8000cb0:	029a      	lsls	r2, r3, #10
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e02e      	b.n	8000d16 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	09db      	lsrs	r3, r3, #7
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	7d7b      	ldrb	r3, [r7, #21]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f003 0306 	and.w	r3, r3, #6
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ce0:	7d3b      	ldrb	r3, [r7, #20]
 8000ce2:	099b      	lsrs	r3, r3, #6
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	7cfb      	ldrb	r3, [r7, #19]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cbb      	ldrb	r3, [r7, #18]
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3301      	adds	r3, #1
 8000d06:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d08:	8bfa      	ldrh	r2, [r7, #30]
 8000d0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d0e:	3b09      	subs	r3, #9
 8000d10:	409a      	lsls	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d1c:	e056      	b.n	8000dcc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2c:	e055      	b.n	8000dda <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d2e:	f7ff fc15 	bl	800055c <SD_ReadyWait>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2bff      	cmp	r3, #255	; 0xff
 8000d36:	d14b      	bne.n	8000dd0 <SD_disk_ioctl+0x234>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d3e:	e047      	b.n	8000dd0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d40:	2100      	movs	r1, #0
 8000d42:	2049      	movs	r0, #73	; 0x49
 8000d44:	f7ff fced 	bl	8000722 <SD_SendCmd>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d142      	bne.n	8000dd4 <SD_disk_ioctl+0x238>
 8000d4e:	2110      	movs	r1, #16
 8000d50:	6a38      	ldr	r0, [r7, #32]
 8000d52:	f7ff fc75 	bl	8000640 <SD_RxDataBlock>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d03b      	beq.n	8000dd4 <SD_disk_ioctl+0x238>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d62:	e037      	b.n	8000dd4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d64:	2100      	movs	r1, #0
 8000d66:	204a      	movs	r0, #74	; 0x4a
 8000d68:	f7ff fcdb 	bl	8000722 <SD_SendCmd>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d132      	bne.n	8000dd8 <SD_disk_ioctl+0x23c>
 8000d72:	2110      	movs	r1, #16
 8000d74:	6a38      	ldr	r0, [r7, #32]
 8000d76:	f7ff fc63 	bl	8000640 <SD_RxDataBlock>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d02b      	beq.n	8000dd8 <SD_disk_ioctl+0x23c>
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d86:	e027      	b.n	8000dd8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	207a      	movs	r0, #122	; 0x7a
 8000d8c:	f7ff fcc9 	bl	8000722 <SD_SendCmd>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d9c:	e00b      	b.n	8000db6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000d9e:	6a3c      	ldr	r4, [r7, #32]
 8000da0:	1c63      	adds	r3, r4, #1
 8000da2:	623b      	str	r3, [r7, #32]
 8000da4:	f7ff fbb0 	bl	8000508 <SPI_RxByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d9ef      	bls.n	8000d9e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dca:	e006      	b.n	8000dda <SD_disk_ioctl+0x23e>
			break;
 8000dcc:	bf00      	nop
 8000dce:	e004      	b.n	8000dda <SD_disk_ioctl+0x23e>
			break;
 8000dd0:	bf00      	nop
 8000dd2:	e002      	b.n	8000dda <SD_disk_ioctl+0x23e>
			break;
 8000dd4:	bf00      	nop
 8000dd6:	e000      	b.n	8000dda <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
		}

		DESELECT();
 8000dda:	f7ff fb51 	bl	8000480 <DESELECT>
		SPI_RxByte();
 8000dde:	f7ff fb93 	bl	8000508 <SPI_RxByte>
	}

	return res;
 8000de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	372c      	adds	r7, #44	; 0x2c
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000

08000df4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MFRC522_CS_Pin|MFRC522_SCK_Pin|MFRC522_MOSI_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2170      	movs	r1, #112	; 0x70
 8000e54:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e56:	f001 fffc 	bl	8002e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MFRC522_RST_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f241 0101 	movw	r1, #4097	; 0x1001
 8000e60:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000e62:	f001 fff6 	bl	8002e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MFRC522_CS_Pin|MFRC522_SCK_Pin|MFRC522_MOSI_Pin;
 8000e66:	2370      	movs	r3, #112	; 0x70
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e7e:	f001 fe4d 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFRC522_MISO_Pin;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MFRC522_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e96:	f001 fe41 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = MFRC522_RST_Pin|GPIO_PIN_12;
 8000e9a:	f241 0301 	movw	r3, #4097	; 0x1001
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_GPIO_Init+0xd4>)
 8000eb4:	f001 fe32 	bl	8002b1c <HAL_GPIO_Init>

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <MX_I2C1_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_I2C1_Init+0x58>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_I2C1_Init+0x50>)
 8000f0a:	f001 ffbb 	bl	8002e84 <HAL_I2C_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 fbbb 	bl	800168e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000b4 	.word	0x200000b4
 8000f20:	40005400 	.word	0x40005400
 8000f24:	00061a80 	.word	0x00061a80

08000f28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_I2C2_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_I2C2_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_I2C2_Init+0x50>)
 8000f66:	f001 ff8d 	bl	8002e84 <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 fb8d 	bl	800168e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000108 	.word	0x20000108
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a2b      	ldr	r2, [pc, #172]	; (800104c <HAL_I2C_MspInit+0xc8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d124      	bne.n	8000fee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a29      	ldr	r2, [pc, #164]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbc:	23c0      	movs	r3, #192	; 0xc0
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <HAL_I2C_MspInit+0xd0>)
 8000fd0:	f001 fda4 	bl	8002b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fec:	e029      	b.n	8001042 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_I2C_MspInit+0xd4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d124      	bne.n	8001042 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001010:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4619      	mov	r1, r3
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_I2C_MspInit+0xd0>)
 8001026:	f001 fd79 	bl	8002b1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0xcc>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40005800 	.word	0x40005800

0800105c <DisplayTimeOnly>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DisplayTimeOnly(void) {
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af02      	add	r7, sp, #8
    ds1307_update(&my_rtc);
 8001062:	4826      	ldr	r0, [pc, #152]	; (80010fc <DisplayTimeOnly+0xa0>)
 8001064:	f7ff f9be 	bl	80003e4 <ds1307_update>
    char date_str[20], time_str[20], dt[30];
    sprintf(date_str, "%02d/%02d/%02d",
            my_rtc.date, my_rtc.month, my_rtc.year % 100);
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <DisplayTimeOnly+0xa0>)
 800106a:	791b      	ldrb	r3, [r3, #4]
    sprintf(date_str, "%02d/%02d/%02d",
 800106c:	461c      	mov	r4, r3
            my_rtc.date, my_rtc.month, my_rtc.year % 100);
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <DisplayTimeOnly+0xa0>)
 8001070:	795b      	ldrb	r3, [r3, #5]
    sprintf(date_str, "%02d/%02d/%02d",
 8001072:	461d      	mov	r5, r3
            my_rtc.date, my_rtc.month, my_rtc.year % 100);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <DisplayTimeOnly+0xa0>)
 8001076:	88db      	ldrh	r3, [r3, #6]
    sprintf(date_str, "%02d/%02d/%02d",
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <DisplayTimeOnly+0xa4>)
 800107a:	fba2 1203 	umull	r1, r2, r2, r3
 800107e:	0952      	lsrs	r2, r2, #5
 8001080:	2164      	movs	r1, #100	; 0x64
 8001082:	fb01 f202 	mul.w	r2, r1, r2
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	462b      	mov	r3, r5
 8001092:	4622      	mov	r2, r4
 8001094:	491b      	ldr	r1, [pc, #108]	; (8001104 <DisplayTimeOnly+0xa8>)
 8001096:	f008 f927 	bl	80092e8 <siprintf>
    sprintf(time_str, "%02d:%02d:%02d",
            my_rtc.hours, my_rtc.minutes, my_rtc.seconds);
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <DisplayTimeOnly+0xa0>)
 800109c:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_str, "%02d:%02d:%02d",
 800109e:	461a      	mov	r2, r3
            my_rtc.hours, my_rtc.minutes, my_rtc.seconds);
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <DisplayTimeOnly+0xa0>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
    sprintf(time_str, "%02d:%02d:%02d",
 80010a4:	4619      	mov	r1, r3
            my_rtc.hours, my_rtc.minutes, my_rtc.seconds);
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <DisplayTimeOnly+0xa0>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
    sprintf(time_str, "%02d:%02d:%02d",
 80010aa:	f107 0020 	add.w	r0, r7, #32
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	460b      	mov	r3, r1
 80010b2:	4915      	ldr	r1, [pc, #84]	; (8001108 <DisplayTimeOnly+0xac>)
 80010b4:	f008 f918 	bl	80092e8 <siprintf>
    sprintf(dt, "%s %s", date_str, time_str);
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80010c0:	4638      	mov	r0, r7
 80010c2:	4912      	ldr	r1, [pc, #72]	; (800110c <DisplayTimeOnly+0xb0>)
 80010c4:	f008 f910 	bl	80092e8 <siprintf>

    SSD1306_GotoXY(5, 1);
 80010c8:	2101      	movs	r1, #1
 80010ca:	2005      	movs	r0, #5
 80010cc:	f000 ffba 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts("                    ", &Font_7x10, BLACK);
 80010d0:	2200      	movs	r2, #0
 80010d2:	490f      	ldr	r1, [pc, #60]	; (8001110 <DisplayTimeOnly+0xb4>)
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <DisplayTimeOnly+0xb8>)
 80010d6:	f001 f84b 	bl	8002170 <SSD1306_Puts>
    SSD1306_GotoXY(5, 1);
 80010da:	2101      	movs	r1, #1
 80010dc:	2005      	movs	r0, #5
 80010de:	f000 ffb1 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts((char*)dt, &Font_7x10, WHITE);  // cast para evitar warning
 80010e2:	463b      	mov	r3, r7
 80010e4:	2201      	movs	r2, #1
 80010e6:	490a      	ldr	r1, [pc, #40]	; (8001110 <DisplayTimeOnly+0xb4>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f841 	bl	8002170 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80010ee:	f000 ff05 	bl	8001efc <SSD1306_UpdateScreen>
}
 80010f2:	bf00      	nop
 80010f4:	3748      	adds	r7, #72	; 0x48
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200021b8 	.word	0x200021b8
 8001100:	51eb851f 	.word	0x51eb851f
 8001104:	0800a4b8 	.word	0x0800a4b8
 8001108:	0800a4c8 	.word	0x0800a4c8
 800110c:	0800a4d8 	.word	0x0800a4d8
 8001110:	20000004 	.word	0x20000004
 8001114:	0800a4e0 	.word	0x0800a4e0

08001118 <DrawIdleStatic>:

void DrawIdleStatic(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    SSD1306_Clear();
 800111c:	f001 f995 	bl	800244a <SSD1306_Clear>
    DisplayTimeOnly();
 8001120:	f7ff ff9c 	bl	800105c <DisplayTimeOnly>
    SSD1306_GotoXY(0, 25);
 8001124:	2119      	movs	r1, #25
 8001126:	2000      	movs	r0, #0
 8001128:	f000 ff8c 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts("ESCANEAR", &Font_11x18, WHITE);
 800112c:	2201      	movs	r2, #1
 800112e:	4904      	ldr	r1, [pc, #16]	; (8001140 <DrawIdleStatic+0x28>)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <DrawIdleStatic+0x2c>)
 8001132:	f001 f81d 	bl	8002170 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001136:	f000 fee1 	bl	8001efc <SSD1306_UpdateScreen>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c
 8001144:	0800a4f8 	.word	0x0800a4f8

08001148 <DrawUserAndDateBelow>:

// --- Helper estático: pinta Usuario en medio y Fecha/Hora abajo ---
static void DrawUserAndDateBelow(const char* timestamp, const char* usuario) {
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b0a7      	sub	sp, #156	; 0x9c
 800114c:	af0a      	add	r7, sp, #40	; 0x28
 800114e:	6178      	str	r0, [r7, #20]
 8001150:	6139      	str	r1, [r7, #16]
    int sfw = Font_7x10.FontWidth;
 8001152:	4b4e      	ldr	r3, [pc, #312]	; (800128c <DrawUserAndDateBelow+0x144>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	66fb      	str	r3, [r7, #108]	; 0x6c
    int sfh = Font_7x10.FontHeight;
 8001158:	4b4c      	ldr	r3, [pc, #304]	; (800128c <DrawUserAndDateBelow+0x144>)
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	66bb      	str	r3, [r7, #104]	; 0x68
    int lfw = Font_11x18.FontWidth;
 800115e:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <DrawUserAndDateBelow+0x148>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	667b      	str	r3, [r7, #100]	; 0x64
    int lfh = Font_11x18.FontHeight;
 8001164:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <DrawUserAndDateBelow+0x148>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	663b      	str	r3, [r7, #96]	; 0x60

    // 1) Usuario centrado en Y ≈ 28
    char usr_line[32];
    snprintf(usr_line, sizeof(usr_line), "Usuario:%s", usuario);
 800116a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <DrawUserAndDateBelow+0x14c>)
 8001172:	2120      	movs	r1, #32
 8001174:	f008 f884 	bl	8009280 <sniprintf>
    int wus = strlen(usr_line) * sfw;
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4618      	mov	r0, r3
 800117e:	f7fe ffe5 	bl	800014c <strlen>
 8001182:	4602      	mov	r2, r0
 8001184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	65fb      	str	r3, [r7, #92]	; 0x5c
    int xus = (SSD1306_WIDTH - wus) / 2;
 800118c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001192:	0fda      	lsrs	r2, r3, #31
 8001194:	4413      	add	r3, r2
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
    SSD1306_GotoXY(xus, (SSD1306_HEIGHT - sfh) / 2);
 800119a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800119c:	b298      	uxth	r0, r3
 800119e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80011a4:	0fda      	lsrs	r2, r3, #31
 80011a6:	4413      	add	r3, r2
 80011a8:	105b      	asrs	r3, r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4619      	mov	r1, r3
 80011ae:	f000 ff49 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts(usr_line, &Font_7x10, WHITE);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	2201      	movs	r2, #1
 80011b8:	4934      	ldr	r1, [pc, #208]	; (800128c <DrawUserAndDateBelow+0x144>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 ffd8 	bl	8002170 <SSD1306_Puts>

    // 2) Fecha+Hora formateada y centrada en Y = 64 - lfh - 2
    char dt_disp[16];
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
             timestamp[8], timestamp[9],
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3308      	adds	r3, #8
 80011c4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011c6:	469c      	mov	ip, r3
             timestamp[8], timestamp[9],
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3309      	adds	r3, #9
 80011cc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011ce:	461a      	mov	r2, r3
             timestamp[5], timestamp[6],
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3305      	adds	r3, #5
 80011d4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011d6:	4619      	mov	r1, r3
             timestamp[5], timestamp[6],
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3306      	adds	r3, #6
 80011dc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011de:	461c      	mov	r4, r3
             timestamp[2], timestamp[3],
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3302      	adds	r3, #2
 80011e4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011e6:	461d      	mov	r5, r3
             timestamp[2], timestamp[3],
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3303      	adds	r3, #3
 80011ec:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011ee:	461e      	mov	r6, r3
             timestamp[11], timestamp[12],
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	330b      	adds	r3, #11
 80011f4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011f6:	60fb      	str	r3, [r7, #12]
             timestamp[11], timestamp[12],
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	330c      	adds	r3, #12
 80011fc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 80011fe:	60bb      	str	r3, [r7, #8]
             timestamp[14], timestamp[15]);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	330e      	adds	r3, #14
 8001204:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 8001206:	607b      	str	r3, [r7, #4]
             timestamp[14], timestamp[15]);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	330f      	adds	r3, #15
 800120c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dt_disp, sizeof(dt_disp), "%c%c/%c%c/%c%c %c%c:%c%c",
 800120e:	f107 001c 	add.w	r0, r7, #28
 8001212:	9308      	str	r3, [sp, #32]
 8001214:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8001218:	f8cd e01c 	str.w	lr, [sp, #28]
 800121c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001220:	f8cd e018 	str.w	lr, [sp, #24]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	9305      	str	r3, [sp, #20]
 8001228:	9604      	str	r6, [sp, #16]
 800122a:	9503      	str	r5, [sp, #12]
 800122c:	9402      	str	r4, [sp, #8]
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	4663      	mov	r3, ip
 8001234:	4a18      	ldr	r2, [pc, #96]	; (8001298 <DrawUserAndDateBelow+0x150>)
 8001236:	2110      	movs	r1, #16
 8001238:	f008 f822 	bl	8009280 <sniprintf>
    int wdt = strlen(dt_disp) * lfw;
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4618      	mov	r0, r3
 8001242:	f7fe ff83 	bl	800014c <strlen>
 8001246:	4602      	mov	r2, r0
 8001248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
    int xdt = (SSD1306_WIDTH - wdt) / 2;
 8001250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001252:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001256:	0fda      	lsrs	r2, r3, #31
 8001258:	4413      	add	r3, r2
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	653b      	str	r3, [r7, #80]	; 0x50
    int ydt = SSD1306_HEIGHT - lfh - 2;
 800125e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001260:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8001264:	64fb      	str	r3, [r7, #76]	; 0x4c
    SSD1306_GotoXY(xdt, ydt);
 8001266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001268:	b29b      	uxth	r3, r3
 800126a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800126c:	b292      	uxth	r2, r2
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fee7 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts(dt_disp, &Font_11x18, WHITE);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2201      	movs	r2, #1
 800127c:	4904      	ldr	r1, [pc, #16]	; (8001290 <DrawUserAndDateBelow+0x148>)
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ff76 	bl	8002170 <SSD1306_Puts>
}
 8001284:	bf00      	nop
 8001286:	3774      	adds	r7, #116	; 0x74
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	20000004 	.word	0x20000004
 8001290:	2000000c 	.word	0x2000000c
 8001294:	0800a504 	.word	0x0800a504
 8001298:	0800a510 	.word	0x0800a510

0800129c <DisplayScan>:

// --- Función principal con restauración ---
void DisplayScan(const char* timestamp, const char* usuario) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    // 1) Limpiar toda la pantalla
    SSD1306_Clear();
 80012a6:	f001 f8d0 	bl	800244a <SSD1306_Clear>

    // 2) Pintar la parte fija (usuario + fecha abajo)
    DrawUserAndDateBelow(timestamp, usuario);
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff4b 	bl	8001148 <DrawUserAndDateBelow>
    SSD1306_UpdateScreen();
 80012b2:	f000 fe23 	bl	8001efc <SSD1306_UpdateScreen>

    // 3) Parámetros de fuente pequeña
    int sfw = Font_7x10.FontWidth;
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <DisplayScan+0xe8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	61fb      	str	r3, [r7, #28]
    int sfh = Font_7x10.FontHeight;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <DisplayScan+0xe8>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	61bb      	str	r3, [r7, #24]

    // 4) Animación arriba: "Lectura OK" sobre negro
    const char* m1 = "Lectura OK";
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <DisplayScan+0xec>)
 80012c4:	617b      	str	r3, [r7, #20]
    int x1 = (SSD1306_WIDTH - strlen(m1) * sfw) / 2;
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7fe ff40 	bl	800014c <strlen>
 80012cc:	4602      	mov	r2, r0
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
    SSD1306_DrawFilledRectangle(0, 0, SSD1306_WIDTH, sfh, BLACK);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	2100      	movs	r1, #0
 80012e8:	2000      	movs	r0, #0
 80012ea:	f001 f861 	bl	80023b0 <SSD1306_DrawFilledRectangle>
    SSD1306_GotoXY(x1, 0);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fea5 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts((char*)m1, &Font_7x10, WHITE);
 80012fa:	2201      	movs	r2, #1
 80012fc:	4921      	ldr	r1, [pc, #132]	; (8001384 <DisplayScan+0xe8>)
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f000 ff36 	bl	8002170 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001304:	f000 fdfa 	bl	8001efc <SSD1306_UpdateScreen>
    HAL_Delay(1200);
 8001308:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800130c:	f001 fafe 	bl	800290c <HAL_Delay>

    // 5) Animación arriba: "Guardando..." sobre blanco
    const char* m2 = "Guardando...";
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <DisplayScan+0xf0>)
 8001312:	60fb      	str	r3, [r7, #12]
    int x2 = (SSD1306_WIDTH - strlen(m2) * sfw) / 2;
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7fe ff19 	bl	800014c <strlen>
 800131a:	4602      	mov	r2, r0
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
    SSD1306_DrawFilledRectangle(0, 0, SSD1306_WIDTH, sfh, WHITE);
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	b29b      	uxth	r3, r3
 800132e:	2201      	movs	r2, #1
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f001 f83a 	bl	80023b0 <SSD1306_DrawFilledRectangle>
    SSD1306_GotoXY(x2, 0);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	b29b      	uxth	r3, r3
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fe7e 	bl	8002044 <SSD1306_GotoXY>
    SSD1306_Puts((char*)m2, &Font_7x10, BLACK);
 8001348:	2200      	movs	r2, #0
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <DisplayScan+0xe8>)
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 ff0f 	bl	8002170 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001352:	f000 fdd3 	bl	8001efc <SSD1306_UpdateScreen>
    HAL_Delay(1200);
 8001356:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800135a:	f001 fad7 	bl	800290c <HAL_Delay>

    // 6) Restaurar la franja de arriba (fondo negro) y volver a pintar la parte fija
    SSD1306_DrawFilledRectangle(0, 0, SSD1306_WIDTH, sfh, BLACK);
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9200      	str	r2, [sp, #0]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	2100      	movs	r1, #0
 800136a:	2000      	movs	r0, #0
 800136c:	f001 f820 	bl	80023b0 <SSD1306_DrawFilledRectangle>
    DrawUserAndDateBelow(timestamp, usuario);
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fee8 	bl	8001148 <DrawUserAndDateBelow>
    SSD1306_UpdateScreen();
 8001378:	f000 fdc0 	bl	8001efc <SSD1306_UpdateScreen>
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000004 	.word	0x20000004
 8001388:	0800a52c 	.word	0x0800a52c
 800138c:	0800a538 	.word	0x0800a538

08001390 <UpdateCSVDateTimeString>:


void UpdateCSVDateTimeString(char* out) {
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af04      	add	r7, sp, #16
 8001396:	6078      	str	r0, [r7, #4]
    ds1307_update(&my_rtc);
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 800139a:	f7ff f823 	bl	80003e4 <ds1307_update>
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
            my_rtc.year % 100,
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013a0:	88db      	ldrh	r3, [r3, #6]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <UpdateCSVDateTimeString+0x64>)
 80013a4:	fba2 1203 	umull	r1, r2, r2, r3
 80013a8:	0952      	lsrs	r2, r2, #5
 80013aa:	2164      	movs	r1, #100	; 0x64
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461c      	mov	r4, r3
            my_rtc.month,
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013b8:	795b      	ldrb	r3, [r3, #5]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013ba:	461d      	mov	r5, r3
            my_rtc.date,
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013be:	791b      	ldrb	r3, [r3, #4]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013c0:	461a      	mov	r2, r3
            my_rtc.hours,
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013c4:	789b      	ldrb	r3, [r3, #2]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013c6:	4619      	mov	r1, r3
            my_rtc.minutes,
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013cc:	4618      	mov	r0, r3
            my_rtc.seconds);
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <UpdateCSVDateTimeString+0x60>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
    sprintf(out, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	9002      	str	r0, [sp, #8]
 80013d6:	9101      	str	r1, [sp, #4]
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	462b      	mov	r3, r5
 80013dc:	4622      	mov	r2, r4
 80013de:	4906      	ldr	r1, [pc, #24]	; (80013f8 <UpdateCSVDateTimeString+0x68>)
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f007 ff81 	bl	80092e8 <siprintf>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200021b8 	.word	0x200021b8
 80013f4:	51eb851f 	.word	0x51eb851f
 80013f8:	0800a548 	.word	0x0800a548

080013fc <generateUniqueId>:

void generateUniqueId(ds1307_dev_t* rtc, char* out) {
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af06      	add	r7, sp, #24
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    ds1307_update(rtc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7fe ffec 	bl	80003e4 <ds1307_update>
    uint16_t r = rand() % 1000;
 800140c:	f007 fe4a 	bl	80090a4 <rand>
 8001410:	4603      	mov	r3, r0
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <generateUniqueId+0x88>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1191      	asrs	r1, r2, #6
 800141a:	17da      	asrs	r2, r3, #31
 800141c:	1a8a      	subs	r2, r1, r2
 800141e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001422:	fb01 f202 	mul.w	r2, r1, r2
 8001426:	1a9a      	subs	r2, r3, r2
 8001428:	4613      	mov	r3, r2
 800142a:	81fb      	strh	r3, [r7, #14]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
        rtc->year % 100,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	88db      	ldrh	r3, [r3, #6]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 8001430:	4a15      	ldr	r2, [pc, #84]	; (8001488 <generateUniqueId+0x8c>)
 8001432:	fba2 1203 	umull	r1, r2, r2, r3
 8001436:	0952      	lsrs	r2, r2, #5
 8001438:	2164      	movs	r1, #100	; 0x64
 800143a:	fb01 f202 	mul.w	r2, r1, r2
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	461d      	mov	r5, r3
        rtc->month,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	795b      	ldrb	r3, [r3, #5]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 8001448:	461e      	mov	r6, r3
        rtc->date,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	791b      	ldrb	r3, [r3, #4]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 800144e:	461a      	mov	r2, r3
        rtc->hours,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	789b      	ldrb	r3, [r3, #2]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 8001454:	4619      	mov	r1, r3
        rtc->minutes,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 800145a:	4618      	mov	r0, r3
        rtc->seconds,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
    sprintf(out, "20%02d%02d%02d%02d%02d%02d%03d",
 8001460:	461c      	mov	r4, r3
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	9304      	str	r3, [sp, #16]
 8001466:	9403      	str	r4, [sp, #12]
 8001468:	9002      	str	r0, [sp, #8]
 800146a:	9101      	str	r1, [sp, #4]
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	4633      	mov	r3, r6
 8001470:	462a      	mov	r2, r5
 8001472:	4906      	ldr	r1, [pc, #24]	; (800148c <generateUniqueId+0x90>)
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f007 ff37 	bl	80092e8 <siprintf>
        r
    );
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001482:	bf00      	nop
 8001484:	10624dd3 	.word	0x10624dd3
 8001488:	51eb851f 	.word	0x51eb851f
 800148c:	0800a568 	.word	0x0800a568

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b098      	sub	sp, #96	; 0x60
 8001494:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f001 f9d7 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f8b3 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f7ff fca9 	bl	8000df4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a2:	f7ff fd13 	bl	8000ecc <MX_I2C1_Init>
  MX_I2C2_Init();
 80014a6:	f7ff fd3f 	bl	8000f28 <MX_I2C2_Init>
  MX_SPI2_Init();
 80014aa:	f000 fbe1 	bl	8001c70 <MX_SPI2_Init>
  MX_FATFS_Init();
 80014ae:	f003 fe65 	bl	800517c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80014b2:	f000 fa47 	bl	8001944 <MFRC522_Init>
  SSD1306_Init();
 80014b6:	f000 fc5d 	bl	8001d74 <SSD1306_Init>
  ds1307_init();
 80014ba:	f7fe fee9 	bl	8000290 <ds1307_init>


  //ds1307_config(30, 44, 12, Mar, 06, Mayo, 2025, +3, 00);

  // Montar el sistema de archivos
  f_mount(&fs, "", 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	4947      	ldr	r1, [pc, #284]	; (80015e0 <main+0x150>)
 80014c2:	4848      	ldr	r0, [pc, #288]	; (80015e4 <main+0x154>)
 80014c4:	f006 fb30 	bl	8007b28 <f_mount>
  if (f_open(&fil, "data.csv", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80014c8:	220a      	movs	r2, #10
 80014ca:	4947      	ldr	r1, [pc, #284]	; (80015e8 <main+0x158>)
 80014cc:	4847      	ldr	r0, [pc, #284]	; (80015ec <main+0x15c>)
 80014ce:	f006 fb75 	bl	8007bbc <f_open>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <main+0x4e>
      f_close(&fil);
 80014d8:	4844      	ldr	r0, [pc, #272]	; (80015ec <main+0x15c>)
 80014da:	f007 f98e 	bl	80087fa <f_close>
  }

  bool idle_drawn = false;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
      {
          if (!idle_drawn) {
 80014e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <main+0x6e>
              DrawIdleStatic();
 80014f2:	f7ff fe11 	bl	8001118 <DrawIdleStatic>
              idle_drawn = true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80014fc:	e001      	b.n	8001502 <main+0x72>
          } else {
              DisplayTimeOnly();
 80014fe:	f7ff fdad 	bl	800105c <DisplayTimeOnly>
          }

          if (MFRC522_IsCard(&TagType) && MFRC522_ReadCardSerial(UID)) {
 8001502:	483b      	ldr	r0, [pc, #236]	; (80015f0 <main+0x160>)
 8001504:	f000 fb8b 	bl	8001c1e <MFRC522_IsCard>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ea      	beq.n	80014e4 <main+0x54>
 800150e:	4839      	ldr	r0, [pc, #228]	; (80015f4 <main+0x164>)
 8001510:	f000 fb97 	bl	8001c42 <MFRC522_ReadCardSerial>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0e4      	beq.n	80014e4 <main+0x54>
              HAL_Delay(200);
 800151a:	20c8      	movs	r0, #200	; 0xc8
 800151c:	f001 f9f6 	bl	800290c <HAL_Delay>

              generateUniqueId(&my_rtc, record.id);
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4834      	ldr	r0, [pc, #208]	; (80015f8 <main+0x168>)
 8001526:	f7ff ff69 	bl	80013fc <generateUniqueId>
              strcpy(record.id_embebed, "AA4K0GH8"); // ID EMBEBED DE FABRICA
 800152a:	463b      	mov	r3, r7
 800152c:	3319      	adds	r3, #25
 800152e:	4933      	ldr	r1, [pc, #204]	; (80015fc <main+0x16c>)
 8001530:	461a      	mov	r2, r3
 8001532:	460b      	mov	r3, r1
 8001534:	cb03      	ldmia	r3!, {r0, r1}
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	6051      	str	r1, [r2, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	7213      	strb	r3, [r2, #8]
              sprintf(record.id_tag, "%02X%02X%02X%02X",
                      UID[0], UID[1], UID[2], UID[3]);
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <main+0x164>)
 8001540:	781b      	ldrb	r3, [r3, #0]
              sprintf(record.id_tag, "%02X%02X%02X%02X",
 8001542:	461c      	mov	r4, r3
                      UID[0], UID[1], UID[2], UID[3]);
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <main+0x164>)
 8001546:	785b      	ldrb	r3, [r3, #1]
              sprintf(record.id_tag, "%02X%02X%02X%02X",
 8001548:	461d      	mov	r5, r3
                      UID[0], UID[1], UID[2], UID[3]);
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <main+0x164>)
 800154c:	789b      	ldrb	r3, [r3, #2]
              sprintf(record.id_tag, "%02X%02X%02X%02X",
 800154e:	461a      	mov	r2, r3
                      UID[0], UID[1], UID[2], UID[3]);
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <main+0x164>)
 8001552:	78db      	ldrb	r3, [r3, #3]
              sprintf(record.id_tag, "%02X%02X%02X%02X",
 8001554:	4619      	mov	r1, r3
 8001556:	463b      	mov	r3, r7
 8001558:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800155c:	9101      	str	r1, [sp, #4]
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	462b      	mov	r3, r5
 8001562:	4622      	mov	r2, r4
 8001564:	4926      	ldr	r1, [pc, #152]	; (8001600 <main+0x170>)
 8001566:	f007 febf 	bl	80092e8 <siprintf>
              UpdateCSVDateTimeString(record.timestamp);
 800156a:	463b      	mov	r3, r7
 800156c:	3336      	adds	r3, #54	; 0x36
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff0e 	bl	8001390 <UpdateCSVDateTimeString>

              sprintf(usuario, "%02X%02X%02X%02X",
                      UID[0], UID[1], UID[2], UID[3]);
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <main+0x164>)
 8001576:	781b      	ldrb	r3, [r3, #0]
              sprintf(usuario, "%02X%02X%02X%02X",
 8001578:	4619      	mov	r1, r3
                      UID[0], UID[1], UID[2], UID[3]);
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <main+0x164>)
 800157c:	785b      	ldrb	r3, [r3, #1]
              sprintf(usuario, "%02X%02X%02X%02X",
 800157e:	461c      	mov	r4, r3
                      UID[0], UID[1], UID[2], UID[3]);
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <main+0x164>)
 8001582:	789b      	ldrb	r3, [r3, #2]
              sprintf(usuario, "%02X%02X%02X%02X",
 8001584:	461a      	mov	r2, r3
                      UID[0], UID[1], UID[2], UID[3]);
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <main+0x164>)
 8001588:	78db      	ldrb	r3, [r3, #3]
              sprintf(usuario, "%02X%02X%02X%02X",
 800158a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	460a      	mov	r2, r1
 8001596:	491a      	ldr	r1, [pc, #104]	; (8001600 <main+0x170>)
 8001598:	f007 fea6 	bl	80092e8 <siprintf>
              DisplayScan(record.timestamp, usuario);
 800159c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80015a0:	463b      	mov	r3, r7
 80015a2:	3336      	adds	r3, #54	; 0x36
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe78 	bl	800129c <DisplayScan>

              if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 80015ac:	2212      	movs	r2, #18
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <main+0x158>)
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <main+0x15c>)
 80015b2:	f006 fb03 	bl	8007bbc <f_open>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <main+0x13c>
                  writeCSVRecord(&fil, &record);
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <main+0x15c>)
 80015c2:	f7fe fdcb 	bl	800015c <writeCSVRecord>
                  f_close(&fil);
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <main+0x15c>)
 80015c8:	f007 f917 	bl	80087fa <f_close>
              }

              idle_drawn = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
              SSD1306_Clear();
 80015d2:	f000 ff3a 	bl	800244a <SSD1306_Clear>
              HAL_Delay(200);
 80015d6:	20c8      	movs	r0, #200	; 0xc8
 80015d8:	f001 f998 	bl	800290c <HAL_Delay>
          if (!idle_drawn) {
 80015dc:	e782      	b.n	80014e4 <main+0x54>
 80015de:	bf00      	nop
 80015e0:	0800a588 	.word	0x0800a588
 80015e4:	2000015c 	.word	0x2000015c
 80015e8:	0800a58c 	.word	0x0800a58c
 80015ec:	2000118c 	.word	0x2000118c
 80015f0:	200021cc 	.word	0x200021cc
 80015f4:	200021c4 	.word	0x200021c4
 80015f8:	200021b8 	.word	0x200021b8
 80015fc:	0800a598 	.word	0x0800a598
 8001600:	0800a5a4 	.word	0x0800a5a4

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	2228      	movs	r2, #40	; 0x28
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f007 fecb 	bl	80093ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4618      	mov	r0, r3
 800164e:	f002 fd7b 	bl	8004148 <HAL_RCC_OscConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001658:	f000 f819 	bl	800168e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2102      	movs	r1, #2
 8001676:	4618      	mov	r0, r3
 8001678:	f002 ffe8 	bl	800464c <HAL_RCC_ClockConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001682:	f000 f804 	bl	800168e <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3740      	adds	r7, #64	; 0x40
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001692:	b672      	cpsid	i
}
 8001694:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001696:	e7fe      	b.n	8001696 <Error_Handler+0x8>

08001698 <MFRC522_Rd>:
#include "main.h"
#include "mfrc522.h"

uint8_t MFRC522_Rd(uint8_t address)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
    unsigned int i, ucAddr;
    unsigned int ucResult = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2120      	movs	r1, #32
 80016aa:	4831      	ldr	r0, [pc, #196]	; (8001770 <MFRC522_Rd+0xd8>)
 80016ac:	f001 fbd1 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2110      	movs	r1, #16
 80016b4:	482e      	ldr	r0, [pc, #184]	; (8001770 <MFRC522_Rd+0xd8>)
 80016b6:	f001 fbcc 	bl	8002e52 <HAL_GPIO_WritePin>
    ucAddr = ((address << 1) & 0x7E) | 0x80;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	613b      	str	r3, [r7, #16]

    for(i=8; i>0; i--)
 80016c8:	2308      	movs	r3, #8
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e01c      	b.n	8001708 <MFRC522_Rd+0x70>
    {
    	HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((ucAddr & 0x80) == 0x80));
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	4823      	ldr	r0, [pc, #140]	; (8001770 <MFRC522_Rd+0xd8>)
 80016e4:	f001 fbb5 	bl	8002e52 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2120      	movs	r1, #32
 80016ec:	4820      	ldr	r0, [pc, #128]	; (8001770 <MFRC522_Rd+0xd8>)
 80016ee:	f001 fbb0 	bl	8002e52 <HAL_GPIO_WritePin>
        ucAddr <<= 1;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MFRC522_Rd+0xd8>)
 80016fe:	f001 fba8 	bl	8002e52 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3b01      	subs	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1df      	bne.n	80016ce <MFRC522_Rd+0x36>
    }
    for(i=8; i>0; i--)
 800170e:	2308      	movs	r3, #8
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e019      	b.n	8001748 <MFRC522_Rd+0xb0>
    {
    	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <MFRC522_Rd+0xd8>)
 800171a:	f001 fb9a 	bl	8002e52 <HAL_GPIO_WritePin>
        ucResult <<= 1;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
        ucResult |= (short)HAL_GPIO_ReadPin(MFRC522_MISO_GPIO_Port, MFRC522_MISO_Pin);
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <MFRC522_Rd+0xd8>)
 8001728:	f001 fb7c 	bl	8002e24 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	b21b      	sxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2120      	movs	r1, #32
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MFRC522_Rd+0xd8>)
 800173e:	f001 fb88 	bl	8002e52 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3b01      	subs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e2      	bne.n	8001714 <MFRC522_Rd+0x7c>
    }
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	2110      	movs	r1, #16
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MFRC522_Rd+0xd8>)
 8001754:	f001 fb7d 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	2120      	movs	r1, #32
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MFRC522_Rd+0xd8>)
 800175e:	f001 fb78 	bl	8002e52 <HAL_GPIO_WritePin>
    return ucResult;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40010800 	.word	0x40010800

08001774 <MFRC522_Wr>:

void MFRC522_Wr(uint8_t address, uint8_t value)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	460a      	mov	r2, r1
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]
	uint8_t i, ucAddr;
	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2120      	movs	r1, #32
 8001788:	482d      	ldr	r0, [pc, #180]	; (8001840 <MFRC522_Wr+0xcc>)
 800178a:	f001 fb62 	bl	8002e52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2110      	movs	r1, #16
 8001792:	482b      	ldr	r0, [pc, #172]	; (8001840 <MFRC522_Wr+0xcc>)
 8001794:	f001 fb5d 	bl	8002e52 <HAL_GPIO_WritePin>
    ucAddr = ((address << 1) & 0x7E);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80017a2:	73bb      	strb	r3, [r7, #14]

    for(i=8; i>0; i--)
 80017a4:	2308      	movs	r3, #8
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e019      	b.n	80017de <MFRC522_Wr+0x6a>
    {
        HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((ucAddr & 0x80) == 0x80));
 80017aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	09db      	lsrs	r3, r3, #7
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	2140      	movs	r1, #64	; 0x40
 80017b8:	4821      	ldr	r0, [pc, #132]	; (8001840 <MFRC522_Wr+0xcc>)
 80017ba:	f001 fb4a 	bl	8002e52 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	481f      	ldr	r0, [pc, #124]	; (8001840 <MFRC522_Wr+0xcc>)
 80017c4:	f001 fb45 	bl	8002e52 <HAL_GPIO_WritePin>
        ucAddr <<= 1;
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	73bb      	strb	r3, [r7, #14]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	481b      	ldr	r0, [pc, #108]	; (8001840 <MFRC522_Wr+0xcc>)
 80017d4:	f001 fb3d 	bl	8002e52 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	3b01      	subs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e2      	bne.n	80017aa <MFRC522_Wr+0x36>
    }
    for(i=8; i>0; i--)
 80017e4:	2308      	movs	r3, #8
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e019      	b.n	800181e <MFRC522_Wr+0xaa>
    {
        HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((value & 0x80) == 0x80));
 80017ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	09db      	lsrs	r3, r3, #7
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <MFRC522_Wr+0xcc>)
 80017fa:	f001 fb2a 	bl	8002e52 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <MFRC522_Wr+0xcc>)
 8001804:	f001 fb25 	bl	8002e52 <HAL_GPIO_WritePin>
        value <<= 1;
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	71bb      	strb	r3, [r7, #6]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2120      	movs	r1, #32
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <MFRC522_Wr+0xcc>)
 8001814:	f001 fb1d 	bl	8002e52 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	3b01      	subs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e2      	bne.n	80017ea <MFRC522_Wr+0x76>
    }
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	2110      	movs	r1, #16
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MFRC522_Wr+0xcc>)
 800182a:	f001 fb12 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 800182e:	2201      	movs	r2, #1
 8001830:	2120      	movs	r1, #32
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <MFRC522_Wr+0xcc>)
 8001834:	f001 fb0d 	bl	8002e52 <HAL_GPIO_WritePin>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40010800 	.word	0x40010800

08001844 <MFRC522_Clear_Bit>:

static void MFRC522_Clear_Bit(uint8_t addr, uint8_t mask)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_Rd(addr) ;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff1c 	bl	8001698 <MFRC522_Rd>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
    MFRC522_Wr(addr, tmp&~mask);
 8001864:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff7a 	bl	8001774 <MFRC522_Wr>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <MFRC522_Set_Bit>:

static void MFRC522_Set_Bit(uint8_t addr, uint8_t mask)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_Rd(addr);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fefa 	bl	8001698 <MFRC522_Rd>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
    MFRC522_Wr(addr, tmp | mask);
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <MFRC522_Wr>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <MFRC522_Reset>:

void MFRC522_Reset(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <MFRC522_Reset+0x48>)
 80018ce:	f001 fac0 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f001 f81a 	bl	800290c <HAL_Delay>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2101      	movs	r1, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <MFRC522_Reset+0x48>)
 80018de:	f001 fab8 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f001 f812 	bl	800290c <HAL_Delay>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2101      	movs	r1, #1
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <MFRC522_Reset+0x48>)
 80018ee:	f001 fab0 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f001 f80a 	bl	800290c <HAL_Delay>
    MFRC522_Wr(COMMANDREG, PCD_RESETPHASE);
 80018f8:	210f      	movs	r1, #15
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff3a 	bl	8001774 <MFRC522_Wr>
    HAL_Delay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f001 f803 	bl	800290c <HAL_Delay>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40010c00 	.word	0x40010c00

08001910 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	uint8_t stt = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	71fb      	strb	r3, [r7, #7]
    stt = MFRC522_Rd(TXCONTROLREG);
 800191a:	2014      	movs	r0, #20
 800191c:	f7ff febc 	bl	8001698 <MFRC522_Rd>
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
    MFRC522_Set_Bit(TXCONTROLREG, 0x03);
 8001924:	2103      	movs	r1, #3
 8001926:	2014      	movs	r0, #20
 8001928:	f7ff ffae 	bl	8001888 <MFRC522_Set_Bit>
    stt = stt;
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <MFRC522_AntennaOff>:

void MFRC522_AntennaOff(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    MFRC522_Clear_Bit(TXCONTROLREG, 0x03);
 8001938:	2103      	movs	r1, #3
 800193a:	2014      	movs	r0, #20
 800193c:	f7ff ff82 	bl	8001844 <MFRC522_Clear_Bit>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <MFRC522_Init>:

void MFRC522_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2120      	movs	r1, #32
 800194c:	4818      	ldr	r0, [pc, #96]	; (80019b0 <MFRC522_Init+0x6c>)
 800194e:	f001 fa80 	bl	8002e52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <MFRC522_Init+0x6c>)
 8001958:	f001 fa7b 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MFRC522_Init+0x6c>)
 8001962:	f001 fa76 	bl	8002e52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 8001966:	2201      	movs	r2, #1
 8001968:	2101      	movs	r1, #1
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <MFRC522_Init+0x70>)
 800196c:	f001 fa71 	bl	8002e52 <HAL_GPIO_WritePin>
    MFRC522_Reset();
 8001970:	f7ff ffa8 	bl	80018c4 <MFRC522_Reset>
    MFRC522_Wr(TMODEREG, 0x8D);
 8001974:	218d      	movs	r1, #141	; 0x8d
 8001976:	202a      	movs	r0, #42	; 0x2a
 8001978:	f7ff fefc 	bl	8001774 <MFRC522_Wr>
    MFRC522_Wr(TPRESCALERREG, 0x3E);
 800197c:	213e      	movs	r1, #62	; 0x3e
 800197e:	202b      	movs	r0, #43	; 0x2b
 8001980:	f7ff fef8 	bl	8001774 <MFRC522_Wr>
    MFRC522_Wr(TRELOADREGL, 30);
 8001984:	211e      	movs	r1, #30
 8001986:	202d      	movs	r0, #45	; 0x2d
 8001988:	f7ff fef4 	bl	8001774 <MFRC522_Wr>
    MFRC522_Wr(TRELOADREGH, 0);
 800198c:	2100      	movs	r1, #0
 800198e:	202c      	movs	r0, #44	; 0x2c
 8001990:	f7ff fef0 	bl	8001774 <MFRC522_Wr>
    MFRC522_Wr(TXAUTOREG, 0x40);
 8001994:	2140      	movs	r1, #64	; 0x40
 8001996:	2015      	movs	r0, #21
 8001998:	f7ff feec 	bl	8001774 <MFRC522_Wr>
    MFRC522_Wr(MODEREG, 0x3D);
 800199c:	213d      	movs	r1, #61	; 0x3d
 800199e:	2011      	movs	r0, #17
 80019a0:	f7ff fee8 	bl	8001774 <MFRC522_Wr>
    MFRC522_AntennaOff();
 80019a4:	f7ff ffc6 	bl	8001934 <MFRC522_AntennaOff>
    MFRC522_AntennaOn();
 80019a8:	f7ff ffb2 	bl	8001910 <MFRC522_AntennaOn>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40010800 	.word	0x40010800
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t cmd, uint8_t *dat, uint8_t len, uint8_t *back_dat, unsigned *back_len)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	4613      	mov	r3, r2
 80019c8:	73bb      	strb	r3, [r7, #14]
	uint8_t _status = MI_ERR;
 80019ca:	2302      	movs	r3, #2
 80019cc:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 80019d2:	2300      	movs	r3, #0
 80019d4:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
    uint8_t n;
    unsigned i;

    switch(cmd)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d006      	beq.n	80019ea <MFRC522_ToCard+0x32>
 80019dc:	2b0e      	cmp	r3, #14
 80019de:	d109      	bne.n	80019f4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:
            irqEn = 0x12;
 80019e0:	2312      	movs	r3, #18
 80019e2:	77bb      	strb	r3, [r7, #30]
            waitIRq = 0x10;
 80019e4:	2310      	movs	r3, #16
 80019e6:	777b      	strb	r3, [r7, #29]
            break;
 80019e8:	e005      	b.n	80019f6 <MFRC522_ToCard+0x3e>

        case PCD_TRANSCEIVE:
            irqEn = 0x77;
 80019ea:	2377      	movs	r3, #119	; 0x77
 80019ec:	77bb      	strb	r3, [r7, #30]
            waitIRq = 0x30;
 80019ee:	2330      	movs	r3, #48	; 0x30
 80019f0:	777b      	strb	r3, [r7, #29]
            break;
 80019f2:	e000      	b.n	80019f6 <MFRC522_ToCard+0x3e>

        default:
            break;
 80019f4:	bf00      	nop
    }
    MFRC522_Wr(COMMIENREG, irqEn | 0x80);
 80019f6:	7fbb      	ldrb	r3, [r7, #30]
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	2002      	movs	r0, #2
 8001a02:	f7ff feb7 	bl	8001774 <MFRC522_Wr>
    MFRC522_Clear_Bit(COMMIRQREG, 0x80);
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	2004      	movs	r0, #4
 8001a0a:	f7ff ff1b 	bl	8001844 <MFRC522_Clear_Bit>
    MFRC522_Set_Bit(FIFOLEVELREG, 0x80);
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	200a      	movs	r0, #10
 8001a12:	f7ff ff39 	bl	8001888 <MFRC522_Set_Bit>
    MFRC522_Wr(COMMANDREG, PCD_IDLE);
 8001a16:	2100      	movs	r1, #0
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff feab 	bl	8001774 <MFRC522_Wr>

    for(i=0; i<len; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e00a      	b.n	8001a3a <MFRC522_ToCard+0x82>
    {
        MFRC522_Wr(FIFODATAREG, dat[i]);
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2009      	movs	r0, #9
 8001a30:	f7ff fea0 	bl	8001774 <MFRC522_Wr>
    for(i=0; i<len; i++)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	3301      	adds	r3, #1
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3f0      	bcc.n	8001a24 <MFRC522_ToCard+0x6c>
    }
    MFRC522_Wr(COMMANDREG, cmd);
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	4619      	mov	r1, r3
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fe94 	bl	8001774 <MFRC522_Wr>
    if(cmd == PCD_TRANSCEIVE)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d103      	bne.n	8001a5a <MFRC522_ToCard+0xa2>
    {
        MFRC522_Set_Bit(BITFRAMINGREG, 0x80);
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	200d      	movs	r0, #13
 8001a56:	f7ff ff17 	bl	8001888 <MFRC522_Set_Bit>
    }
    i = 0xFFFF;
 8001a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5e:	61bb      	str	r3, [r7, #24]
    do
    {
        n = MFRC522_Rd(COMMIRQREG);
 8001a60:	2004      	movs	r0, #4
 8001a62:	f7ff fe19 	bl	8001698 <MFRC522_Rd>
 8001a66:	4603      	mov	r3, r0
 8001a68:	773b      	strb	r3, [r7, #28]
        i--;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
    }while(i && !(n & 0x01) && !(n & waitIRq));
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <MFRC522_ToCard+0xd4>
 8001a76:	7f3b      	ldrb	r3, [r7, #28]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <MFRC522_ToCard+0xd4>
 8001a80:	7f3a      	ldrb	r2, [r7, #28]
 8001a82:	7f7b      	ldrb	r3, [r7, #29]
 8001a84:	4013      	ands	r3, r2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0e9      	beq.n	8001a60 <MFRC522_ToCard+0xa8>

    MFRC522_Clear_Bit(BITFRAMINGREG, 0x80);
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	200d      	movs	r0, #13
 8001a90:	f7ff fed8 	bl	8001844 <MFRC522_Clear_Bit>
    if(i != 0)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d057      	beq.n	8001b4a <MFRC522_ToCard+0x192>
    {
        if(!(MFRC522_Rd(ERRORREG) & 0x1B))
 8001a9a:	2006      	movs	r0, #6
 8001a9c:	f7ff fdfc 	bl	8001698 <MFRC522_Rd>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 031b 	and.w	r3, r3, #27
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d14d      	bne.n	8001b46 <MFRC522_ToCard+0x18e>
        {
            _status = MI_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	77fb      	strb	r3, [r7, #31]
            if(n & irqEn & 0x01)
 8001aae:	7f3a      	ldrb	r2, [r7, #28]
 8001ab0:	7fbb      	ldrb	r3, [r7, #30]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MFRC522_ToCard+0x10a>
            {
                _status = MI_NOTAGERR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	77fb      	strb	r3, [r7, #31]
            }
            if(cmd == PCD_TRANSCEIVE)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d140      	bne.n	8001b4a <MFRC522_ToCard+0x192>
            {
                n = MFRC522_Rd(FIFOLEVELREG);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f7ff fde5 	bl	8001698 <MFRC522_Rd>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	773b      	strb	r3, [r7, #28]
                lastBits = MFRC522_Rd(CONTROLREG) & 0x07;
 8001ad2:	200c      	movs	r0, #12
 8001ad4:	f7ff fde0 	bl	8001698 <MFRC522_Rd>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	75fb      	strb	r3, [r7, #23]
                if(lastBits)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <MFRC522_ToCard+0x140>
                {
                    *back_len = (n-1) * 8 + lastBits;
 8001ae6:	7f3b      	ldrb	r3, [r7, #28]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	00da      	lsls	r2, r3, #3
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e004      	b.n	8001b02 <MFRC522_ToCard+0x14a>
                }
                else
                {
                    *back_len = n * 8;
 8001af8:	7f3b      	ldrb	r3, [r7, #28]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	601a      	str	r2, [r3, #0]
                }
                if(n == 0)
 8001b02:	7f3b      	ldrb	r3, [r7, #28]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <MFRC522_ToCard+0x154>
                {
                    n = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	773b      	strb	r3, [r7, #28]
                }
                if(n > 16)
 8001b0c:	7f3b      	ldrb	r3, [r7, #28]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d901      	bls.n	8001b16 <MFRC522_ToCard+0x15e>
                {
                    n = 16;
 8001b12:	2310      	movs	r3, #16
 8001b14:	773b      	strb	r3, [r7, #28]
                }
                for(i=0; i<n; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e00a      	b.n	8001b32 <MFRC522_ToCard+0x17a>
                {
                	back_dat[i] = MFRC522_Rd(FIFODATAREG);
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	18d4      	adds	r4, r2, r3
 8001b22:	2009      	movs	r0, #9
 8001b24:	f7ff fdb8 	bl	8001698 <MFRC522_Rd>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	7023      	strb	r3, [r4, #0]
                for(i=0; i<n; i++)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	7f3b      	ldrb	r3, [r7, #28]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3f0      	bcc.n	8001b1c <MFRC522_ToCard+0x164>
                }
                back_dat[i] = 0;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	4413      	add	r3, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e001      	b.n	8001b4a <MFRC522_ToCard+0x192>
            }
        }
        else
        {
            _status = MI_ERR;
 8001b46:	2302      	movs	r3, #2
 8001b48:	77fb      	strb	r3, [r7, #31]
        }
    }
    return _status;
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3724      	adds	r7, #36	; 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
	uint8_t _status;
    unsigned backBits;
    MFRC522_Wr(BITFRAMINGREG, 0x07);
 8001b60:	2107      	movs	r1, #7
 8001b62:	200d      	movs	r0, #13
 8001b64:	f7ff fe06 	bl	8001774 <MFRC522_Wr>
    TagType[0] = reqMode;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	701a      	strb	r2, [r3, #0]
    _status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	200c      	movs	r0, #12
 8001b7c:	f7ff ff1c 	bl	80019b8 <MFRC522_ToCard>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
    if((_status != MI_OK) || (backBits != 0x10))
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <MFRC522_Request+0x3c>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d001      	beq.n	8001b94 <MFRC522_Request+0x40>
    {
        _status = MI_ERR;
 8001b90:	2302      	movs	r3, #2
 8001b92:	73fb      	strb	r3, [r7, #15]
    }
    return _status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <MFRC522_AntiColl>:
    MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
    MFRC522_Clear_Bit(STATUS2REG, 0x08);
}

uint8_t MFRC522_AntiColl(uint8_t *serNum)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af02      	add	r7, sp, #8
 8001ba4:	6078      	str	r0, [r7, #4]
	uint8_t _status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	737b      	strb	r3, [r7, #13]
    unsigned unLen;
    MFRC522_Wr(BITFRAMINGREG, 0x00);
 8001baa:	2100      	movs	r1, #0
 8001bac:	200d      	movs	r0, #13
 8001bae:	f7ff fde1 	bl	8001774 <MFRC522_Wr>
    serNum[0] = PICC_ANTICOLL;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2293      	movs	r2, #147	; 0x93
 8001bb6:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	701a      	strb	r2, [r3, #0]
    MFRC522_Clear_Bit(STATUS2REG, 0x08);
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	2008      	movs	r0, #8
 8001bc4:	f7ff fe3e 	bl	8001844 <MFRC522_Clear_Bit>
    _status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	200c      	movs	r0, #12
 8001bd6:	f7ff feef 	bl	80019b8 <MFRC522_ToCard>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
    if(_status == MI_OK)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d117      	bne.n	8001c14 <MFRC522_AntiColl+0x76>
    {
        for(i=0; i<4; i++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	73bb      	strb	r3, [r7, #14]
 8001be8:	e009      	b.n	8001bfe <MFRC522_AntiColl+0x60>
        {
            serNumCheck ^= serNum[i];
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	7b7b      	ldrb	r3, [r7, #13]
 8001bf4:	4053      	eors	r3, r2
 8001bf6:	737b      	strb	r3, [r7, #13]
        for(i=0; i<4; i++)
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73bb      	strb	r3, [r7, #14]
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d9f2      	bls.n	8001bea <MFRC522_AntiColl+0x4c>
        }
        if(serNumCheck != serNum[4])
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	7b7a      	ldrb	r2, [r7, #13]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <MFRC522_AntiColl+0x76>
        {
            _status = MI_ERR;
 8001c10:	2302      	movs	r3, #2
 8001c12:	73fb      	strb	r3, [r7, #15]
        }
    }
    return _status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <MFRC522_IsCard>:

uint8_t MFRC522_IsCard(uint8_t *TagType)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
    if(MFRC522_Request(PICC_REQIDL, TagType) == MI_OK)
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2026      	movs	r0, #38	; 0x26
 8001c2a:	f7ff ff93 	bl	8001b54 <MFRC522_Request>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <MFRC522_IsCard+0x1a>
        return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <MFRC522_IsCard+0x1c>
    else
        return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <MFRC522_ReadCardSerial>:

uint8_t MFRC522_ReadCardSerial(uint8_t *str)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	uint8_t _status;
    _status = MFRC522_AntiColl(str);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa7 	bl	8001b9e <MFRC522_AntiColl>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
    str[4] = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    if(_status == MI_OK)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <MFRC522_ReadCardSerial+0x24>
        return 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <MFRC522_ReadCardSerial+0x26>
    else
        return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <MX_SPI2_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cc2:	f002 fe3d 	bl	8004940 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f7ff fcdf 	bl	800168e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200021d0 	.word	0x200021d0
 8001cd8:	40003800 	.word	0x40003800

08001cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_SPI_MspInit+0x8c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d131      	bne.n	8001d60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_SPI_MspInit+0x90>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <HAL_SPI_MspInit+0x94>)
 8001d42:	f000 feeb 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_SPI_MspInit+0x94>)
 8001d5c:	f000 fede 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8001d7a:	f000 fb6f 	bl	800245c <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 10, 20000) != HAL_OK){
 8001d7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d82:	220a      	movs	r2, #10
 8001d84:	2178      	movs	r1, #120	; 0x78
 8001d86:	485b      	ldr	r0, [pc, #364]	; (8001ef4 <SSD1306_Init+0x180>)
 8001d88:	f001 fd2a 	bl	80037e0 <HAL_I2C_IsDeviceReady>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SSD1306_Init+0x22>
		return 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e0a9      	b.n	8001eea <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8001d96:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d9c:	e002      	b.n	8001da4 <SSD1306_Init+0x30>
		p--;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8001daa:	22ae      	movs	r2, #174	; 0xae
 8001dac:	2100      	movs	r1, #0
 8001dae:	2078      	movs	r0, #120	; 0x78
 8001db0:	f000 fbce 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001db4:	2220      	movs	r2, #32
 8001db6:	2100      	movs	r1, #0
 8001db8:	2078      	movs	r0, #120	; 0x78
 8001dba:	f000 fbc9 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2078      	movs	r0, #120	; 0x78
 8001dc4:	f000 fbc4 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001dc8:	22b0      	movs	r2, #176	; 0xb0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2078      	movs	r0, #120	; 0x78
 8001dce:	f000 fbbf 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001dd2:	22c8      	movs	r2, #200	; 0xc8
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2078      	movs	r0, #120	; 0x78
 8001dd8:	f000 fbba 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2078      	movs	r0, #120	; 0x78
 8001de2:	f000 fbb5 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001de6:	2210      	movs	r2, #16
 8001de8:	2100      	movs	r1, #0
 8001dea:	2078      	movs	r0, #120	; 0x78
 8001dec:	f000 fbb0 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	2100      	movs	r1, #0
 8001df4:	2078      	movs	r0, #120	; 0x78
 8001df6:	f000 fbab 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001dfa:	2281      	movs	r2, #129	; 0x81
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2078      	movs	r0, #120	; 0x78
 8001e00:	f000 fba6 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e04:	22ff      	movs	r2, #255	; 0xff
 8001e06:	2100      	movs	r1, #0
 8001e08:	2078      	movs	r0, #120	; 0x78
 8001e0a:	f000 fba1 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001e0e:	22a1      	movs	r2, #161	; 0xa1
 8001e10:	2100      	movs	r1, #0
 8001e12:	2078      	movs	r0, #120	; 0x78
 8001e14:	f000 fb9c 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001e18:	22a6      	movs	r2, #166	; 0xa6
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2078      	movs	r0, #120	; 0x78
 8001e1e:	f000 fb97 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001e22:	22a8      	movs	r2, #168	; 0xa8
 8001e24:	2100      	movs	r1, #0
 8001e26:	2078      	movs	r0, #120	; 0x78
 8001e28:	f000 fb92 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2078      	movs	r0, #120	; 0x78
 8001e32:	f000 fb8d 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001e36:	22a4      	movs	r2, #164	; 0xa4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2078      	movs	r0, #120	; 0x78
 8001e3c:	f000 fb88 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8001e40:	22d3      	movs	r2, #211	; 0xd3
 8001e42:	2100      	movs	r1, #0
 8001e44:	2078      	movs	r0, #120	; 0x78
 8001e46:	f000 fb83 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2078      	movs	r0, #120	; 0x78
 8001e50:	f000 fb7e 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001e54:	22d5      	movs	r2, #213	; 0xd5
 8001e56:	2100      	movs	r1, #0
 8001e58:	2078      	movs	r0, #120	; 0x78
 8001e5a:	f000 fb79 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001e5e:	22f0      	movs	r2, #240	; 0xf0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f000 fb74 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8001e68:	22d9      	movs	r2, #217	; 0xd9
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	; 0x78
 8001e6e:	f000 fb6f 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001e72:	2222      	movs	r2, #34	; 0x22
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f000 fb6a 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001e7c:	22da      	movs	r2, #218	; 0xda
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	; 0x78
 8001e82:	f000 fb65 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e86:	2212      	movs	r2, #18
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	; 0x78
 8001e8c:	f000 fb60 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001e90:	22db      	movs	r2, #219	; 0xdb
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	; 0x78
 8001e96:	f000 fb5b 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	; 0x78
 8001ea0:	f000 fb56 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001ea4:	228d      	movs	r2, #141	; 0x8d
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	; 0x78
 8001eaa:	f000 fb51 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001eae:	2214      	movs	r2, #20
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	; 0x78
 8001eb4:	f000 fb4c 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001eb8:	22af      	movs	r2, #175	; 0xaf
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	; 0x78
 8001ebe:	f000 fb47 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ec2:	222e      	movs	r2, #46	; 0x2e
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	; 0x78
 8001ec8:	f000 fb42 	bl	8002550 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 f843 	bl	8001f58 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001ed2:	f000 f813 	bl	8001efc <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <SSD1306_Init+0x184>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SSD1306_Init+0x184>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SSD1306_Init+0x184>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	715a      	strb	r2, [r3, #5]
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000b4 	.word	0x200000b4
 8001ef8:	20002628 	.word	0x20002628

08001efc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	e01d      	b.n	8001f44 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	3b50      	subs	r3, #80	; 0x50
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2100      	movs	r1, #0
 8001f12:	2078      	movs	r0, #120	; 0x78
 8001f14:	f000 fb1c 	bl	8002550 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2078      	movs	r0, #120	; 0x78
 8001f1e:	f000 fb17 	bl	8002550 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f22:	2210      	movs	r2, #16
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 fb12 	bl	8002550 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <SSD1306_UpdateScreen+0x58>)
 8001f32:	441a      	add	r2, r3
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	2078      	movs	r0, #120	; 0x78
 8001f3a:	f000 faa3 	bl	8002484 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	3301      	adds	r3, #1
 8001f42:	71fb      	strb	r3, [r7, #7]
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	d9de      	bls.n	8001f08 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20002228 	.word	0x20002228

08001f58 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <SSD1306_Fill+0x14>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <SSD1306_Fill+0x16>
 8001f6c:	23ff      	movs	r3, #255	; 0xff
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	4619      	mov	r1, r3
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <SSD1306_Fill+0x2c>)
 8001f76:	f007 fa1a 	bl	80093ae <memset>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20002228 	.word	0x20002228

08001f88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
 8001f92:	460b      	mov	r3, r1
 8001f94:	80bb      	strh	r3, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9e:	d848      	bhi.n	8002032 <SSD1306_DrawPixel+0xaa>
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	2b3f      	cmp	r3, #63	; 0x3f
 8001fa4:	d845      	bhi.n	8002032 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <SSD1306_DrawPixel+0xb4>)
 8001fa8:	791b      	ldrb	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11a      	bne.n	8001ff8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	08db      	lsrs	r3, r3, #3
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <SSD1306_DrawPixel+0xb8>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	88bb      	ldrh	r3, [r7, #4]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b259      	sxtb	r1, r3
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	4603      	mov	r3, r0
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <SSD1306_DrawPixel+0xb8>)
 8001ff4:	54d1      	strb	r1, [r2, r3]
 8001ff6:	e01d      	b.n	8002034 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	b298      	uxth	r0, r3
 8002000:	4603      	mov	r3, r0
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	4413      	add	r3, r2
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <SSD1306_DrawPixel+0xb8>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	b25a      	sxtb	r2, r3
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	b25b      	sxtb	r3, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	b25b      	sxtb	r3, r3
 800201e:	4013      	ands	r3, r2
 8002020:	b259      	sxtb	r1, r3
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	4603      	mov	r3, r0
 8002026:	01db      	lsls	r3, r3, #7
 8002028:	4413      	add	r3, r2
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <SSD1306_DrawPixel+0xb8>)
 800202e:	54d1      	strb	r1, [r2, r3]
 8002030:	e000      	b.n	8002034 <SSD1306_DrawPixel+0xac>
		return;
 8002032:	bf00      	nop
	}
}
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20002628 	.word	0x20002628
 8002040:	20002228 	.word	0x20002228

08002044 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	460a      	mov	r2, r1
 800204e:	80fb      	strh	r3, [r7, #6]
 8002050:	4613      	mov	r3, r2
 8002052:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8002054:	4a05      	ldr	r2, [pc, #20]	; (800206c <SSD1306_GotoXY+0x28>)
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <SSD1306_GotoXY+0x28>)
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	8053      	strh	r3, [r2, #2]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20002628 	.word	0x20002628

08002070 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <SSD1306_Putc+0xfc>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	2b7f      	cmp	r3, #127	; 0x7f
 800208e:	dc07      	bgt.n	80020a0 <SSD1306_Putc+0x30>
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <SSD1306_Putc+0xfc>)
 8002092:	885b      	ldrh	r3, [r3, #2]
 8002094:	461a      	mov	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	4413      	add	r3, r2
 800209c:	2b3f      	cmp	r3, #63	; 0x3f
 800209e:	dd01      	ble.n	80020a4 <SSD1306_Putc+0x34>
		return 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e05e      	b.n	8002162 <SSD1306_Putc+0xf2>
	}

	for(i=0; i<Font->FontHeight; i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e04b      	b.n	8002142 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	3b20      	subs	r3, #32
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	7849      	ldrb	r1, [r1, #1]
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	440b      	add	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e030      	b.n	8002130 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <SSD1306_Putc+0xfc>)
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	b298      	uxth	r0, r3
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <SSD1306_Putc+0xfc>)
 80020ec:	885a      	ldrh	r2, [r3, #2]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	79ba      	ldrb	r2, [r7, #6]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7ff ff45 	bl	8001f88 <SSD1306_DrawPixel>
 80020fe:	e014      	b.n	800212a <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <SSD1306_Putc+0xfc>)
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b298      	uxth	r0, r3
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <SSD1306_Putc+0xfc>)
 800210e:	885a      	ldrh	r2, [r3, #2]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b299      	uxth	r1, r3
 8002118:	79bb      	ldrb	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff ff2f 	bl	8001f88 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	3301      	adds	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4293      	cmp	r3, r2
 800213a:	d3c8      	bcc.n	80020ce <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	461a      	mov	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4293      	cmp	r3, r2
 800214c:	d3ad      	bcc.n	80020aa <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <SSD1306_Putc+0xfc>)
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <SSD1306_Putc+0xfc>)
 800215e:	801a      	strh	r2, [r3, #0]
	return ch;
 8002160:	79fb      	ldrb	r3, [r7, #7]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20002628 	.word	0x20002628

08002170 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	71fb      	strb	r3, [r7, #7]
	while(*str)
 800217e:	e012      	b.n	80021a6 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff71 	bl	8002070 <SSD1306_Putc>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d002      	beq.n	80021a0 <SSD1306_Puts+0x30>
			return *str;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	e008      	b.n	80021b2 <SSD1306_Puts+0x42>
		}
		str++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
	while(*str)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e8      	bne.n	8002180 <SSD1306_Puts+0x10>
	}
	return *str;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4604      	mov	r4, r0
 80021c2:	4608      	mov	r0, r1
 80021c4:	4611      	mov	r1, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4603      	mov	r3, r0
 80021ce:	80bb      	strh	r3, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b7f      	cmp	r3, #127	; 0x7f
 80021dc:	d901      	bls.n	80021e2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80021de:	237f      	movs	r3, #127	; 0x7f
 80021e0:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	2b7f      	cmp	r3, #127	; 0x7f
 80021e6:	d901      	bls.n	80021ec <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80021e8:	237f      	movs	r3, #127	; 0x7f
 80021ea:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	2b3f      	cmp	r3, #63	; 0x3f
 80021f0:	d901      	bls.n	80021f6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80021f2:	233f      	movs	r3, #63	; 0x3f
 80021f4:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 80021f6:	883b      	ldrh	r3, [r7, #0]
 80021f8:	2b3f      	cmp	r3, #63	; 0x3f
 80021fa:	d901      	bls.n	8002200 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80021fc:	233f      	movs	r3, #63	; 0x3f
 80021fe:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	429a      	cmp	r2, r3
 8002206:	d205      	bcs.n	8002214 <SSD1306_DrawLine+0x5a>
 8002208:	887a      	ldrh	r2, [r7, #2]
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	b29b      	uxth	r3, r3
 8002210:	b21b      	sxth	r3, r3
 8002212:	e004      	b.n	800221e <SSD1306_DrawLine+0x64>
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	b29b      	uxth	r3, r3
 800221c:	b21b      	sxth	r3, r3
 800221e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002220:	88ba      	ldrh	r2, [r7, #4]
 8002222:	883b      	ldrh	r3, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d205      	bcs.n	8002234 <SSD1306_DrawLine+0x7a>
 8002228:	883a      	ldrh	r2, [r7, #0]
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	b29b      	uxth	r3, r3
 8002230:	b21b      	sxth	r3, r3
 8002232:	e004      	b.n	800223e <SSD1306_DrawLine+0x84>
 8002234:	88ba      	ldrh	r2, [r7, #4]
 8002236:	883b      	ldrh	r3, [r7, #0]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	b21b      	sxth	r3, r3
 800223e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	429a      	cmp	r2, r3
 8002246:	d201      	bcs.n	800224c <SSD1306_DrawLine+0x92>
 8002248:	2301      	movs	r3, #1
 800224a:	e001      	b.n	8002250 <SSD1306_DrawLine+0x96>
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8002252:	88ba      	ldrh	r2, [r7, #4]
 8002254:	883b      	ldrh	r3, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d201      	bcs.n	800225e <SSD1306_DrawLine+0xa4>
 800225a:	2301      	movs	r3, #1
 800225c:	e001      	b.n	8002262 <SSD1306_DrawLine+0xa8>
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8002264:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002268:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800226c:	429a      	cmp	r2, r3
 800226e:	dd06      	ble.n	800227e <SSD1306_DrawLine+0xc4>
 8002270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002274:	0fda      	lsrs	r2, r3, #31
 8002276:	4413      	add	r3, r2
 8002278:	105b      	asrs	r3, r3, #1
 800227a:	b21b      	sxth	r3, r3
 800227c:	e006      	b.n	800228c <SSD1306_DrawLine+0xd2>
 800227e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002282:	0fda      	lsrs	r2, r3, #31
 8002284:	4413      	add	r3, r2
 8002286:	105b      	asrs	r3, r3, #1
 8002288:	425b      	negs	r3, r3
 800228a:	b21b      	sxth	r3, r3
 800228c:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 800228e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d129      	bne.n	80022ea <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 8002296:	883a      	ldrh	r2, [r7, #0]
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d205      	bcs.n	80022aa <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800229e:	883b      	ldrh	r3, [r7, #0]
 80022a0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d205      	bcs.n	80022be <SSD1306_DrawLine+0x104>
			tmp = x1;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80022ba:	893b      	ldrh	r3, [r7, #8]
 80022bc:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	82bb      	strh	r3, [r7, #20]
 80022c2:	e00c      	b.n	80022de <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80022c4:	8ab9      	ldrh	r1, [r7, #20]
 80022c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fe5b 	bl	8001f88 <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 80022d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	82bb      	strh	r3, [r7, #20]
 80022de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80022e2:	883b      	ldrh	r3, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dded      	ble.n	80022c4 <SSD1306_DrawLine+0x10a>
		}
		return;
 80022e8:	e05f      	b.n	80023aa <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 80022ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d129      	bne.n	8002346 <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 80022f2:	883a      	ldrh	r2, [r7, #0]
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d205      	bcs.n	8002306 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002302:	893b      	ldrh	r3, [r7, #8]
 8002304:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	429a      	cmp	r2, r3
 800230c:	d205      	bcs.n	800231a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002316:	893b      	ldrh	r3, [r7, #8]
 8002318:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	82bb      	strh	r3, [r7, #20]
 800231e:	e00c      	b.n	800233a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002320:	8abb      	ldrh	r3, [r7, #20]
 8002322:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002326:	88b9      	ldrh	r1, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fe2d 	bl	8001f88 <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 800232e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002332:	b29b      	uxth	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	82bb      	strh	r3, [r7, #20]
 800233a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	429a      	cmp	r2, r3
 8002342:	dded      	ble.n	8002320 <SSD1306_DrawLine+0x166>
		}
		return;
 8002344:	e031      	b.n	80023aa <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8002346:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800234a:	88b9      	ldrh	r1, [r7, #4]
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fe1a 	bl	8001f88 <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	429a      	cmp	r2, r3
 800235a:	d103      	bne.n	8002364 <SSD1306_DrawLine+0x1aa>
 800235c:	88ba      	ldrh	r2, [r7, #4]
 800235e:	883b      	ldrh	r3, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d021      	beq.n	80023a8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8002364:	8afb      	ldrh	r3, [r7, #22]
 8002366:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8002368:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800236c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002370:	425b      	negs	r3, r3
 8002372:	429a      	cmp	r2, r3
 8002374:	dd08      	ble.n	8002388 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002376:	8afa      	ldrh	r2, [r7, #22]
 8002378:	8a3b      	ldrh	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	b29b      	uxth	r3, r3
 800237e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002380:	89fa      	ldrh	r2, [r7, #14]
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	4413      	add	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8002388:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800238c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	dad8      	bge.n	8002346 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002394:	8afa      	ldrh	r2, [r7, #22]
 8002396:	8a7b      	ldrh	r3, [r7, #18]
 8002398:	4413      	add	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800239e:	89ba      	ldrh	r2, [r7, #12]
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80023a6:	e7ce      	b.n	8002346 <SSD1306_DrawLine+0x18c>
			break;
 80023a8:	bf00      	nop
		}
	}
}
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c);
	SSD1306_DrawLine(x, y, x, y + h, c);
	SSD1306_DrawLine(x + w, y, x + w, y + h, c);
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	80fb      	strh	r3, [r7, #6]
 80023c2:	4603      	mov	r3, r0
 80023c4:	80bb      	strh	r3, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]
 80023ca:	4613      	mov	r3, r2
 80023cc:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b7f      	cmp	r3, #127	; 0x7f
 80023d2:	d836      	bhi.n	8002442 <SSD1306_DrawFilledRectangle+0x92>
 80023d4:	88bb      	ldrh	r3, [r7, #4]
 80023d6:	2b3f      	cmp	r3, #63	; 0x3f
 80023d8:	d833      	bhi.n	8002442 <SSD1306_DrawFilledRectangle+0x92>
		return;
	}
	if((x + w) >= SSD1306_WIDTH){
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4413      	add	r3, r2
 80023e0:	2b7f      	cmp	r3, #127	; 0x7f
 80023e2:	dd03      	ble.n	80023ec <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023ea:	807b      	strh	r3, [r7, #2]
	}
	if((y + h) >= SSD1306_HEIGHT){
 80023ec:	88ba      	ldrh	r2, [r7, #4]
 80023ee:	883b      	ldrh	r3, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	2b3f      	cmp	r3, #63	; 0x3f
 80023f4:	dd03      	ble.n	80023fe <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80023fc:	803b      	strh	r3, [r7, #0]
	}
	for(i=0; i<=h; i++){
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e018      	b.n	8002436 <SSD1306_DrawFilledRectangle+0x86>
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	b29a      	uxth	r2, r3
 8002408:	88bb      	ldrh	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	b299      	uxth	r1, r3
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	4413      	add	r3, r2
 8002414:	b29c      	uxth	r4, r3
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	b29a      	uxth	r2, r3
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	b29a      	uxth	r2, r3
 8002420:	88f8      	ldrh	r0, [r7, #6]
 8002422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	4622      	mov	r2, r4
 800242c:	f7ff fec5 	bl	80021ba <SSD1306_DrawLine>
	for(i=0; i<=h; i++){
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	b29b      	uxth	r3, r3
 800243a:	883a      	ldrh	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d2e1      	bcs.n	8002404 <SSD1306_DrawFilledRectangle+0x54>
 8002440:	e000      	b.n	8002444 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002442:	bf00      	nop
	}
}
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}

0800244a <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff fd82 	bl	8001f58 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002454:	f7ff fd52 	bl	8001efc <SSD1306_UpdateScreen>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <SSD1306_I2C_Init+0x24>)
 8002464:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002466:	e002      	b.n	800246e <SSD1306_I2C_Init+0x12>
		p--;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <SSD1306_I2C_Init+0xc>
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	0003d090 	.word	0x0003d090

08002484 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b0c7      	sub	sp, #284	; 0x11c
 8002488:	af02      	add	r7, sp, #8
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002492:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002496:	600a      	str	r2, [r1, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800249e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024a2:	4622      	mov	r2, r4
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024aa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80024ae:	4602      	mov	r2, r0
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024ba:	460a      	mov	r2, r1
 80024bc:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80024be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ca:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024d8:	e015      	b.n	8002506 <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 80024da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	441a      	add	r2, r3
 80024ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ee:	3301      	adds	r3, #1
 80024f0:	7811      	ldrb	r1, [r2, #0]
 80024f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024f6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024fa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80024fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002500:	3301      	adds	r3, #1
 8002502:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002506:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800250a:	b29b      	uxth	r3, r3
 800250c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002510:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d8df      	bhi.n	80024da <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800251a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800251e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b299      	uxth	r1, r3
 8002526:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800252a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b29b      	uxth	r3, r3
 8002534:	f107 020c 	add.w	r2, r7, #12
 8002538:	200a      	movs	r0, #10
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <SSD1306_I2C_WriteMulti+0xc8>)
 800253e:	f000 fde5 	bl	800310c <HAL_I2C_Master_Transmit>
}
 8002542:	bf00      	nop
 8002544:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}
 800254c:	200000b4 	.word	0x200000b4

08002550 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	460b      	mov	r3, r1
 800255c:	71bb      	strb	r3, [r7, #6]
 800255e:	4613      	mov	r3, r2
 8002560:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002566:	797b      	ldrb	r3, [r7, #5]
 8002568:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	b299      	uxth	r1, r3
 800256e:	f107 020c 	add.w	r2, r7, #12
 8002572:	230a      	movs	r3, #10
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2302      	movs	r3, #2
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <SSD1306_I2C_Write+0x38>)
 800257a:	f000 fdc7 	bl	800310c <HAL_I2C_Master_Transmit>
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200000b4 	.word	0x200000b4

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_MspInit+0x5c>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_MspInit+0x5c>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6193      	str	r3, [r2, #24]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_MspInit+0x5c>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_MspInit+0x5c>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_MspInit+0x5c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_MspInit+0x5c>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_MspInit+0x60>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_MspInit+0x60>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010000 	.word	0x40010000

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <NMI_Handler+0x4>

080025f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler+0x4>

08002602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler+0x4>

0800260e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <SysTick_Handler+0x34>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <SysTick_Handler+0x18>
		Timer1--;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <SysTick_Handler+0x34>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <SysTick_Handler+0x34>)
 800264a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <SysTick_Handler+0x38>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <SysTick_Handler+0x2c>
		Timer2--;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Handler+0x38>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <SysTick_Handler+0x38>)
 800265e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002660:	f000 f938 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200000ac 	.word	0x200000ac
 800266c:	200000ae 	.word	0x200000ae

08002670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return 1;
 8002674:	2301      	movs	r3, #1
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <_kill>:

int _kill(int pid, int sig)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002688:	f006 fee0 	bl	800944c <__errno>
 800268c:	4603      	mov	r3, r0
 800268e:	2216      	movs	r2, #22
 8002690:	601a      	str	r2, [r3, #0]
  return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_exit>:

void _exit (int status)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a6:	f04f 31ff 	mov.w	r1, #4294967295
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffe7 	bl	800267e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b0:	e7fe      	b.n	80026b0 <_exit+0x12>

080026b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e00a      	b.n	80026da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026c4:	f3af 8000 	nop.w
 80026c8:	4601      	mov	r1, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	60ba      	str	r2, [r7, #8]
 80026d0:	b2ca      	uxtb	r2, r1
 80026d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	dbf0      	blt.n	80026c4 <_read+0x12>
  }

  return len;
 80026e2:	687b      	ldr	r3, [r7, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e009      	b.n	8002712 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	60ba      	str	r2, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3301      	adds	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	dbf1      	blt.n	80026fe <_write+0x12>
  }
  return len;
 800271a:	687b      	ldr	r3, [r7, #4]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_close>:

int _close(int file)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274a:	605a      	str	r2, [r3, #4]
  return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <_isatty>:

int _isatty(int file)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002760:	2301      	movs	r3, #1
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f006 fe4a 	bl	800944c <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20005000 	.word	0x20005000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	20002630 	.word	0x20002630
 80027ec:	200029b8 	.word	0x200029b8

080027f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff fff8 	bl	80027f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002802:	490c      	ldr	r1, [pc, #48]	; (8002834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002818:	4c09      	ldr	r4, [pc, #36]	; (8002840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f006 fe17 	bl	8009458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282a:	f7fe fe31 	bl	8001490 <main>
  bx lr
 800282e:	4770      	bx	lr
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002838:	0800c12c 	.word	0x0800c12c
  ldr r2, =_sbss
 800283c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002840:	200029b8 	.word	0x200029b8

08002844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_2_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_Init+0x28>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_Init+0x28>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f92b 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	200f      	movs	r0, #15
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff fe92 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f935 	bl	8002b02 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f000 f90b 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000014 	.word	0x20000014
 80028cc:	2000001c 	.word	0x2000001c
 80028d0:	20000018 	.word	0x20000018

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_IncTick+0x1c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_IncTick+0x20>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <HAL_IncTick+0x20>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	2000001c 	.word	0x2000001c
 80028f4:	20002634 	.word	0x20002634

080028f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <HAL_GetTick+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20002634 	.word	0x20002634

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fff0 	bl	80028f8 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d005      	beq.n	8002932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_Delay+0x44>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002932:	bf00      	nop
 8002934:	f7ff ffe0 	bl	80028f8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d8f7      	bhi.n	8002934 <HAL_Delay+0x28>
  {
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000001c 	.word	0x2000001c

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff90 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff49 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff5e 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff90 	bl	8002a0c <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5f 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffb0 	bl	8002a70 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b08b      	sub	sp, #44	; 0x2c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2e:	e169      	b.n	8002e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b30:	2201      	movs	r2, #1
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8158 	bne.w	8002dfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a9a      	ldr	r2, [pc, #616]	; (8002dbc <HAL_GPIO_Init+0x2a0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d05e      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b58:	4a98      	ldr	r2, [pc, #608]	; (8002dbc <HAL_GPIO_Init+0x2a0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d875      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b5e:	4a98      	ldr	r2, [pc, #608]	; (8002dc0 <HAL_GPIO_Init+0x2a4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d058      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b64:	4a96      	ldr	r2, [pc, #600]	; (8002dc0 <HAL_GPIO_Init+0x2a4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d86f      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b6a:	4a96      	ldr	r2, [pc, #600]	; (8002dc4 <HAL_GPIO_Init+0x2a8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d052      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b70:	4a94      	ldr	r2, [pc, #592]	; (8002dc4 <HAL_GPIO_Init+0x2a8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d869      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b76:	4a94      	ldr	r2, [pc, #592]	; (8002dc8 <HAL_GPIO_Init+0x2ac>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d04c      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b7c:	4a92      	ldr	r2, [pc, #584]	; (8002dc8 <HAL_GPIO_Init+0x2ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d863      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b82:	4a92      	ldr	r2, [pc, #584]	; (8002dcc <HAL_GPIO_Init+0x2b0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d046      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b88:	4a90      	ldr	r2, [pc, #576]	; (8002dcc <HAL_GPIO_Init+0x2b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d85d      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d82a      	bhi.n	8002be8 <HAL_GPIO_Init+0xcc>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d859      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b96:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <HAL_GPIO_Init+0x80>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002c17 	.word	0x08002c17
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002c03 	.word	0x08002c03
 8002ba8:	08002c45 	.word	0x08002c45
 8002bac:	08002c4b 	.word	0x08002c4b
 8002bb0:	08002c4b 	.word	0x08002c4b
 8002bb4:	08002c4b 	.word	0x08002c4b
 8002bb8:	08002c4b 	.word	0x08002c4b
 8002bbc:	08002c4b 	.word	0x08002c4b
 8002bc0:	08002c4b 	.word	0x08002c4b
 8002bc4:	08002c4b 	.word	0x08002c4b
 8002bc8:	08002c4b 	.word	0x08002c4b
 8002bcc:	08002c4b 	.word	0x08002c4b
 8002bd0:	08002c4b 	.word	0x08002c4b
 8002bd4:	08002c4b 	.word	0x08002c4b
 8002bd8:	08002c4b 	.word	0x08002c4b
 8002bdc:	08002c4b 	.word	0x08002c4b
 8002be0:	08002bf9 	.word	0x08002bf9
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	4a79      	ldr	r2, [pc, #484]	; (8002dd0 <HAL_GPIO_Init+0x2b4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bee:	e02c      	b.n	8002c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e029      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e024      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	3308      	adds	r3, #8
 8002c08:	623b      	str	r3, [r7, #32]
          break;
 8002c0a:	e01f      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	330c      	adds	r3, #12
 8002c12:	623b      	str	r3, [r7, #32]
          break;
 8002c14:	e01a      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	623b      	str	r3, [r7, #32]
          break;
 8002c22:	e013      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	611a      	str	r2, [r3, #16]
          break;
 8002c36:	e009      	b.n	8002c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	615a      	str	r2, [r3, #20]
          break;
 8002c42:	e003      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
          break;
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          break;
 8002c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d801      	bhi.n	8002c56 <HAL_GPIO_Init+0x13a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_Init+0x13e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2bff      	cmp	r3, #255	; 0xff
 8002c60:	d802      	bhi.n	8002c68 <HAL_GPIO_Init+0x14c>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	e002      	b.n	8002c6e <HAL_GPIO_Init+0x152>
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	3b08      	subs	r3, #8
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	210f      	movs	r1, #15
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80b1 	beq.w	8002dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cb4:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_GPIO_Init+0x2bc>)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a40      	ldr	r2, [pc, #256]	; (8002ddc <HAL_GPIO_Init+0x2c0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x1ec>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_GPIO_Init+0x2c4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1e8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <HAL_GPIO_Init+0x2c8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1e4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	; (8002de8 <HAL_GPIO_Init+0x2cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1e0>
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e006      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e004      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e002      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	f002 0203 	and.w	r2, r2, #3
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	4093      	lsls	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d1a:	492f      	ldr	r1, [pc, #188]	; (8002dd8 <HAL_GPIO_Init+0x2bc>)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	492c      	ldr	r1, [pc, #176]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
 8002d40:	e006      	b.n	8002d50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	4928      	ldr	r1, [pc, #160]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4922      	ldr	r1, [pc, #136]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	491e      	ldr	r1, [pc, #120]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4918      	ldr	r1, [pc, #96]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4914      	ldr	r1, [pc, #80]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d021      	beq.n	8002df0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e021      	b.n	8002dfe <HAL_GPIO_Init+0x2e2>
 8002dba:	bf00      	nop
 8002dbc:	10320000 	.word	0x10320000
 8002dc0:	10310000 	.word	0x10310000
 8002dc4:	10220000 	.word	0x10220000
 8002dc8:	10210000 	.word	0x10210000
 8002dcc:	10120000 	.word	0x10120000
 8002dd0:	10110000 	.word	0x10110000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	40010c00 	.word	0x40010c00
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	4909      	ldr	r1, [pc, #36]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f47f ae8e 	bne.w	8002b30 <HAL_GPIO_Init+0x14>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	372c      	adds	r7, #44	; 0x2c
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40010400 	.word	0x40010400

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e62:	787b      	ldrb	r3, [r7, #1]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e6e:	e003      	b.n	8002e78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12b      	b.n	80030ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe f86a 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f001 fcf8 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a81      	ldr	r2, [pc, #516]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d807      	bhi.n	8002f08 <HAL_I2C_Init+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_I2C_Init+0x278>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e006      	b.n	8002f16 <HAL_I2C_Init+0x92>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a7d      	ldr	r2, [pc, #500]	; (8003100 <HAL_I2C_Init+0x27c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0e7      	b.n	80030ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a78      	ldr	r2, [pc, #480]	; (8003104 <HAL_I2C_Init+0x280>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d802      	bhi.n	8002f58 <HAL_I2C_Init+0xd4>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	e009      	b.n	8002f6c <HAL_I2C_Init+0xe8>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a69      	ldr	r2, [pc, #420]	; (8003108 <HAL_I2C_Init+0x284>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	495c      	ldr	r1, [pc, #368]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d819      	bhi.n	8002fc0 <HAL_I2C_Init+0x13c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e59      	subs	r1, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_I2C_Init+0x138>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	e051      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e04f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HAL_I2C_Init+0x168>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e012      	b.n	8003012 <HAL_I2C_Init+0x18e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Init+0x196>
 8003016:	2301      	movs	r3, #1
 8003018:	e022      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_I2C_Init+0x1bc>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e58      	subs	r0, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	fbb0 f3f3 	udiv	r3, r0, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303e:	e00f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6809      	ldr	r1, [r1, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800308e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6911      	ldr	r1, [r2, #16]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	000186a0 	.word	0x000186a0
 80030fc:	001e847f 	.word	0x001e847f
 8003100:	003d08ff 	.word	0x003d08ff
 8003104:	431bde83 	.word	0x431bde83
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff fbea 	bl	80028f8 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	f040 80e0 	bne.w	80032f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2319      	movs	r3, #25
 800313a:	2201      	movs	r2, #1
 800313c:	4970      	ldr	r1, [pc, #448]	; (8003300 <HAL_I2C_Master_Transmit+0x1f4>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fdcc 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	e0d3      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2C_Master_Transmit+0x50>
 8003158:	2302      	movs	r3, #2
 800315a:	e0cc      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d007      	beq.n	8003182 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2221      	movs	r2, #33	; 0x21
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2210      	movs	r2, #16
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_I2C_Master_Transmit+0x1f8>)
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fc36 	bl	8003a3c <I2C_MasterRequestWrite>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e08d      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031f0:	e066      	b.n	80032c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fe8a 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d107      	bne.n	800321a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06b      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_I2C_Master_Transmit+0x188>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	6a39      	ldr	r1, [r7, #32]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fe81 	bl	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01a      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d194      	bne.n	80031f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000

08003308 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
 8003318:	4613      	mov	r3, r2
 800331a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff faea 	bl	80028f8 <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	f040 824b 	bne.w	80037ca <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	497f      	ldr	r1, [pc, #508]	; (800353c <HAL_I2C_Master_Receive+0x234>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fccc 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	e23e      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_I2C_Master_Receive+0x54>
 8003358:	2302      	movs	r3, #2
 800335a:	e237      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d007      	beq.n	8003382 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2222      	movs	r2, #34	; 0x22
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2210      	movs	r2, #16
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	893a      	ldrh	r2, [r7, #8]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a5f      	ldr	r2, [pc, #380]	; (8003540 <HAL_I2C_Master_Receive+0x238>)
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fbb8 	bl	8003b40 <I2C_MasterRequestRead>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1f8      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d113      	bne.n	800340a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e1cc      	b.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11e      	bne.n	8003450 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003422:	b672      	cpsid	i
}
 8003424:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800344c:	b662      	cpsie	i
}
 800344e:	e035      	b.n	80034bc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	2b02      	cmp	r3, #2
 8003456:	d11e      	bne.n	8003496 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003492:	b662      	cpsie	i
}
 8003494:	e012      	b.n	80034bc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034bc:	e172      	b.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	f200 811f 	bhi.w	8003706 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d123      	bne.n	8003518 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fdab 	bl	8004030 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e173      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003516:	e145      	b.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	2b02      	cmp	r3, #2
 800351e:	d152      	bne.n	80035c6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	4906      	ldr	r1, [pc, #24]	; (8003544 <HAL_I2C_Master_Receive+0x23c>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fbd6 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e148      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
 800353a:	bf00      	nop
 800353c:	00100002 	.word	0x00100002
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
}
 800354a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800358e:	b662      	cpsie	i
}
 8003590:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c4:	e0ee      	b.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	2200      	movs	r2, #0
 80035ce:	4981      	ldr	r1, [pc, #516]	; (80037d4 <HAL_I2C_Master_Receive+0x4cc>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fb83 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0f5      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f0:	b672      	cpsid	i
}
 80035f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_I2C_Master_Receive+0x4d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <HAL_I2C_Master_Receive+0x4d4>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0a1a      	lsrs	r2, r3, #8
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00da      	lsls	r2, r3, #3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	3b01      	subs	r3, #1
 8003644:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800366e:	b662      	cpsie	i
}
 8003670:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0a6      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d1d9      	bne.n	8003640 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ce:	b662      	cpsie	i
}
 80036d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003704:	e04e      	b.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fc90 	bl	8004030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e058      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d124      	bne.n	80037a4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f47f ae88 	bne.w	80034be <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00010004 	.word	0x00010004
 80037d8:	20000014 	.word	0x20000014
 80037dc:	14f8b589 	.word	0x14f8b589

080037e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	460b      	mov	r3, r1
 80037ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037f0:	f7ff f882 	bl	80028f8 <HAL_GetTick>
 80037f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b20      	cmp	r3, #32
 8003804:	f040 8111 	bne.w	8003a2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2319      	movs	r3, #25
 800380e:	2201      	movs	r2, #1
 8003810:	4988      	ldr	r1, [pc, #544]	; (8003a34 <HAL_I2C_IsDeviceReady+0x254>)
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fa62 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	e104      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_I2C_IsDeviceReady+0x50>
 800382c:	2302      	movs	r3, #2
 800382e:	e0fd      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d007      	beq.n	8003856 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2224      	movs	r2, #36	; 0x24
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a70      	ldr	r2, [pc, #448]	; (8003a38 <HAL_I2C_IsDeviceReady+0x258>)
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003888:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2200      	movs	r2, #0
 8003892:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa20 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b0:	d103      	bne.n	80038ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0b6      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038ce:	f7ff f813 	bl	80028f8 <HAL_GetTick>
 80038d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003902:	e025      	b.n	8003950 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003904:	f7fe fff8 	bl	80028f8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <HAL_I2C_IsDeviceReady+0x13a>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22a0      	movs	r2, #160	; 0xa0
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2ba0      	cmp	r3, #160	; 0xa0
 800395a:	d005      	beq.n	8003968 <HAL_I2C_IsDeviceReady+0x188>
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_I2C_IsDeviceReady+0x188>
 8003962:	7dbb      	ldrb	r3, [r7, #22]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0cd      	beq.n	8003904 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d129      	bne.n	80039d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2319      	movs	r3, #25
 80039aa:	2201      	movs	r2, #1
 80039ac:	4921      	ldr	r1, [pc, #132]	; (8003a34 <HAL_I2C_IsDeviceReady+0x254>)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f994 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e036      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e02c      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2319      	movs	r3, #25
 80039f2:	2201      	movs	r2, #1
 80039f4:	490f      	ldr	r1, [pc, #60]	; (8003a34 <HAL_I2C_IsDeviceReady+0x254>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f970 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e012      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f4ff af32 	bcc.w	800387a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	00100002 	.word	0x00100002
 8003a38:	ffff0000 	.word	0xffff0000

08003a3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d006      	beq.n	8003a66 <I2C_MasterRequestWrite+0x2a>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d003      	beq.n	8003a66 <I2C_MasterRequestWrite+0x2a>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a64:	d108      	bne.n	8003a78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e00b      	b.n	8003a90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	2b12      	cmp	r3, #18
 8003a7e:	d107      	bne.n	8003a90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f91d 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d103      	bne.n	8003ac0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e035      	b.n	8003b30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003acc:	d108      	bne.n	8003ae0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ace:	897b      	ldrh	r3, [r7, #10]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	e01b      	b.n	8003b18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ae0:	897b      	ldrh	r3, [r7, #10]
 8003ae2:	11db      	asrs	r3, r3, #7
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f063 030f 	orn	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	490e      	ldr	r1, [pc, #56]	; (8003b38 <I2C_MasterRequestWrite+0xfc>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f966 	bl	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e010      	b.n	8003b30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <I2C_MasterRequestWrite+0x100>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f956 	bl	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	00010008 	.word	0x00010008
 8003b3c:	00010002 	.word	0x00010002

08003b40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d006      	beq.n	8003b7a <I2C_MasterRequestRead+0x3a>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d003      	beq.n	8003b7a <I2C_MasterRequestRead+0x3a>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b78:	d108      	bne.n	8003b8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00b      	b.n	8003ba4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	2b11      	cmp	r3, #17
 8003b92:	d107      	bne.n	8003ba4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f893 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d103      	bne.n	8003bd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e079      	b.n	8003ccc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	e05f      	b.n	8003cb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	11db      	asrs	r3, r3, #7
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 030f 	orn	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4930      	ldr	r1, [pc, #192]	; (8003cd4 <I2C_MasterRequestRead+0x194>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8dc 	bl	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e054      	b.n	8003ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <I2C_MasterRequestRead+0x198>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f8cc 	bl	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e044      	b.n	8003ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f831 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d103      	bne.n	8003c98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e017      	b.n	8003ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c9c:	897b      	ldrh	r3, [r7, #10]
 8003c9e:	11db      	asrs	r3, r3, #7
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 0306 	and.w	r3, r3, #6
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f063 030e 	orn	r3, r3, #14
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4907      	ldr	r1, [pc, #28]	; (8003cd8 <I2C_MasterRequestRead+0x198>)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f888 	bl	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	00010008 	.word	0x00010008
 8003cd8:	00010002 	.word	0x00010002

08003cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cec:	e048      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d044      	beq.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fe fdff 	bl	80028f8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d139      	bne.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10d      	bne.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	e00c      	b.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d116      	bne.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e023      	b.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10d      	bne.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	e00c      	b.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d093      	beq.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dde:	e071      	b.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dee:	d123      	bne.n	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e067      	b.n	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d041      	beq.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e40:	f7fe fd5a 	bl	80028f8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d136      	bne.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10c      	bne.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	2300      	moveq	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	e00b      	b.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	43da      	mvns	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e021      	b.n	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10c      	bne.n	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e00b      	b.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f af6d 	bne.w	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1c:	e034      	b.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f8e3 	bl	80040ea <I2C_IsAcknowledgeFailed>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e034      	b.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d028      	beq.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fe fcdf 	bl	80028f8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11d      	bne.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d016      	beq.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e007      	b.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d1c3      	bne.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fac:	e034      	b.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f89b 	bl	80040ea <I2C_IsAcknowledgeFailed>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e034      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d028      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fe fc97 	bl	80028f8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11d      	bne.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d016      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e007      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d1c3      	bne.n	8003fae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800403c:	e049      	b.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d119      	bne.n	8004080 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e030      	b.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004080:	f7fe fc3a 	bl	80028f8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11d      	bne.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d016      	beq.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e007      	b.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d1ae      	bne.n	800403e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d11b      	bne.n	800413a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
	...

08004148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e272      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	4b92      	ldr	r3, [pc, #584]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b04      	cmp	r3, #4
 8004172:	d00c      	beq.n	800418e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004174:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d112      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5e>
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d10b      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418e:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d06c      	beq.n	8004274 <HAL_RCC_OscConfig+0x12c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d168      	bne.n	8004274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e24c      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x76>
 80041b0:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7f      	ldr	r2, [pc, #508]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e02e      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7a      	ldr	r2, [pc, #488]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a77      	ldr	r2, [pc, #476]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0xbc>
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a71      	ldr	r2, [pc, #452]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 8004204:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6a      	ldr	r2, [pc, #424]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fb68 	bl	80028f8 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe fb64 	bl	80028f8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e200      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xe4>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fe fb54 	bl	80028f8 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe fb50 	bl	80028f8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1ec      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x10c>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x18c>
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x176>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1c0      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4939      	ldr	r1, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fb09 	bl	80028f8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fe fb05 	bl	80028f8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1a1      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4927      	ldr	r1, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fae8 	bl	80028f8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432c:	f7fe fae4 	bl	80028f8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e180      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03a      	beq.n	80043cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d019      	beq.n	8004392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004364:	f7fe fac8 	bl	80028f8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800436c:	f7fe fac4 	bl	80028f8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e160      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800438a:	2001      	movs	r0, #1
 800438c:	f000 faba 	bl	8004904 <RCC_Delay>
 8004390:	e01c      	b.n	80043cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe faae 	bl	80028f8 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439e:	e00f      	b.n	80043c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe faaa 	bl	80028f8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d908      	bls.n	80043c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e146      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	42420000 	.word	0x42420000
 80043bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b92      	ldr	r3, [pc, #584]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e9      	bne.n	80043a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a6 	beq.w	8004526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b8b      	ldr	r3, [pc, #556]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4a87      	ldr	r2, [pc, #540]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f4:	61d3      	str	r3, [r2, #28]
 80043f6:	4b85      	ldr	r3, [pc, #532]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b82      	ldr	r3, [pc, #520]	; (8004610 <HAL_RCC_OscConfig+0x4c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d118      	bne.n	8004444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004412:	4b7f      	ldr	r3, [pc, #508]	; (8004610 <HAL_RCC_OscConfig+0x4c8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7e      	ldr	r2, [pc, #504]	; (8004610 <HAL_RCC_OscConfig+0x4c8>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441e:	f7fe fa6b 	bl	80028f8 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fe fa67 	bl	80028f8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e103      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	4b75      	ldr	r3, [pc, #468]	; (8004610 <HAL_RCC_OscConfig+0x4c8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <HAL_RCC_OscConfig+0x312>
 800444c:	4b6f      	ldr	r3, [pc, #444]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4a6e      	ldr	r2, [pc, #440]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6213      	str	r3, [r2, #32]
 8004458:	e02d      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x334>
 8004462:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4a69      	ldr	r2, [pc, #420]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6213      	str	r3, [r2, #32]
 800446e:	4b67      	ldr	r3, [pc, #412]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a66      	ldr	r2, [pc, #408]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6213      	str	r3, [r2, #32]
 800447a:	e01c      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x356>
 8004484:	4b61      	ldr	r3, [pc, #388]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4a60      	ldr	r2, [pc, #384]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	6213      	str	r3, [r2, #32]
 8004490:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4a5d      	ldr	r2, [pc, #372]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6213      	str	r3, [r2, #32]
 800449c:	e00b      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800449e:	4b5b      	ldr	r3, [pc, #364]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a5a      	ldr	r2, [pc, #360]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	4b58      	ldr	r3, [pc, #352]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a57      	ldr	r2, [pc, #348]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fe fa1b 	bl	80028f8 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fa17 	bl	80028f8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e0b1      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044dc:	4b4b      	ldr	r3, [pc, #300]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RCC_OscConfig+0x37e>
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fa05 	bl	80028f8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe fa01 	bl	80028f8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e09b      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ee      	bne.n	80044f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451a:	4b3c      	ldr	r3, [pc, #240]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4a3b      	ldr	r2, [pc, #236]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8087 	beq.w	800463e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d061      	beq.n	8004600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d146      	bne.n	80045d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	4b33      	ldr	r3, [pc, #204]	; (8004614 <HAL_RCC_OscConfig+0x4cc>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fe f9d5 	bl	80028f8 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004552:	f7fe f9d1 	bl	80028f8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e06d      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d108      	bne.n	800458c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4921      	ldr	r1, [pc, #132]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a19      	ldr	r1, [r3, #32]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	430b      	orrs	r3, r1
 800459e:	491b      	ldr	r1, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x4cc>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe f9a5 	bl	80028f8 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fe f9a1 	bl	80028f8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e03d      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x46a>
 80045d0:	e035      	b.n	800463e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCC_OscConfig+0x4cc>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fe f98e 	bl	80028f8 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe f98a 	bl	80028f8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e026      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x498>
 80045fe:	e01e      	b.n	800463e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e019      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
 8004614:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_OscConfig+0x500>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	429a      	cmp	r2, r3
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0d0      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b67      	ldr	r3, [pc, #412]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4965      	ldr	r1, [pc, #404]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a58      	ldr	r2, [pc, #352]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a52      	ldr	r2, [pc, #328]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d040      	beq.n	800476c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e073      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4936      	ldr	r1, [pc, #216]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800473c:	f7fe f8dc 	bl	80028f8 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fe f8d8 	bl	80028f8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e053      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b27      	ldr	r3, [pc, #156]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d210      	bcs.n	800479c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 0207 	bic.w	r2, r3, #7
 8004782:	4922      	ldr	r1, [pc, #136]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x1cc>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1d0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe f83a 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40022000 	.word	0x40022000
 8004810:	40021000 	.word	0x40021000
 8004814:	0800bac8 	.word	0x0800bac8
 8004818:	20000014 	.word	0x20000014
 800481c:	20000018 	.word	0x20000018

08004820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b04      	cmp	r3, #4
 8004848:	d002      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x30>
 800484a:	2b08      	cmp	r3, #8
 800484c:	d003      	beq.n	8004856 <HAL_RCC_GetSysClockFreq+0x36>
 800484e:	e027      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004852:	613b      	str	r3, [r7, #16]
      break;
 8004854:	e027      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0c9b      	lsrs	r3, r3, #18
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004860:	5cd3      	ldrb	r3, [r2, r3]
 8004862:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d010      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	0c5b      	lsrs	r3, r3, #17
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004882:	fb03 f202 	mul.w	r2, r3, r2
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e004      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	613b      	str	r3, [r7, #16]
      break;
 800489e:	e002      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048a2:	613b      	str	r3, [r7, #16]
      break;
 80048a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a6:	693b      	ldr	r3, [r7, #16]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	007a1200 	.word	0x007a1200
 80048bc:	0800bae0 	.word	0x0800bae0
 80048c0:	0800baf0 	.word	0x0800baf0
 80048c4:	003d0900 	.word	0x003d0900

080048c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	20000014 	.word	0x20000014

080048dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e0:	f7ff fff2 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000
 8004900:	0800bad8 	.word	0x0800bad8

08004904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <RCC_Delay+0x34>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <RCC_Delay+0x38>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	0a5b      	lsrs	r3, r3, #9
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004920:	bf00      	nop
  }
  while (Delay --);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	60fa      	str	r2, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f9      	bne.n	8004920 <RCC_Delay+0x1c>
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000014 	.word	0x20000014
 800493c:	10624dd3 	.word	0x10624dd3

08004940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e076      	b.n	8004a40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d108      	bne.n	800496c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004962:	d009      	beq.n	8004978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	61da      	str	r2, [r3, #28]
 800496a:	e005      	b.n	8004978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd f9a2 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	0c1a      	lsrs	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f002 0204 	and.w	r2, r2, #4
 8004a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_SPI_Transmit+0x22>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e12d      	b.n	8004cc6 <HAL_SPI_Transmit+0x27e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a72:	f7fd ff41 	bl	80028f8 <HAL_GetTick>
 8004a76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d002      	beq.n	8004a8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8c:	e116      	b.n	8004cbc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_SPI_Transmit+0x52>
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a9e:	e10d      	b.n	8004cbc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae6:	d10f      	bne.n	8004b08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d007      	beq.n	8004b26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d14f      	bne.n	8004bd0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Transmit+0xf6>
 8004b38:	8afb      	ldrh	r3, [r7, #22]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d142      	bne.n	8004bc4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b62:	e02f      	b.n	8004bc4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d112      	bne.n	8004b98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b96:	e015      	b.n	8004bc4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b98:	f7fd feae 	bl	80028f8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d803      	bhi.n	8004bb0 <HAL_SPI_Transmit+0x168>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d102      	bne.n	8004bb6 <HAL_SPI_Transmit+0x16e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bc2:	e07b      	b.n	8004cbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ca      	bne.n	8004b64 <HAL_SPI_Transmit+0x11c>
 8004bce:	e050      	b.n	8004c72 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Transmit+0x196>
 8004bd8:	8afb      	ldrh	r3, [r7, #22]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d144      	bne.n	8004c68 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c04:	e030      	b.n	8004c68 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d113      	bne.n	8004c3c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c3a:	e015      	b.n	8004c68 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3c:	f7fd fe5c 	bl	80028f8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d803      	bhi.n	8004c54 <HAL_SPI_Transmit+0x20c>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Transmit+0x212>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c66:	e029      	b.n	8004cbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1c9      	bne.n	8004c06 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fa62 	bl	8005140 <SPI_EndRxTxTransaction>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e003      	b.n	8004cbc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b08c      	sub	sp, #48	; 0x30
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x26>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e198      	b.n	8005026 <HAL_SPI_TransmitReceive+0x358>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfc:	f7fd fdfc 	bl	80028f8 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d00f      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x70>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d24:	d107      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x68>
 8004d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d003      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
 8004d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d3c:	e16d      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x82>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x82>
 8004d4a:	887b      	ldrh	r3, [r7, #2]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d56:	e160      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d003      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2205      	movs	r2, #5
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d007      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc8:	d17c      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x10a>
 8004dd2:	8b7b      	ldrh	r3, [r7, #26]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d16a      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	881a      	ldrh	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfc:	e057      	b.n	8004eae <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d11b      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x176>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x176>
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d113      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	881a      	ldrh	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d119      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x1b8>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d014      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	b292      	uxth	r2, r2
 8004e68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	1c9a      	adds	r2, r3, #2
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e82:	2301      	movs	r3, #1
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e86:	f7fd fd37 	bl	80028f8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d80b      	bhi.n	8004eae <HAL_SPI_TransmitReceive+0x1e0>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d007      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004eac:	e0b5      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1a2      	bne.n	8004dfe <HAL_SPI_TransmitReceive+0x130>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d19d      	bne.n	8004dfe <HAL_SPI_TransmitReceive+0x130>
 8004ec2:	e080      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x204>
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d16f      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef8:	e05b      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d11c      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x274>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x274>
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d114      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	7812      	ldrb	r2, [r2, #0]
 8004f24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d119      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x2b6>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d014      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f80:	2301      	movs	r3, #1
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f84:	f7fd fcb8 	bl	80028f8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d803      	bhi.n	8004f9c <HAL_SPI_TransmitReceive+0x2ce>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d102      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x2d4>
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d107      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004fb0:	e033      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d19e      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x22c>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d199      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f8b8 	bl	8005140 <SPI_EndRxTxTransaction>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fe2:	e01a      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005010:	e003      	b.n	800501a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005026:	4618      	mov	r0, r3
 8005028:	3730      	adds	r7, #48	; 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005040:	f7fd fc5a 	bl	80028f8 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	4413      	add	r3, r2
 800504e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005050:	f7fd fc52 	bl	80028f8 <HAL_GetTick>
 8005054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	015b      	lsls	r3, r3, #5
 800505c:	0d1b      	lsrs	r3, r3, #20
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	fb02 f303 	mul.w	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005066:	e054      	b.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d050      	beq.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005070:	f7fd fc42 	bl	80028f8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	429a      	cmp	r2, r3
 800507e:	d902      	bls.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d13d      	bne.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509e:	d111      	bne.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	d004      	beq.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d107      	bne.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d10f      	bne.n	80050ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e017      	b.n	8005132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3b01      	subs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	429a      	cmp	r2, r3
 800512e:	d19b      	bne.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000014 	.word	0x20000014

08005140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff6a 	bl	8005030 <SPI_WaitFlagStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e000      	b.n	8005174 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <MX_FATFS_Init+0x18>)
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <MX_FATFS_Init+0x1c>)
 8005184:	f003 ff16 	bl	8008fb4 <FATFS_LinkDriver>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <MX_FATFS_Init+0x20>)
 800518e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2000263c 	.word	0x2000263c
 8005198:	20000020 	.word	0x20000020
 800519c:	20002638 	.word	0x20002638

080051a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80051a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb fb06 	bl	80007cc <SD_disk_initialize>
 80051c0:	4603      	mov	r3, r0
 80051c2:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb fbdd 	bl	8000998 <SD_disk_status>
 80051de:	4603      	mov	r3, r0
 80051e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80051fa:	7bf8      	ldrb	r0, [r7, #15]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	f7fb fbdd 	bl	80009c0 <SD_disk_read>
 8005206:	4603      	mov	r3, r0
 8005208:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005222:	7bf8      	ldrb	r0, [r7, #15]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	f7fb fc33 	bl	8000a94 <SD_disk_write>
 800522e:	4603      	mov	r3, r0
 8005230:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	603a      	str	r2, [r7, #0]
 8005244:	71fb      	strb	r3, [r7, #7]
 8005246:	460b      	mov	r3, r1
 8005248:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	79b9      	ldrb	r1, [r7, #6]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7fb fca3 	bl	8000b9c <SD_disk_ioctl>
 8005256:	4603      	mov	r3, r0
 8005258:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <disk_status+0x30>)
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	79fa      	ldrb	r2, [r7, #7]
 800527c:	4905      	ldr	r1, [pc, #20]	; (8005294 <disk_status+0x30>)
 800527e:	440a      	add	r2, r1
 8005280:	7a12      	ldrb	r2, [r2, #8]
 8005282:	4610      	mov	r0, r2
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
  return stat;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20002860 	.word	0x20002860

08005298 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <disk_initialize+0x48>)
 80052aa:	5cd3      	ldrb	r3, [r2, r3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d111      	bne.n	80052d4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <disk_initialize+0x48>)
 80052b4:	2101      	movs	r1, #1
 80052b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <disk_initialize+0x48>)
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	4906      	ldr	r1, [pc, #24]	; (80052e0 <disk_initialize+0x48>)
 80052c8:	440a      	add	r2, r1
 80052ca:	7a12      	ldrb	r2, [r2, #8]
 80052cc:	4610      	mov	r0, r2
 80052ce:	4798      	blx	r3
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20002860 	.word	0x20002860

080052e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <disk_read+0x3c>)
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	689c      	ldr	r4, [r3, #8]
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <disk_read+0x3c>)
 8005304:	4413      	add	r3, r2
 8005306:	7a18      	ldrb	r0, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	47a0      	blx	r4
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]
  return res;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
}
 8005316:	4618      	mov	r0, r3
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}
 800531e:	bf00      	nop
 8005320:	20002860 	.word	0x20002860

08005324 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <disk_write+0x3c>)
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68dc      	ldr	r4, [r3, #12]
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <disk_write+0x3c>)
 8005344:	4413      	add	r3, r2
 8005346:	7a18      	ldrb	r0, [r3, #8]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	47a0      	blx	r4
 8005350:	4603      	mov	r3, r0
 8005352:	75fb      	strb	r3, [r7, #23]
  return res;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop
 8005360:	20002860 	.word	0x20002860

08005364 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	603a      	str	r2, [r7, #0]
 800536e:	71fb      	strb	r3, [r7, #7]
 8005370:	460b      	mov	r3, r1
 8005372:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <disk_ioctl+0x38>)
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	79fa      	ldrb	r2, [r7, #7]
 8005382:	4906      	ldr	r1, [pc, #24]	; (800539c <disk_ioctl+0x38>)
 8005384:	440a      	add	r2, r1
 8005386:	7a10      	ldrb	r0, [r2, #8]
 8005388:	79b9      	ldrb	r1, [r7, #6]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]
  return res;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20002860 	.word	0x20002860

080053a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80053b4:	e007      	b.n	80053c6 <mem_cpy+0x26>
		*d++ = *s++;
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	1c53      	adds	r3, r2, #1
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	6179      	str	r1, [r7, #20]
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f2      	bne.n	80053b6 <mem_cpy+0x16>
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80053ec:	e005      	b.n	80053fa <mem_set+0x1e>
		*d++ = (BYTE)val;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	617a      	str	r2, [r7, #20]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1e5a      	subs	r2, r3, #1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f4      	bne.n	80053ee <mem_set+0x12>
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005428:	bf00      	nop
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <mem_cmp+0x40>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	61fa      	str	r2, [r7, #28]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4619      	mov	r1, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	61ba      	str	r2, [r7, #24]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ec      	beq.n	800542a <mem_cmp+0x1a>
	return r;
 8005450:	697b      	ldr	r3, [r7, #20]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005466:	e002      	b.n	800546e <chk_chr+0x12>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3301      	adds	r3, #1
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <chk_chr+0x26>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4293      	cmp	r3, r2
 8005480:	d1f2      	bne.n	8005468 <chk_chr+0xc>
	return *str;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	781b      	ldrb	r3, [r3, #0]
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e03b      	b.n	800551c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80054a4:	4931      	ldr	r1, [pc, #196]	; (800556c <chk_lock+0xdc>)
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d02c      	beq.n	8005512 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80054b8:	492c      	ldr	r1, [pc, #176]	; (800556c <chk_lock+0xdc>)
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d120      	bne.n	8005516 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80054d4:	4925      	ldr	r1, [pc, #148]	; (800556c <chk_lock+0xdc>)
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3304      	adds	r3, #4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ec:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d111      	bne.n	8005516 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80054f2:	491e      	ldr	r1, [pc, #120]	; (800556c <chk_lock+0xdc>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3308      	adds	r3, #8
 8005502:	881a      	ldrh	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800550c:	429a      	cmp	r2, r3
 800550e:	d102      	bne.n	8005516 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005510:	e007      	b.n	8005522 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005512:	2301      	movs	r3, #1
 8005514:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d9c0      	bls.n	80054a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d109      	bne.n	800553c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <chk_lock+0xa4>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d101      	bne.n	8005538 <chk_lock+0xa8>
 8005534:	2300      	movs	r3, #0
 8005536:	e013      	b.n	8005560 <chk_lock+0xd0>
 8005538:	2312      	movs	r3, #18
 800553a:	e011      	b.n	8005560 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <chk_lock+0xca>
 8005542:	490a      	ldr	r1, [pc, #40]	; (800556c <chk_lock+0xdc>)
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	330a      	adds	r3, #10
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	d101      	bne.n	800555e <chk_lock+0xce>
 800555a:	2310      	movs	r3, #16
 800555c:	e000      	b.n	8005560 <chk_lock+0xd0>
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20002648 	.word	0x20002648

08005570 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	e002      	b.n	8005582 <enq_lock+0x12>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3301      	adds	r3, #1
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d809      	bhi.n	800559c <enq_lock+0x2c>
 8005588:	490a      	ldr	r1, [pc, #40]	; (80055b4 <enq_lock+0x44>)
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ef      	bne.n	800557c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20002648 	.word	0x20002648

080055b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e02e      	b.n	8005626 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80055c8:	4958      	ldr	r1, [pc, #352]	; (800572c <inc_lock+0x174>)
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d11d      	bne.n	8005620 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80055e4:	4951      	ldr	r1, [pc, #324]	; (800572c <inc_lock+0x174>)
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	3304      	adds	r3, #4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10e      	bne.n	8005620 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005602:	494a      	ldr	r1, [pc, #296]	; (800572c <inc_lock+0x174>)
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3308      	adds	r3, #8
 8005612:	881a      	ldrh	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800561c:	429a      	cmp	r2, r3
 800561e:	d006      	beq.n	800562e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d9cd      	bls.n	80055c8 <inc_lock+0x10>
 800562c:	e000      	b.n	8005630 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800562e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d148      	bne.n	80056c8 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e002      	b.n	8005642 <inc_lock+0x8a>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d809      	bhi.n	800565c <inc_lock+0xa4>
 8005648:	4938      	ldr	r1, [pc, #224]	; (800572c <inc_lock+0x174>)
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ef      	bne.n	800563c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d101      	bne.n	8005666 <inc_lock+0xae>
 8005662:	2300      	movs	r3, #0
 8005664:	e05d      	b.n	8005722 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	482f      	ldr	r0, [pc, #188]	; (800572c <inc_lock+0x174>)
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	4829      	ldr	r0, [pc, #164]	; (800572c <inc_lock+0x174>)
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4403      	add	r3, r0
 8005694:	3304      	adds	r3, #4
 8005696:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569e:	88d8      	ldrh	r0, [r3, #6]
 80056a0:	4922      	ldr	r1, [pc, #136]	; (800572c <inc_lock+0x174>)
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3308      	adds	r3, #8
 80056b0:	4602      	mov	r2, r0
 80056b2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80056b4:	491d      	ldr	r1, [pc, #116]	; (800572c <inc_lock+0x174>)
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	330a      	adds	r3, #10
 80056c4:	2200      	movs	r2, #0
 80056c6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <inc_lock+0x130>
 80056ce:	4917      	ldr	r1, [pc, #92]	; (800572c <inc_lock+0x174>)
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	330a      	adds	r3, #10
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <inc_lock+0x130>
 80056e4:	2300      	movs	r3, #0
 80056e6:	e01c      	b.n	8005722 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <inc_lock+0x14e>
 80056ee:	490f      	ldr	r1, [pc, #60]	; (800572c <inc_lock+0x174>)
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	330a      	adds	r3, #10
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	b299      	uxth	r1, r3
 8005704:	e001      	b.n	800570a <inc_lock+0x152>
 8005706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800570a:	4808      	ldr	r0, [pc, #32]	; (800572c <inc_lock+0x174>)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4403      	add	r3, r0
 8005718:	330a      	adds	r3, #10
 800571a:	460a      	mov	r2, r1
 800571c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	20002648 	.word	0x20002648

08005730 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d82e      	bhi.n	80057a2 <dec_lock+0x72>
		n = Files[i].ctr;
 8005744:	491b      	ldr	r1, [pc, #108]	; (80057b4 <dec_lock+0x84>)
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	330a      	adds	r3, #10
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575e:	d101      	bne.n	8005764 <dec_lock+0x34>
 8005760:	2300      	movs	r3, #0
 8005762:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <dec_lock+0x40>
 800576a:	89fb      	ldrh	r3, [r7, #14]
 800576c:	3b01      	subs	r3, #1
 800576e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005770:	4910      	ldr	r1, [pc, #64]	; (80057b4 <dec_lock+0x84>)
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	330a      	adds	r3, #10
 8005780:	89fa      	ldrh	r2, [r7, #14]
 8005782:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005784:	89fb      	ldrh	r3, [r7, #14]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <dec_lock+0x6c>
 800578a:	490a      	ldr	r1, [pc, #40]	; (80057b4 <dec_lock+0x84>)
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	737b      	strb	r3, [r7, #13]
 80057a0:	e001      	b.n	80057a6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80057a2:	2302      	movs	r3, #2
 80057a4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80057a6:	7b7b      	ldrb	r3, [r7, #13]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20002648 	.word	0x20002648

080057b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e016      	b.n	80057f4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057c6:	4910      	ldr	r1, [pc, #64]	; (8005808 <clear_lock+0x50>)
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4613      	mov	r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d108      	bne.n	80057ee <clear_lock+0x36>
 80057dc:	490a      	ldr	r1, [pc, #40]	; (8005808 <clear_lock+0x50>)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d9e5      	bls.n	80057c6 <clear_lock+0xe>
	}
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20002648 	.word	0x20002648

0800580c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581e:	791b      	ldrb	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d040      	beq.n	80058a6 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005834:	7858      	ldrb	r0, [r3, #1]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	2301      	movs	r3, #1
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	f7ff fd72 	bl	8005324 <disk_write>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <sync_window+0x40>
			res = FR_DISK_ERR;
 8005846:	2301      	movs	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
 800584a:	e02c      	b.n	80058a6 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005852:	2200      	movs	r2, #0
 8005854:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	d21b      	bcs.n	80058a6 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e012      	b.n	80058a0 <sync_window+0x94>
					wsect += fs->fsize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588e:	7858      	ldrb	r0, [r3, #1]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	2301      	movs	r3, #1
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	f7ff fd45 	bl	8005324 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3b01      	subs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d8e9      	bhi.n	800587a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d01e      	beq.n	800590a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ff9d 	bl	800580c <sync_window>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d116      	bne.n	800590a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e2:	7858      	ldrb	r0, [r3, #1]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	2301      	movs	r3, #1
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	f7ff fcfb 	bl	80052e4 <disk_read>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005904:	461a      	mov	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff75 	bl	800580c <sync_window>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f040 80ad 	bne.w	8005a88 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b03      	cmp	r3, #3
 8005938:	f040 8098 	bne.w	8005a6c <sync_fs+0x158>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	795b      	ldrb	r3, [r3, #5]
 8005944:	2b01      	cmp	r3, #1
 8005946:	f040 8091 	bne.w	8005a6c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	895b      	ldrh	r3, [r3, #10]
 8005954:	461a      	mov	r2, r3
 8005956:	2100      	movs	r1, #0
 8005958:	f7ff fd40 	bl	80053dc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2255      	movs	r2, #85	; 0x55
 8005960:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	22aa      	movs	r2, #170	; 0xaa
 8005968:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2252      	movs	r2, #82	; 0x52
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2252      	movs	r2, #82	; 0x52
 8005976:	705a      	strb	r2, [r3, #1]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2261      	movs	r2, #97	; 0x61
 800597c:	709a      	strb	r2, [r3, #2]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2241      	movs	r2, #65	; 0x41
 8005982:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2272      	movs	r2, #114	; 0x72
 8005988:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2272      	movs	r2, #114	; 0x72
 8005990:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2241      	movs	r2, #65	; 0x41
 8005998:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2261      	movs	r2, #97	; 0x61
 80059a0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	0e1b      	lsrs	r3, r3, #24
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a48:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a50:	7858      	ldrb	r0, [r3, #1]
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f7ff fc61 	bl	8005324 <disk_write>
			fs->fsi_flag = 0;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a68:	2200      	movs	r2, #0
 8005a6a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fc73 	bl	8005364 <disk_ioctl>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	3b02      	subs	r3, #2
 8005aa0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	3b02      	subs	r3, #2
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d301      	bcc.n	8005ab6 <clust2sect+0x24>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e00c      	b.n	8005ad0 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abc:	789b      	ldrb	r3, [r3, #2]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	fb03 f202 	mul.w	r2, r3, r2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	4413      	add	r3, r2
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d906      	bls.n	8005af8 <get_fat+0x1e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <get_fat+0x24>
		val = 1;	/* Internal error */
 8005af8:	2301      	movs	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e0e4      	b.n	8005cc8 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	f000 8098 	beq.w	8005c42 <get_fat+0x168>
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	f300 80ce 	bgt.w	8005cb4 <get_fat+0x1da>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d002      	beq.n	8005b22 <get_fat+0x48>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d05f      	beq.n	8005be0 <get_fat+0x106>
 8005b20:	e0c8      	b.n	8005cb4 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3e:	895b      	ldrh	r3, [r3, #10]
 8005b40:	4619      	mov	r1, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b48:	4413      	add	r3, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff feaf 	bl	80058b0 <move_window>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 80b0 	bne.w	8005cba <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b66:	8952      	ldrh	r2, [r2, #10]
 8005b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b6c:	fb01 f202 	mul.w	r2, r1, r2
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
 8005b76:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	895b      	ldrh	r3, [r3, #10]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b90:	4413      	add	r3, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fe8b 	bl	80058b0 <move_window>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 808e 	bne.w	8005cbe <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	895b      	ldrh	r3, [r3, #10]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bb2:	fb01 f202 	mul.w	r2, r1, r2
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <get_fat+0xfc>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	e002      	b.n	8005bdc <get_fat+0x102>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bdc:	617b      	str	r3, [r7, #20]
			break;
 8005bde:	e073      	b.n	8005cc8 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fe55 	bl	80058b0 <move_window>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d15a      	bne.n	8005cc2 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c16:	8952      	ldrh	r2, [r2, #10]
 8005c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c1c:	fb01 f202 	mul.w	r2, r1, r2
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	b21a      	sxth	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b21b      	sxth	r3, r3
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	617b      	str	r3, [r7, #20]
			break;
 8005c40:	e042      	b.n	8005cc8 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c50:	895b      	ldrh	r3, [r3, #10]
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c5e:	4413      	add	r3, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fe24 	bl	80058b0 <move_window>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12b      	bne.n	8005cc6 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c78:	8952      	ldrh	r2, [r2, #10]
 8005c7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c7e:	fb01 f202 	mul.w	r2, r1, r2
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3303      	adds	r3, #3
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	061a      	lsls	r2, r3, #24
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3302      	adds	r3, #2
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	3201      	adds	r2, #1
 8005ca0:	7812      	ldrb	r2, [r2, #0]
 8005ca2:	0212      	lsls	r2, r2, #8
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cb0:	617b      	str	r3, [r7, #20]
			break;
 8005cb2:	e009      	b.n	8005cc8 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e006      	b.n	8005cc8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cc6:	bf00      	nop
		}
	}

	return val;
 8005cc8:	697b      	ldr	r3, [r7, #20]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d906      	bls.n	8005cf2 <put_fat+0x20>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <put_fat+0x26>
		res = FR_INT_ERR;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e13a      	b.n	8005f6e <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	f000 80d0 	beq.w	8005ea6 <put_fat+0x1d4>
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	f300 8127 	bgt.w	8005f5a <put_fat+0x288>
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d003      	beq.n	8005d18 <put_fat+0x46>
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	f000 808f 	beq.w	8005e34 <put_fat+0x162>
 8005d16:	e120      	b.n	8005f5a <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	895b      	ldrh	r3, [r3, #10]
 8005d36:	4619      	mov	r1, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d3e:	4413      	add	r3, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff fdb4 	bl	80058b0 <move_window>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d4c:	7ffb      	ldrb	r3, [r7, #31]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 8106 	bne.w	8005f60 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	617a      	str	r2, [r7, #20]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d60:	8952      	ldrh	r2, [r2, #10]
 8005d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d66:	fb01 f202 	mul.w	r2, r1, r2
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <put_fat+0xc6>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	b25a      	sxtb	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	e001      	b.n	8005d9c <put_fat+0xca>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	2201      	movs	r2, #1
 8005da8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	6a1a      	ldr	r2, [r3, #32]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db8:	895b      	ldrh	r3, [r3, #10]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fd72 	bl	80058b0 <move_window>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dd0:	7ffb      	ldrb	r3, [r7, #31]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 80c6 	bne.w	8005f64 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dde:	895b      	ldrh	r3, [r3, #10]
 8005de0:	461a      	mov	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de8:	fb01 f202 	mul.w	r2, r1, r2
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <put_fat+0x134>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	e00e      	b.n	8005e24 <put_fat+0x152>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	f023 030f 	bic.w	r3, r3, #15
 8005e10:	b25a      	sxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	2201      	movs	r2, #1
 8005e30:	711a      	strb	r2, [r3, #4]
			break;
 8005e32:	e09c      	b.n	8005f6e <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e42:	895b      	ldrh	r3, [r3, #10]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4619      	mov	r1, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e50:	4413      	add	r3, r2
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff fd2b 	bl	80058b0 <move_window>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 8081 	bne.w	8005f68 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e70:	8952      	ldrh	r2, [r2, #10]
 8005e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e76:	fb01 f202 	mul.w	r2, r1, r2
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3301      	adds	r3, #1
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	711a      	strb	r2, [r3, #4]
			break;
 8005ea4:	e063      	b.n	8005f6e <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	089b      	lsrs	r3, r3, #2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff fcf2 	bl	80058b0 <move_window>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ed0:	7ffb      	ldrb	r3, [r7, #31]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d14a      	bne.n	8005f6c <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ee0:	8952      	ldrh	r2, [r2, #10]
 8005ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee6:	fb01 f202 	mul.w	r2, r1, r2
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	3303      	adds	r3, #3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	061a      	lsls	r2, r3, #24
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3302      	adds	r3, #2
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	4313      	orrs	r3, r2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	3201      	adds	r2, #1
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	0212      	lsls	r2, r2, #8
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3301      	adds	r3, #1
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0c1a      	lsrs	r2, r3, #16
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0e1a      	lsrs	r2, r3, #24
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3303      	adds	r3, #3
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f54:	2201      	movs	r2, #1
 8005f56:	711a      	strb	r2, [r3, #4]
			break;
 8005f58:	e009      	b.n	8005f6e <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e006      	b.n	8005f6e <put_fat+0x29c>
			if (res != FR_OK) break;
 8005f60:	bf00      	nop
 8005f62:	e004      	b.n	8005f6e <put_fat+0x29c>
			if (res != FR_OK) break;
 8005f64:	bf00      	nop
 8005f66:	e002      	b.n	8005f6e <put_fat+0x29c>
			if (res != FR_OK) break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <put_fat+0x29c>
			if (res != FR_OK) break;
 8005f6c:	bf00      	nop
		}
	}

	return res;
 8005f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d906      	bls.n	8005f96 <remove_chain+0x1e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <remove_chain+0x24>
		res = FR_INT_ERR;
 8005f96:	2302      	movs	r3, #2
 8005f98:	73fb      	strb	r3, [r7, #15]
 8005f9a:	e049      	b.n	8006030 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005fa0:	e03b      	b.n	800601a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fd98 	bl	8005ada <get_fat>
 8005faa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d03b      	beq.n	800602a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d102      	bne.n	8005fbe <remove_chain+0x46>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e038      	b.n	8006030 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <remove_chain+0x54>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
 8005fca:	e031      	b.n	8006030 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005fcc:	2200      	movs	r2, #0
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fe7e 	bl	8005cd2 <put_fat>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d126      	bne.n	800602e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d013      	beq.n	8006016 <remove_chain+0x9e>
				fs->free_clust++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ffe:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006006:	795b      	ldrb	r3, [r3, #5]
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d3bc      	bcc.n	8005fa2 <remove_chain+0x2a>
 8006028:	e002      	b.n	8006030 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800602e:	bf00      	nop
		}
	}

	return res;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d111      	bne.n	800606e <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d006      	beq.n	8006068 <create_chain+0x2e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d31d      	bcc.n	80060a4 <create_chain+0x6a>
 8006068:	2301      	movs	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e01a      	b.n	80060a4 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff fd32 	bl	8005ada <get_fat>
 8006076:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d801      	bhi.n	8006082 <create_chain+0x48>
 800607e:	2301      	movs	r3, #1
 8006080:	e07f      	b.n	8006182 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d101      	bne.n	800608e <create_chain+0x54>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	e079      	b.n	8006182 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	d201      	bcs.n	80060a0 <create_chain+0x66>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	e070      	b.n	8006182 <create_chain+0x148>
		scl = clst;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3301      	adds	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d307      	bcc.n	80060cc <create_chain+0x92>
			ncl = 2;
 80060bc:	2302      	movs	r3, #2
 80060be:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d901      	bls.n	80060cc <create_chain+0x92>
 80060c8:	2300      	movs	r3, #0
 80060ca:	e05a      	b.n	8006182 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80060cc:	6979      	ldr	r1, [r7, #20]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fd03 	bl	8005ada <get_fat>
 80060d4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d002      	beq.n	80060ea <create_chain+0xb0>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <create_chain+0xb4>
			return cs;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	e049      	b.n	8006182 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1d8      	bne.n	80060a8 <create_chain+0x6e>
 80060f6:	2300      	movs	r3, #0
 80060f8:	e043      	b.n	8006182 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80060fa:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80060fc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fde5 	bl	8005cd2 <put_fat>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <create_chain+0xec>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d006      	beq.n	8006126 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fdd8 	bl	8005cd2 <put_fat>
 8006122:	4603      	mov	r3, r0
 8006124:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d121      	bne.n	8006170 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	461a      	mov	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d01c      	beq.n	8006180 <create_chain+0x146>
			fs->free_clust--;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	3b01      	subs	r3, #1
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006156:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615e:	795b      	ldrb	r3, [r3, #5]
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	715a      	strb	r2, [r3, #5]
 800616e:	e007      	b.n	8006180 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d102      	bne.n	800617c <create_chain+0x142>
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
 800617a:	e000      	b.n	800617e <create_chain+0x144>
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006180:	697b      	ldr	r3, [r7, #20]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	3304      	adds	r3, #4
 800619e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ac:	895b      	ldrh	r3, [r3, #10]
 80061ae:	461a      	mov	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061c2:	7892      	ldrb	r2, [r2, #2]
 80061c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1d1a      	adds	r2, r3, #4
 80061ce:	613a      	str	r2, [r7, #16]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <clmt_clust+0x54>
 80061da:	2300      	movs	r3, #0
 80061dc:	e010      	b.n	8006200 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d307      	bcc.n	80061f6 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3304      	adds	r3, #4
 80061f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061f4:	e7e9      	b.n	80061ca <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80061f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4413      	add	r3, r2
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d009      	beq.n	8006244 <dir_sdi+0x3a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	429a      	cmp	r2, r3
 8006242:	d301      	bcc.n	8006248 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006244:	2302      	movs	r3, #2
 8006246:	e0aa      	b.n	800639e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <dir_sdi+0x66>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d107      	bne.n	8006270 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d115      	bne.n	80062a2 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006282:	891b      	ldrh	r3, [r3, #8]
 8006284:	461a      	mov	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	4293      	cmp	r3, r2
 800628a:	d301      	bcc.n	8006290 <dir_sdi+0x86>
			return FR_INT_ERR;
 800628c:	2302      	movs	r3, #2
 800628e:	e086      	b.n	800639e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	e043      	b.n	800632a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ae:	895b      	ldrh	r3, [r3, #10]
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80062ca:	e021      	b.n	8006310 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fbff 	bl	8005ada <get_fat>
 80062dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d101      	bne.n	80062ea <dir_sdi+0xe0>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e059      	b.n	800639e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d909      	bls.n	8006304 <dir_sdi+0xfa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d301      	bcc.n	8006308 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006304:	2302      	movs	r3, #2
 8006306:	e04a      	b.n	800639e <dir_sdi+0x194>
			idx -= ic;
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d2d9      	bcs.n	80062cc <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6979      	ldr	r1, [r7, #20]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fbb5 	bl	8005a92 <clust2sect>
 8006328:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	461a      	mov	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <dir_sdi+0x136>
 800633c:	2302      	movs	r3, #2
 800633e:	e02e      	b.n	800639e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634c:	895b      	ldrh	r3, [r3, #10]
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	fbb3 f2f2 	udiv	r2, r3, r2
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006364:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	895b      	ldrh	r3, [r3, #10]
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	b29b      	uxth	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	fbb3 f1f2 	udiv	r1, r3, r2
 800638a:	fb01 f202 	mul.w	r2, r1, r2
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	015b      	lsls	r3, r3, #5
 8006392:	4403      	add	r3, r0
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800639a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80063a6:	b590      	push	{r4, r7, lr}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	88db      	ldrh	r3, [r3, #6]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <dir_next+0x2a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <dir_next+0x2e>
		return FR_NO_FILE;
 80063d0:	2304      	movs	r3, #4
 80063d2:	e12e      	b.n	8006632 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e0:	895b      	ldrh	r3, [r3, #10]
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80063ee:	fb01 f202 	mul.w	r2, r1, r2
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 80fa 	bne.w	80065ee <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	3301      	adds	r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800640a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10d      	bne.n	8006434 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006424:	891b      	ldrh	r3, [r3, #8]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4293      	cmp	r3, r2
 800642c:	f0c0 80df 	bcc.w	80065ee <dir_next+0x248>
				return FR_NO_FILE;
 8006430:	2304      	movs	r3, #4
 8006432:	e0fe      	b.n	8006632 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006440:	895b      	ldrh	r3, [r3, #10]
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	fbb3 f3f2 	udiv	r3, r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800645a:	7892      	ldrb	r2, [r2, #2]
 800645c:	3a01      	subs	r2, #1
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 80c4 	bne.w	80065ee <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7ff fb2e 	bl	8005ada <get_fat>
 800647e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d801      	bhi.n	800648a <dir_next+0xe4>
 8006486:	2302      	movs	r3, #2
 8006488:	e0d3      	b.n	8006632 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d101      	bne.n	8006496 <dir_next+0xf0>
 8006492:	2301      	movs	r3, #1
 8006494:	e0cd      	b.n	8006632 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	f0c0 808e 	bcc.w	80065c8 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <dir_next+0x110>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e0bd      	b.n	8006632 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7ff fdb6 	bl	800603a <create_chain>
 80064ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <dir_next+0x134>
 80064d6:	2307      	movs	r3, #7
 80064d8:	e0ab      	b.n	8006632 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <dir_next+0x13e>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0a6      	b.n	8006632 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d101      	bne.n	80064f0 <dir_next+0x14a>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0a0      	b.n	8006632 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff f987 	bl	800580c <sync_window>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <dir_next+0x162>
 8006504:	2301      	movs	r3, #1
 8006506:	e094      	b.n	8006632 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651e:	895b      	ldrh	r3, [r3, #10]
 8006520:	461a      	mov	r2, r3
 8006522:	2100      	movs	r1, #0
 8006524:	f7fe ff5a 	bl	80053dc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006536:	681c      	ldr	r4, [r3, #0]
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	4610      	mov	r0, r2
 800653c:	f7ff faa9 	bl	8005a92 <clust2sect>
 8006540:	4603      	mov	r3, r0
 8006542:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8006546:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e021      	b.n	8006592 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655a:	2201      	movs	r2, #1
 800655c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f950 	bl	800580c <sync_window>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <dir_next+0x1d0>
 8006572:	2301      	movs	r3, #1
 8006574:	e05d      	b.n	8006632 <dir_next+0x28c>
						dp->fs->winsect++;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006582:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006584:	3201      	adds	r2, #1
 8006586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3301      	adds	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	789b      	ldrb	r3, [r3, #2]
 80065a0:	461a      	mov	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d3d2      	bcc.n	800654e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1acb      	subs	r3, r1, r3
 80065c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ce:	461a      	mov	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6979      	ldr	r1, [r7, #20]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fa57 	bl	8005a92 <clust2sect>
 80065e4:	4602      	mov	r2, r0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ec:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f8:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006610:	895b      	ldrh	r3, [r3, #10]
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	b29b      	uxth	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	fbb3 f1f2 	udiv	r1, r3, r2
 800661e:	fb01 f202 	mul.w	r2, r1, r2
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	015b      	lsls	r3, r3, #5
 8006626:	4403      	add	r3, r0
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800662e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd90      	pop	{r4, r7, pc}

0800663a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006644:	2100      	movs	r1, #0
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fddf 	bl	800620a <dir_sdi>
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d135      	bne.n	80066c2 <dir_alloc+0x88>
		n = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7ff f91f 	bl	80058b0 <move_window>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d121      	bne.n	80066c0 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2be5      	cmp	r3, #229	; 0xe5
 8006688:	d006      	beq.n	8006698 <dir_alloc+0x5e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d107      	bne.n	80066a8 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3301      	adds	r3, #1
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d102      	bne.n	80066ac <dir_alloc+0x72>
 80066a6:	e00c      	b.n	80066c2 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066a8:	2300      	movs	r3, #0
 80066aa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80066ac:	2101      	movs	r1, #1
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fe79 	bl	80063a6 <dir_next>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0cd      	beq.n	800665a <dir_alloc+0x20>
 80066be:	e000      	b.n	80066c2 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80066c0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d101      	bne.n	80066cc <dir_alloc+0x92>
 80066c8:	2307      	movs	r3, #7
 80066ca:	73fb      	strb	r3, [r7, #15]
	return res;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	331b      	adds	r3, #27
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	b21a      	sxth	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	331a      	adds	r3, #26
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b21b      	sxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b21b      	sxth	r3, r3
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d10f      	bne.n	8006726 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	3315      	adds	r3, #21
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	b21a      	sxth	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	b21b      	sxth	r3, r3
 8006718:	4313      	orrs	r3, r2
 800671a:	b21b      	sxth	r3, r3
 800671c:	b29b      	uxth	r3, r3
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

	return cl;
 8006726:	68fb      	ldr	r3, [r7, #12]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	331a      	adds	r3, #26
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	b29a      	uxth	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	331b      	adds	r3, #27
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	0c1a      	lsrs	r2, r3, #16
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3314      	adds	r3, #20
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	b29b      	uxth	r3, r3
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3315      	adds	r3, #21
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
	...

08006780 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006792:	1e5a      	subs	r2, r3, #1
 8006794:	4613      	mov	r3, r2
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <cmp_lfn+0xd8>)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	4413      	add	r3, r2
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	b21a      	sxth	r2, r3
 80067bc:	4926      	ldr	r1, [pc, #152]	; (8006858 <cmp_lfn+0xd8>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	440b      	add	r3, r1
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	440b      	add	r3, r1
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b21b      	sxth	r3, r3
 80067ce:	4313      	orrs	r3, r2
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d019      	beq.n	800680e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80067da:	89bb      	ldrh	r3, [r7, #12]
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 fc33 	bl	8009048 <ff_wtoupper>
 80067e2:	4603      	mov	r3, r0
 80067e4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2bfe      	cmp	r3, #254	; 0xfe
 80067ea:	d80e      	bhi.n	800680a <cmp_lfn+0x8a>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	617a      	str	r2, [r7, #20]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 fc24 	bl	8009048 <ff_wtoupper>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	4293      	cmp	r3, r2
 8006808:	d008      	beq.n	800681c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800680a:	2300      	movs	r3, #0
 800680c:	e01f      	b.n	800684e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800680e:	89bb      	ldrh	r3, [r7, #12]
 8006810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006814:	4293      	cmp	r3, r2
 8006816:	d001      	beq.n	800681c <cmp_lfn+0x9c>
 8006818:	2300      	movs	r3, #0
 800681a:	e018      	b.n	800684e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	d9bf      	bls.n	80067a8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <cmp_lfn+0xcc>
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <cmp_lfn+0xcc>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <cmp_lfn+0xcc>
		return 0;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800684c:	2301      	movs	r3, #1
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	0800bb74 	.word	0x0800bb74

0800685c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800685c:	b480      	push	{r7}
 800685e:	b089      	sub	sp, #36	; 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4611      	mov	r1, r2
 8006868:	461a      	mov	r2, r3
 800686a:	460b      	mov	r3, r1
 800686c:	71fb      	strb	r3, [r7, #7]
 800686e:	4613      	mov	r3, r2
 8006870:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	330d      	adds	r3, #13
 8006876:	79ba      	ldrb	r2, [r7, #6]
 8006878:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	330b      	adds	r3, #11
 800687e:	220f      	movs	r2, #15
 8006880:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	330c      	adds	r3, #12
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	331a      	adds	r3, #26
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	331b      	adds	r3, #27
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	4613      	mov	r3, r2
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	82fb      	strh	r3, [r7, #22]
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80068b2:	8afb      	ldrh	r3, [r7, #22]
 80068b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <fit_lfn+0x70>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	61fa      	str	r2, [r7, #28]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <fit_lfn+0xe4>)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4413      	add	r3, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	8afa      	ldrh	r2, [r7, #22]
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	8afb      	ldrh	r3, [r7, #22]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	b299      	uxth	r1, r3
 80068e6:	4a16      	ldr	r2, [pc, #88]	; (8006940 <fit_lfn+0xe4>)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	4413      	add	r3, r2
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	b2ca      	uxtb	r2, r1
 80068f6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80068f8:	8afb      	ldrh	r3, [r7, #22]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <fit_lfn+0xa8>
 80068fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006902:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	3301      	adds	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b0c      	cmp	r3, #12
 800690e:	d9d0      	bls.n	80068b2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006910:	8afb      	ldrh	r3, [r7, #22]
 8006912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006916:	4293      	cmp	r3, r2
 8006918:	d006      	beq.n	8006928 <fit_lfn+0xcc>
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <fit_lfn+0xd4>
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	79fa      	ldrb	r2, [r7, #7]
 8006934:	701a      	strb	r2, [r3, #0]
}
 8006936:	bf00      	nop
 8006938:	3724      	adds	r7, #36	; 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr
 8006940:	0800bb74 	.word	0x0800bb74

08006944 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	; 0x30
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006952:	220b      	movs	r2, #11
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7fe fd22 	bl	80053a0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b05      	cmp	r3, #5
 8006960:	d92b      	bls.n	80069ba <gen_numname+0x76>
		sr = seq;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006966:	e022      	b.n	80069ae <gen_numname+0x6a>
			wc = *lfn++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006972:	2300      	movs	r3, #0
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
 8006976:	e017      	b.n	80069a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	005a      	lsls	r2, r3, #1
 800697c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	4413      	add	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <gen_numname+0x5e>
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800699c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80069a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	3301      	adds	r3, #1
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d9e4      	bls.n	8006978 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1d8      	bne.n	8006968 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80069ba:	2307      	movs	r3, #7
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	3330      	adds	r3, #48	; 0x30
 80069ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80069ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069d2:	2b39      	cmp	r3, #57	; 0x39
 80069d4:	d904      	bls.n	80069e0 <gen_numname+0x9c>
 80069d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069da:	3307      	adds	r3, #7
 80069dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	1e5a      	subs	r2, r3, #1
 80069e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80069e6:	3330      	adds	r3, #48	; 0x30
 80069e8:	443b      	add	r3, r7
 80069ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80069ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1df      	bne.n	80069be <gen_numname+0x7a>
	ns[i] = '~';
 80069fe:	f107 0214 	add.w	r2, r7, #20
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	4413      	add	r3, r2
 8006a06:	227e      	movs	r2, #126	; 0x7e
 8006a08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	e002      	b.n	8006a16 <gen_numname+0xd2>
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	3301      	adds	r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
 8006a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d205      	bcs.n	8006a2a <gen_numname+0xe6>
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	4413      	add	r3, r2
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d1f2      	bne.n	8006a10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	2b07      	cmp	r3, #7
 8006a2e:	d807      	bhi.n	8006a40 <gen_numname+0xfc>
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a36:	3330      	adds	r3, #48	; 0x30
 8006a38:	443b      	add	r3, r7
 8006a3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006a3e:	e000      	b.n	8006a42 <gen_numname+0xfe>
 8006a40:	2120      	movs	r1, #32
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	627a      	str	r2, [r7, #36]	; 0x24
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	460a      	mov	r2, r1
 8006a4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	d9e9      	bls.n	8006a2a <gen_numname+0xe6>
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	3730      	adds	r7, #48	; 0x30
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006a6c:	230b      	movs	r3, #11
 8006a6e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	0852      	lsrs	r2, r2, #1
 8006a76:	01db      	lsls	r3, r3, #7
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1c59      	adds	r1, r3, #1
 8006a80:	6079      	str	r1, [r7, #4]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	4413      	add	r3, r2
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ed      	bne.n	8006a70 <sum_sfn+0x10>
	return sum;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fbad 	bl	800620a <dir_sdi>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <dir_find+0x1e>
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	e0b8      	b.n	8006c30 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006abe:	23ff      	movs	r3, #255	; 0xff
 8006ac0:	753b      	strb	r3, [r7, #20]
 8006ac2:	7d3b      	ldrb	r3, [r7, #20]
 8006ac4:	757b      	strb	r3, [r7, #21]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad0:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7fe fee3 	bl	80058b0 <move_window>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8097 	bne.w	8006c24 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b06:	7dbb      	ldrb	r3, [r7, #22]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <dir_find+0x72>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	75fb      	strb	r3, [r7, #23]
 8006b10:	e08d      	b.n	8006c2e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	330b      	adds	r3, #11
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b1c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b1e:	7dbb      	ldrb	r3, [r7, #22]
 8006b20:	2be5      	cmp	r3, #229	; 0xe5
 8006b22:	d007      	beq.n	8006b34 <dir_find+0x94>
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <dir_find+0xa6>
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b0f      	cmp	r3, #15
 8006b32:	d008      	beq.n	8006b46 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006b34:	23ff      	movs	r3, #255	; 0xff
 8006b36:	757b      	strb	r3, [r7, #21]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b42:	849a      	strh	r2, [r3, #36]	; 0x24
 8006b44:	e063      	b.n	8006c0e <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b0f      	cmp	r3, #15
 8006b4a:	d137      	bne.n	8006bbc <dir_find+0x11c>
				if (dp->lfn) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d05a      	beq.n	8006c0e <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b58:	7dbb      	ldrb	r3, [r7, #22]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d010      	beq.n	8006b84 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	7b5b      	ldrb	r3, [r3, #13]
 8006b66:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006b68:	7dbb      	ldrb	r3, [r7, #22]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	75bb      	strb	r3, [r7, #22]
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7a:	88da      	ldrh	r2, [r3, #6]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b82:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006b84:	7dba      	ldrb	r2, [r7, #22]
 8006b86:	7d7b      	ldrb	r3, [r7, #21]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d114      	bne.n	8006bb6 <dir_find+0x116>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	330d      	adds	r3, #13
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	7d3a      	ldrb	r2, [r7, #20]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d10e      	bne.n	8006bb6 <dir_find+0x116>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	6939      	ldr	r1, [r7, #16]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fdec 	bl	8006780 <cmp_lfn>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <dir_find+0x116>
 8006bae:	7d7b      	ldrb	r3, [r7, #21]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	e000      	b.n	8006bb8 <dir_find+0x118>
 8006bb6:	23ff      	movs	r3, #255	; 0xff
 8006bb8:	757b      	strb	r3, [r7, #21]
 8006bba:	e028      	b.n	8006c0e <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006bbc:	7d7b      	ldrb	r3, [r7, #21]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <dir_find+0x132>
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f7ff ff4c 	bl	8006a60 <sum_sfn>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	7d3b      	ldrb	r3, [r7, #20]
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02a      	beq.n	8006c28 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	330b      	adds	r3, #11
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <dir_find+0x15e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	220b      	movs	r2, #11
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6938      	ldr	r0, [r7, #16]
 8006bf4:	f7fe fc0c 	bl	8005410 <mem_cmp>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006bfe:	23ff      	movs	r3, #255	; 0xff
 8006c00:	757b      	strb	r3, [r7, #21]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c0c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff fbc8 	bl	80063a6 <dir_next>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f43f af58 	beq.w	8006ad2 <dir_find+0x32>
 8006c22:	e004      	b.n	8006c2e <dir_find+0x18e>
		if (res != FR_OK) break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c2c:	bf00      	nop

	return res;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	220c      	movs	r2, #12
 8006c5a:	6a39      	ldr	r1, [r7, #32]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fb9f 	bl	80053a0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d03b      	beq.n	8006ce4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	330b      	adds	r3, #11
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006c80:	2301      	movs	r3, #1
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c84:	e013      	b.n	8006cae <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006c86:	f107 010c 	add.w	r1, r7, #12
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	6a38      	ldr	r0, [r7, #32]
 8006c90:	f7ff fe58 	bl	8006944 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff03 	bl	8006aa0 <dir_find>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3301      	adds	r3, #1
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2b63      	cmp	r3, #99	; 0x63
 8006cb2:	d9e8      	bls.n	8006c86 <dir_register+0x4e>
 8006cb4:	e000      	b.n	8006cb8 <dir_register+0x80>
			if (res != FR_OK) break;
 8006cb6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d101      	bne.n	8006cc2 <dir_register+0x8a>
 8006cbe:	2307      	movs	r3, #7
 8006cc0:	e0d8      	b.n	8006e74 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d002      	beq.n	8006cd0 <dir_register+0x98>
 8006cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cce:	e0d1      	b.n	8006e74 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	330b      	adds	r3, #11
 8006cd4:	7dfa      	ldrb	r2, [r7, #23]
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf2:	e002      	b.n	8006cfa <dir_register+0xc2>
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f5      	bne.n	8006cf4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	3319      	adds	r3, #25
 8006d0c:	4a5b      	ldr	r2, [pc, #364]	; (8006e7c <dir_register+0x244>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	089b      	lsrs	r3, r3, #2
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	e001      	b.n	8006d1c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fc8b 	bl	800663a <dir_alloc>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d15b      	bne.n	8006dea <dir_register+0x1b2>
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	3b01      	subs	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d055      	beq.n	8006dea <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d44:	88db      	ldrh	r3, [r3, #6]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fa5b 	bl	800620a <dir_sdi>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d143      	bne.n	8006dea <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fe78 	bl	8006a60 <sum_sfn>
 8006d70:	4603      	mov	r3, r0
 8006d72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7fe fd92 	bl	80058b0 <move_window>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d126      	bne.n	8006de8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da0:	6a18      	ldr	r0, [r3, #32]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da8:	6959      	ldr	r1, [r3, #20]
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	7efb      	ldrb	r3, [r7, #27]
 8006db0:	f7ff fd54 	bl	800685c <fit_lfn>
				dp->fs->wflag = 1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff faed 	bl	80063a6 <dir_next>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <dir_register+0x1b2>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1c6      	bne.n	8006d74 <dir_register+0x13c>
 8006de6:	e000      	b.n	8006dea <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006de8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d13e      	bne.n	8006e70 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe fd53 	bl	80058b0 <move_window>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d12b      	bne.n	8006e70 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	2220      	movs	r2, #32
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe fad9 	bl	80053dc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e30:	6958      	ldr	r0, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	220b      	movs	r2, #11
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f7fe faaf 	bl	80053a0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	330b      	adds	r3, #11
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	330c      	adds	r3, #12
 8006e58:	f002 0218 	and.w	r2, r2, #24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3730      	adds	r7, #48	; 0x30
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	4ec4ec4f 	.word	0x4ec4ec4f

08006e80 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	e002      	b.n	8006e98 <create_name+0x18>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3301      	adds	r3, #1
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006e9e:	d0f8      	beq.n	8006e92 <create_name+0x12>
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ea6:	d0f4      	beq.n	8006e92 <create_name+0x12>
	lfn = dp->lfn;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	61ba      	str	r2, [r7, #24]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eca:	2b1f      	cmp	r3, #31
 8006ecc:	d92f      	bls.n	8006f2e <create_name+0xae>
 8006ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ed2:	d02c      	beq.n	8006f2e <create_name+0xae>
 8006ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed6:	2b5c      	cmp	r3, #92	; 0x5c
 8006ed8:	d029      	beq.n	8006f2e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2bfe      	cmp	r3, #254	; 0xfe
 8006ede:	d901      	bls.n	8006ee4 <create_name+0x64>
			return FR_INVALID_NAME;
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	e186      	b.n	80071f2 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eec:	2101      	movs	r1, #1
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f002 f870 	bl	8008fd4 <ff_convert>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <create_name+0x82>
 8006efe:	2306      	movs	r3, #6
 8006f00:	e177      	b.n	80071f2 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f04:	2b7f      	cmp	r3, #127	; 0x7f
 8006f06:	d809      	bhi.n	8006f1c <create_name+0x9c>
 8006f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	488e      	ldr	r0, [pc, #568]	; (8007148 <create_name+0x2c8>)
 8006f0e:	f7fe faa5 	bl	800545c <chk_chr>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <create_name+0x9c>
			return FR_INVALID_NAME;
 8006f18:	2306      	movs	r3, #6
 8006f1a:	e16a      	b.n	80071f2 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	617a      	str	r2, [r7, #20]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f2a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f2c:	e7c5      	b.n	8006eba <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3a:	2b1f      	cmp	r3, #31
 8006f3c:	d801      	bhi.n	8006f42 <create_name+0xc2>
 8006f3e:	2304      	movs	r3, #4
 8006f40:	e000      	b.n	8006f44 <create_name+0xc4>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006f48:	e011      	b.n	8006f6e <create_name+0xee>
		w = lfn[di - 1];
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	3b01      	subs	r3, #1
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d002      	beq.n	8006f68 <create_name+0xe8>
 8006f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f64:	2b2e      	cmp	r3, #46	; 0x2e
 8006f66:	d106      	bne.n	8006f76 <create_name+0xf6>
		di--;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1ea      	bne.n	8006f4a <create_name+0xca>
 8006f74:	e000      	b.n	8006f78 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006f76:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <create_name+0x102>
 8006f7e:	2306      	movs	r3, #6
 8006f80:	e137      	b.n	80071f2 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	220b      	movs	r2, #11
 8006f98:	2120      	movs	r1, #32
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fa1e 	bl	80053dc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e002      	b.n	8006fac <create_name+0x12c>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d0f5      	beq.n	8006fa6 <create_name+0x126>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc6:	d0ee      	beq.n	8006fa6 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <create_name+0x162>
 8006fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd2:	f043 0303 	orr.w	r3, r3, #3
 8006fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006fda:	e002      	b.n	8006fe2 <create_name+0x162>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <create_name+0x17c>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffa:	d1ef      	bne.n	8006fdc <create_name+0x15c>

	b = i = 0; ni = 8;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	2300      	movs	r3, #0
 8007002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007006:	2308      	movs	r3, #8
 8007008:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	61ba      	str	r2, [r7, #24]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800701a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8091 	beq.w	8007144 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007024:	2b20      	cmp	r3, #32
 8007026:	d006      	beq.n	8007036 <create_name+0x1b6>
 8007028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800702a:	2b2e      	cmp	r3, #46	; 0x2e
 800702c:	d10a      	bne.n	8007044 <create_name+0x1c4>
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	429a      	cmp	r2, r3
 8007034:	d006      	beq.n	8007044 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800703a:	f043 0303 	orr.w	r3, r3, #3
 800703e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007042:	e07e      	b.n	8007142 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007044:	6a3a      	ldr	r2, [r7, #32]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	429a      	cmp	r2, r3
 800704a:	d203      	bcs.n	8007054 <create_name+0x1d4>
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	429a      	cmp	r2, r3
 8007052:	d123      	bne.n	800709c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2b0b      	cmp	r3, #11
 8007058:	d106      	bne.n	8007068 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800705a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705e:	f043 0303 	orr.w	r3, r3, #3
 8007062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007066:	e076      	b.n	8007156 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	429a      	cmp	r2, r3
 800706e:	d005      	beq.n	800707c <create_name+0x1fc>
 8007070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007074:	f043 0303 	orr.w	r3, r3, #3
 8007078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	429a      	cmp	r2, r3
 8007082:	d867      	bhi.n	8007154 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	2308      	movs	r3, #8
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	230b      	movs	r3, #11
 800708e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800709a:	e052      	b.n	8007142 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800709c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709e:	2b7f      	cmp	r3, #127	; 0x7f
 80070a0:	d914      	bls.n	80070cc <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80070a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 ff94 	bl	8008fd4 <ff_convert>
 80070ac:	4603      	mov	r3, r0
 80070ae:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80070b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <create_name+0x240>
 80070b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b8:	3b80      	subs	r3, #128	; 0x80
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <create_name+0x2cc>)
 80070bc:	5cd3      	ldrb	r3, [r2, r3]
 80070be:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c4:	f043 0302 	orr.w	r3, r3, #2
 80070c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80070cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <create_name+0x262>
 80070d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d4:	4619      	mov	r1, r3
 80070d6:	481e      	ldr	r0, [pc, #120]	; (8007150 <create_name+0x2d0>)
 80070d8:	f7fe f9c0 	bl	800545c <chk_chr>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80070e2:	235f      	movs	r3, #95	; 0x5f
 80070e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ea:	f043 0303 	orr.w	r3, r3, #3
 80070ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070f2:	e01b      	b.n	800712c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80070f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f6:	2b40      	cmp	r3, #64	; 0x40
 80070f8:	d909      	bls.n	800710e <create_name+0x28e>
 80070fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070fc:	2b5a      	cmp	r3, #90	; 0x5a
 80070fe:	d806      	bhi.n	800710e <create_name+0x28e>
					b |= 2;
 8007100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800710c:	e00e      	b.n	800712c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800710e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007110:	2b60      	cmp	r3, #96	; 0x60
 8007112:	d90b      	bls.n	800712c <create_name+0x2ac>
 8007114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007116:	2b7a      	cmp	r3, #122	; 0x7a
 8007118:	d808      	bhi.n	800712c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800711a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007128:	3b20      	subs	r3, #32
 800712a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	6239      	str	r1, [r7, #32]
 800713a:	4413      	add	r3, r2
 800713c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007142:	e762      	b.n	800700a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007144:	bf00      	nop
 8007146:	e006      	b.n	8007156 <create_name+0x2d6>
 8007148:	0800a5b8 	.word	0x0800a5b8
 800714c:	0800baf4 	.word	0x0800baf4
 8007150:	0800a5c4 	.word	0x0800a5c4
			if (si > di) break;			/* No extension */
 8007154:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2be5      	cmp	r3, #229	; 0xe5
 8007162:	d105      	bne.n	8007170 <create_name+0x2f0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2205      	movs	r2, #5
 800716e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b08      	cmp	r3, #8
 8007174:	d104      	bne.n	8007180 <create_name+0x300>
 8007176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8007180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b0c      	cmp	r3, #12
 800718a:	d005      	beq.n	8007198 <create_name+0x318>
 800718c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b03      	cmp	r3, #3
 8007196:	d105      	bne.n	80071a4 <create_name+0x324>
		cf |= NS_LFN;
 8007198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719c:	f043 0302 	orr.w	r3, r3, #2
 80071a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d117      	bne.n	80071e0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80071b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <create_name+0x348>
 80071bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c0:	f043 0310 	orr.w	r3, r3, #16
 80071c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80071c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071cc:	f003 030c 	and.w	r3, r3, #12
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d105      	bne.n	80071e0 <create_name+0x360>
 80071d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d8:	f043 0308 	orr.w	r3, r3, #8
 80071dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	330b      	adds	r3, #11
 80071ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80071f0:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop

080071fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b2f      	cmp	r3, #47	; 0x2f
 800720c:	d003      	beq.n	8007216 <follow_path+0x1a>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b5c      	cmp	r3, #92	; 0x5c
 8007214:	d102      	bne.n	800721c <follow_path+0x20>
		path++;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	461a      	mov	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b1f      	cmp	r3, #31
 800722e:	d80c      	bhi.n	800724a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007230:	2100      	movs	r1, #0
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fe ffe9 	bl	800620a <dir_sdi>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	461a      	mov	r2, r3
 8007244:	2300      	movs	r3, #0
 8007246:	6153      	str	r3, [r2, #20]
 8007248:	e049      	b.n	80072de <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800724a:	463b      	mov	r3, r7
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fe16 	bl	8006e80 <create_name>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d13a      	bne.n	80072d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fc1e 	bl	8006aa0 <dir_find>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	7adb      	ldrb	r3, [r3, #11]
 8007272:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d12b      	bne.n	80072d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d126      	bne.n	80072d8 <follow_path+0xdc>
 800728a:	2305      	movs	r3, #5
 800728c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800728e:	e023      	b.n	80072d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d120      	bne.n	80072dc <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	330b      	adds	r3, #11
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80072b2:	2305      	movs	r3, #5
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e012      	b.n	80072de <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fa07 	bl	80066d6 <ld_clust>
 80072c8:	4602      	mov	r2, r0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072d2:	e7ba      	b.n	800724a <follow_path+0x4e>
			if (res != FR_OK) break;
 80072d4:	bf00      	nop
 80072d6:	e002      	b.n	80072de <follow_path+0xe2>
				break;
 80072d8:	bf00      	nop
 80072da:	e000      	b.n	80072de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072dc:	bf00      	nop
		}
	}

	return res;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d031      	beq.n	8007362 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e002      	b.n	800730c <get_ldnumber+0x24>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	3301      	adds	r3, #1
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b1f      	cmp	r3, #31
 8007312:	d903      	bls.n	800731c <get_ldnumber+0x34>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b3a      	cmp	r3, #58	; 0x3a
 800731a:	d1f4      	bne.n	8007306 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b3a      	cmp	r3, #58	; 0x3a
 8007322:	d11c      	bne.n	800735e <get_ldnumber+0x76>
			tp = *path;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	60fa      	str	r2, [r7, #12]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	3b30      	subs	r3, #48	; 0x30
 8007334:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b09      	cmp	r3, #9
 800733a:	d80e      	bhi.n	800735a <get_ldnumber+0x72>
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	d10a      	bne.n	800735a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d107      	bne.n	800735a <get_ldnumber+0x72>
					vol = (int)i;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3301      	adds	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	e002      	b.n	8007364 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007362:	693b      	ldr	r3, [r7, #16]
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
	...

08007370 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007380:	2200      	movs	r2, #0
 8007382:	711a      	strb	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738a:	461a      	mov	r2, r3
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fe fa8b 	bl	80058b0 <move_window>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <check_fs+0x34>
		return 3;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e04a      	b.n	800743a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073aa:	3301      	adds	r3, #1
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	b21a      	sxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80073b8:	b21b      	sxth	r3, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	4a21      	ldr	r2, [pc, #132]	; (8007444 <check_fs+0xd4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d001      	beq.n	80073c8 <check_fs+0x58>
		return 2;
 80073c4:	2302      	movs	r3, #2
 80073c6:	e038      	b.n	800743a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3336      	adds	r3, #54	; 0x36
 80073cc:	3303      	adds	r3, #3
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	061a      	lsls	r2, r3, #24
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3336      	adds	r3, #54	; 0x36
 80073d6:	3302      	adds	r3, #2
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	4313      	orrs	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	3236      	adds	r2, #54	; 0x36
 80073e2:	3201      	adds	r2, #1
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	0212      	lsls	r2, r2, #8
 80073e8:	4313      	orrs	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073f6:	4a14      	ldr	r2, [pc, #80]	; (8007448 <check_fs+0xd8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <check_fs+0x90>
		return 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e01c      	b.n	800743a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3352      	adds	r3, #82	; 0x52
 8007404:	3303      	adds	r3, #3
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	061a      	lsls	r2, r3, #24
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3352      	adds	r3, #82	; 0x52
 800740e:	3302      	adds	r3, #2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	4313      	orrs	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	3252      	adds	r2, #82	; 0x52
 800741a:	3201      	adds	r2, #1
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	0212      	lsls	r2, r2, #8
 8007420:	4313      	orrs	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007428:	4313      	orrs	r3, r2
 800742a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800742e:	4a06      	ldr	r2, [pc, #24]	; (8007448 <check_fs+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <check_fs+0xc8>
		return 0;
 8007434:	2300      	movs	r3, #0
 8007436:	e000      	b.n	800743a <check_fs+0xca>

	return 1;
 8007438:	2301      	movs	r3, #1
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	ffffaa55 	.word	0xffffaa55
 8007448:	00544146 	.word	0x00544146

0800744c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b096      	sub	sp, #88	; 0x58
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007460:	68b8      	ldr	r0, [r7, #8]
 8007462:	f7ff ff41 	bl	80072e8 <get_ldnumber>
 8007466:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	da01      	bge.n	8007472 <find_volume+0x26>
 800746e:	230b      	movs	r3, #11
 8007470:	e311      	b.n	8007a96 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007472:	4a98      	ldr	r2, [pc, #608]	; (80076d4 <find_volume+0x288>)
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <find_volume+0x3a>
 8007482:	230c      	movs	r3, #12
 8007484:	e307      	b.n	8007a96 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800748a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01c      	beq.n	80074d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd fedf 	bl	8005264 <disk_status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <find_volume+0x82>
 80074be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074ca:	230a      	movs	r3, #10
 80074cc:	e2e3      	b.n	8007a96 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80074ce:	2300      	movs	r3, #0
 80074d0:	e2e1      	b.n	8007a96 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fed1 	bl	8005298 <disk_initialize>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80074fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007508:	2303      	movs	r3, #3
 800750a:	e2c4      	b.n	8007a96 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <find_volume+0xd6>
 8007512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800751e:	230a      	movs	r3, #10
 8007520:	e2b9      	b.n	8007a96 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007528:	7858      	ldrb	r0, [r3, #1]
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007530:	330a      	adds	r3, #10
 8007532:	461a      	mov	r2, r3
 8007534:	2102      	movs	r1, #2
 8007536:	f7fd ff15 	bl	8005364 <disk_ioctl>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10d      	bne.n	800755c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007546:	895b      	ldrh	r3, [r3, #10]
 8007548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754c:	d306      	bcc.n	800755c <find_volume+0x110>
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	895b      	ldrh	r3, [r3, #10]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d901      	bls.n	8007560 <find_volume+0x114>
 800755c:	2301      	movs	r3, #1
 800755e:	e29a      	b.n	8007a96 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007564:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007566:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007568:	f7ff ff02 	bl	8007370 <check_fs>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007576:	2b01      	cmp	r3, #1
 8007578:	d153      	bne.n	8007622 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800757a:	2300      	movs	r3, #0
 800757c:	643b      	str	r3, [r7, #64]	; 0x40
 800757e:	e028      	b.n	80075d2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800758a:	4413      	add	r3, r2
 800758c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	3304      	adds	r3, #4
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <find_volume+0x172>
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	330b      	adds	r3, #11
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	061a      	lsls	r2, r3, #24
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	330a      	adds	r3, #10
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	4313      	orrs	r3, r2
 80075aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ac:	3209      	adds	r2, #9
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	0212      	lsls	r2, r2, #8
 80075b2:	4313      	orrs	r3, r2
 80075b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b6:	3208      	adds	r2, #8
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	e000      	b.n	80075c0 <find_volume+0x174>
 80075be:	2200      	movs	r2, #0
 80075c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	3358      	adds	r3, #88	; 0x58
 80075c6:	443b      	add	r3, r7
 80075c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	3301      	adds	r3, #1
 80075d0:	643b      	str	r3, [r7, #64]	; 0x40
 80075d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d9d3      	bls.n	8007580 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80075d8:	2300      	movs	r3, #0
 80075da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80075dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <find_volume+0x19c>
 80075e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e4:	3b01      	subs	r3, #1
 80075e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80075e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	3358      	adds	r3, #88	; 0x58
 80075ee:	443b      	add	r3, r7
 80075f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80075f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <find_volume+0x1bc>
 80075fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007600:	f7ff feb6 	bl	8007370 <check_fs>
 8007604:	4603      	mov	r3, r0
 8007606:	e000      	b.n	800760a <find_volume+0x1be>
 8007608:	2302      	movs	r3, #2
 800760a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800760e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <find_volume+0x1d6>
 8007616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007618:	3301      	adds	r3, #1
 800761a:	643b      	str	r3, [r7, #64]	; 0x40
 800761c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800761e:	2b03      	cmp	r3, #3
 8007620:	d9e2      	bls.n	80075e8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007626:	2b03      	cmp	r3, #3
 8007628:	d101      	bne.n	800762e <find_volume+0x1e2>
 800762a:	2301      	movs	r3, #1
 800762c:	e233      	b.n	8007a96 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800762e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <find_volume+0x1ee>
 8007636:	230d      	movs	r3, #13
 8007638:	e22d      	b.n	8007a96 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	7b1b      	ldrb	r3, [r3, #12]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	b21a      	sxth	r2, r3
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	7adb      	ldrb	r3, [r3, #11]
 8007646:	b21b      	sxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b21a      	sxth	r2, r3
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	b21b      	sxth	r3, r3
 8007656:	429a      	cmp	r2, r3
 8007658:	d001      	beq.n	800765e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800765a:	230d      	movs	r3, #13
 800765c:	e21b      	b.n	8007a96 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	7ddb      	ldrb	r3, [r3, #23]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b21a      	sxth	r2, r3
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	7d9b      	ldrb	r3, [r3, #22]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d112      	bne.n	80076a0 <find_volume+0x254>
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007680:	061a      	lsls	r2, r3, #24
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	4313      	orrs	r3, r2
 800768c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007692:	0212      	lsls	r2, r2, #8
 8007694:	4313      	orrs	r3, r2
 8007696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007698:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800769c:	4313      	orrs	r3, r2
 800769e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a6:	461a      	mov	r2, r3
 80076a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076aa:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	7c1a      	ldrb	r2, [r3, #16]
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076be:	78db      	ldrb	r3, [r3, #3]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d009      	beq.n	80076d8 <find_volume+0x28c>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d003      	beq.n	80076d8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80076d0:	230d      	movs	r3, #13
 80076d2:	e1e0      	b.n	8007a96 <find_volume+0x64a>
 80076d4:	20002640 	.word	0x20002640
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	7b5a      	ldrb	r2, [r3, #13]
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00c      	beq.n	800771c <find_volume+0x2d0>
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	461a      	mov	r2, r3
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	3b01      	subs	r3, #1
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800771c:	230d      	movs	r3, #13
 800771e:	e1ba      	b.n	8007a96 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	7c9b      	ldrb	r3, [r3, #18]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	b21a      	sxth	r2, r3
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	7c5b      	ldrb	r3, [r3, #17]
 800772c:	b21b      	sxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b21b      	sxth	r3, r3
 8007732:	b29a      	uxth	r2, r3
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007742:	891b      	ldrh	r3, [r3, #8]
 8007744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800774a:	8952      	ldrh	r2, [r2, #10]
 800774c:	0952      	lsrs	r2, r2, #5
 800774e:	b292      	uxth	r2, r2
 8007750:	fbb3 f1f2 	udiv	r1, r3, r2
 8007754:	fb01 f202 	mul.w	r2, r1, r2
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007760:	230d      	movs	r3, #13
 8007762:	e198      	b.n	8007a96 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	7d1b      	ldrb	r3, [r3, #20]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	b21a      	sxth	r2, r3
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	7cdb      	ldrb	r3, [r3, #19]
 8007770:	b21b      	sxth	r3, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	b21b      	sxth	r3, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800777a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777c:	2b00      	cmp	r3, #0
 800777e:	d112      	bne.n	80077a6 <find_volume+0x35a>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007786:	061a      	lsls	r2, r3, #24
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	4313      	orrs	r3, r2
 8007792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007794:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007798:	0212      	lsls	r2, r2, #8
 800779a:	4313      	orrs	r3, r2
 800779c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800779e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	7bdb      	ldrb	r3, [r3, #15]
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	b21a      	sxth	r2, r3
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	7b9b      	ldrb	r3, [r3, #14]
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b21b      	sxth	r3, r3
 80077b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80077ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <find_volume+0x378>
 80077c0:	230d      	movs	r3, #13
 80077c2:	e168      	b.n	8007a96 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80077c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c8:	4413      	add	r3, r2
 80077ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077d0:	8911      	ldrh	r1, [r2, #8]
 80077d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077d8:	8952      	ldrh	r2, [r2, #10]
 80077da:	0952      	lsrs	r2, r2, #5
 80077dc:	b292      	uxth	r2, r2
 80077de:	fbb1 f2f2 	udiv	r2, r1, r2
 80077e2:	b292      	uxth	r2, r2
 80077e4:	4413      	add	r3, r2
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d201      	bcs.n	80077f4 <find_volume+0x3a8>
 80077f0:	230d      	movs	r3, #13
 80077f2:	e150      	b.n	8007a96 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80077f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007800:	7892      	ldrb	r2, [r2, #2]
 8007802:	fbb3 f3f2 	udiv	r3, r3, r2
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <find_volume+0x3c6>
 800780e:	230d      	movs	r3, #13
 8007810:	e141      	b.n	8007a96 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800781e:	4293      	cmp	r3, r2
 8007820:	d902      	bls.n	8007828 <find_volume+0x3dc>
 8007822:	2302      	movs	r3, #2
 8007824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800782e:	4293      	cmp	r3, r2
 8007830:	d902      	bls.n	8007838 <find_volume+0x3ec>
 8007832:	2303      	movs	r3, #3
 8007834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	3302      	adds	r3, #2
 800783c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007842:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	461a      	mov	r2, r3
 800784c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007850:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007854:	4413      	add	r3, r2
 8007856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800785c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800785e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	4413      	add	r3, r2
 8007864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800786a:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800786c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007870:	2b03      	cmp	r3, #3
 8007872:	d124      	bne.n	80078be <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787a:	891b      	ldrh	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <find_volume+0x438>
 8007880:	230d      	movs	r3, #13
 8007882:	e108      	b.n	8007a96 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800788a:	061a      	lsls	r2, r3, #24
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	4313      	orrs	r3, r2
 8007896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007898:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800789c:	0212      	lsls	r2, r2, #8
 800789e:	4313      	orrs	r3, r2
 80078a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80078a6:	4313      	orrs	r3, r2
 80078a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078ae:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	e02b      	b.n	8007916 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c4:	891b      	ldrh	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <find_volume+0x482>
 80078ca:	230d      	movs	r3, #13
 80078cc:	e0e3      	b.n	8007a96 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d8:	4413      	add	r3, r2
 80078da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078e0:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d105      	bne.n	80078f6 <find_volume+0x4aa>
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	e00e      	b.n	8007914 <find_volume+0x4c8>
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	4613      	mov	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4413      	add	r3, r2
 8007904:	085a      	lsrs	r2, r3, #1
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007914:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007924:	895b      	ldrh	r3, [r3, #10]
 8007926:	4619      	mov	r1, r3
 8007928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800792a:	440b      	add	r3, r1
 800792c:	3b01      	subs	r3, #1
 800792e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007930:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007934:	8949      	ldrh	r1, [r1, #10]
 8007936:	fbb3 f3f1 	udiv	r3, r3, r1
 800793a:	429a      	cmp	r2, r3
 800793c:	d201      	bcs.n	8007942 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800793e:	230d      	movs	r3, #13
 8007940:	e0a9      	b.n	8007a96 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007948:	461a      	mov	r2, r3
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	6113      	str	r3, [r2, #16]
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800795e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007966:	2280      	movs	r2, #128	; 0x80
 8007968:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800796a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800796e:	2b03      	cmp	r3, #3
 8007970:	d17a      	bne.n	8007a68 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	b21a      	sxth	r2, r3
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007982:	b21b      	sxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b21b      	sxth	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d16d      	bne.n	8007a68 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800798c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798e:	3301      	adds	r3, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007994:	f7fd ff8c 	bl	80058b0 <move_window>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d164      	bne.n	8007a68 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a4:	2200      	movs	r2, #0
 80079a6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	b21a      	sxth	r2, r3
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80079b8:	b21b      	sxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b21b      	sxth	r3, r3
 80079be:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <find_volume+0x654>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d151      	bne.n	8007a68 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	78db      	ldrb	r3, [r3, #3]
 80079c8:	061a      	lsls	r2, r3, #24
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	4313      	orrs	r3, r2
 80079d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d4:	7852      	ldrb	r2, [r2, #1]
 80079d6:	0212      	lsls	r2, r2, #8
 80079d8:	4313      	orrs	r3, r2
 80079da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	4a30      	ldr	r2, [pc, #192]	; (8007aa4 <find_volume+0x658>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d140      	bne.n	8007a68 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80079ec:	061a      	lsls	r2, r3, #24
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	4313      	orrs	r3, r2
 80079f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079fa:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80079fe:	0212      	lsls	r2, r2, #8
 8007a00:	4313      	orrs	r3, r2
 8007a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a04:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <find_volume+0x65c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d12b      	bne.n	8007a68 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007a16:	061a      	lsls	r2, r3, #24
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	4313      	orrs	r3, r2
 8007a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a24:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007a28:	0212      	lsls	r2, r2, #8
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a2e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007a32:	4313      	orrs	r3, r2
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a3a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007a42:	061a      	lsls	r2, r3, #24
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a50:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007a54:	0212      	lsls	r2, r2, #8
 8007a56:	4313      	orrs	r3, r2
 8007a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a66:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a74:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <find_volume+0x660>)
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <find_volume+0x660>)
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <find_volume+0x660>)
 8007a84:	881a      	ldrh	r2, [r3, #0]
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a90:	f7fd fe92 	bl	80057b8 <clear_lock>
#endif

	return FR_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3758      	adds	r7, #88	; 0x58
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	ffffaa55 	.word	0xffffaa55
 8007aa4:	41615252 	.word	0x41615252
 8007aa8:	61417272 	.word	0x61417272
 8007aac:	20002644 	.word	0x20002644

08007ab0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d02a      	beq.n	8007b18 <validate+0x68>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d024      	beq.n	8007b18 <validate+0x68>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01b      	beq.n	8007b18 <validate+0x68>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aec:	88da      	ldrh	r2, [r3, #6]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af4:	889b      	ldrh	r3, [r3, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d10e      	bne.n	8007b18 <validate+0x68>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fd fbab 	bl	8005264 <disk_status>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007b18:	2309      	movs	r3, #9
 8007b1a:	e000      	b.n	8007b1e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007b3a:	f107 0310 	add.w	r3, r7, #16
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fbd2 	bl	80072e8 <get_ldnumber>
 8007b44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	da01      	bge.n	8007b50 <f_mount+0x28>
 8007b4c:	230b      	movs	r3, #11
 8007b4e:	e02f      	b.n	8007bb0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <f_mount+0x90>)
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007b60:	69b8      	ldr	r0, [r7, #24]
 8007b62:	f7fd fe29 	bl	80057b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	490d      	ldr	r1, [pc, #52]	; (8007bb8 <f_mount+0x90>)
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <f_mount+0x6e>
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d001      	beq.n	8007b9a <f_mount+0x72>
 8007b96:	2300      	movs	r3, #0
 8007b98:	e00a      	b.n	8007bb0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007b9a:	f107 0108 	add.w	r1, r7, #8
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fc51 	bl	800744c <find_volume>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20002640 	.word	0x20002640

08007bbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bca:	f843 0c4c 	str.w	r0, [r3, #-76]
 8007bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bd2:	f843 1c50 	str.w	r1, [r3, #-80]
 8007bd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bda:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007be2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <f_open+0x32>
 8007bea:	2309      	movs	r3, #9
 8007bec:	e2f7      	b.n	80081de <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007bee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bf2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007c00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c04:	461a      	mov	r2, r3
 8007c06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c0a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007c16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c1a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	f107 0118 	add.w	r1, r7, #24
 8007c28:	3910      	subs	r1, #16
 8007c2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c2e:	3b18      	subs	r3, #24
 8007c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fc09 	bl	800744c <find_volume>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c40:	f102 0217 	add.w	r2, r2, #23
 8007c44:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007c46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c4a:	f103 0317 	add.w	r3, r3, #23
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f040 82bf 	bne.w	80081d4 <f_open+0x618>
		INIT_BUF(dj);
 8007c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	3b04      	subs	r3, #4
 8007c62:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8007c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4bd4      	ldr	r3, [pc, #848]	; (8007fc0 <f_open+0x404>)
 8007c6e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c76:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8007c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c7e:	3b18      	subs	r3, #24
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff faba 	bl	80071fc <follow_path>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c8e:	f102 0217 	add.w	r2, r2, #23
 8007c92:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007c94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c98:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007c9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ca0:	f102 0210 	add.w	r2, r2, #16
 8007ca4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ca6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007caa:	f103 0317 	add.w	r3, r3, #23
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d126      	bne.n	8007d02 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8007cb4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cb8:	f103 0310 	add.w	r3, r3, #16
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <f_open+0x114>
				res = FR_INVALID_NAME;
 8007cc2:	2306      	movs	r3, #6
 8007cc4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cc8:	f102 0217 	add.w	r2, r2, #23
 8007ccc:	7013      	strb	r3, [r2, #0]
 8007cce:	e018      	b.n	8007d02 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cd4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007cec:	3b18      	subs	r3, #24
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fbcd 	bl	8005490 <chk_lock>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cfc:	f102 0217 	add.w	r2, r2, #23
 8007d00:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d06:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d0a:	f003 031c 	and.w	r3, r3, #28
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 813c 	beq.w	8007f8c <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007d14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d18:	f103 0317 	add.w	r3, r3, #23
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d02e      	beq.n	8007d80 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007d22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d26:	f103 0317 	add.w	r3, r3, #23
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d112      	bne.n	8007d56 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d30:	f7fd fc1e 	bl	8005570 <enq_lock>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <f_open+0x18e>
 8007d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d3e:	3b18      	subs	r3, #24
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe ff79 	bl	8006c38 <dir_register>
 8007d46:	4603      	mov	r3, r0
 8007d48:	e000      	b.n	8007d4c <f_open+0x190>
 8007d4a:	2312      	movs	r3, #18
 8007d4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d50:	f102 0217 	add.w	r2, r2, #23
 8007d54:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d60:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d64:	f043 0308 	orr.w	r3, r3, #8
 8007d68:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007d6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d70:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007d74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d78:	f102 0210 	add.w	r2, r2, #16
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	e01f      	b.n	8007dc0 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d84:	f103 0310 	add.w	r3, r3, #16
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330b      	adds	r3, #11
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 0311 	and.w	r3, r3, #17
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d006      	beq.n	8007da4 <f_open+0x1e8>
					res = FR_DENIED;
 8007d96:	2307      	movs	r3, #7
 8007d98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d9c:	f102 0217 	add.w	r2, r2, #23
 8007da0:	7013      	strb	r3, [r2, #0]
 8007da2:	e00d      	b.n	8007dc0 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007da4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007da8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <f_open+0x204>
						res = FR_EXIST;
 8007db4:	2308      	movs	r3, #8
 8007db6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dba:	f102 0217 	add.w	r2, r2, #23
 8007dbe:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007dc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dc4:	f103 0317 	add.w	r3, r3, #23
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 8113 	bne.w	8007ff6 <f_open+0x43a>
 8007dd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dd4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 810a 	beq.w	8007ff6 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007de2:	f7fd f9dd 	bl	80051a0 <get_fattime>
 8007de6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dea:	f103 030c 	add.w	r3, r3, #12
 8007dee:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007df0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007df4:	f103 0310 	add.w	r3, r3, #16
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330e      	adds	r3, #14
 8007dfc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e00:	f102 020c 	add.w	r2, r2, #12
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e0e:	f103 030c 	add.w	r3, r3, #12
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e1e:	f103 0310 	add.w	r3, r3, #16
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330f      	adds	r3, #15
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e2e:	f103 030c 	add.w	r3, r3, #12
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	0c1a      	lsrs	r2, r3, #16
 8007e36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e3a:	f103 0310 	add.w	r3, r3, #16
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3310      	adds	r3, #16
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e4a:	f103 030c 	add.w	r3, r3, #12
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	0e1a      	lsrs	r2, r3, #24
 8007e52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e56:	f103 0310 	add.w	r3, r3, #16
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3311      	adds	r3, #17
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007e62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e66:	f103 0310 	add.w	r3, r3, #16
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330b      	adds	r3, #11
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007e72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e76:	f103 0310 	add.w	r3, r3, #16
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	331c      	adds	r3, #28
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e86:	f103 0310 	add.w	r3, r3, #16
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	331d      	adds	r3, #29
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e96:	f103 0310 	add.w	r3, r3, #16
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	331e      	adds	r3, #30
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ea6:	f103 0310 	add.w	r3, r3, #16
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	331f      	adds	r3, #31
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007eba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ebe:	f102 0210 	add.w	r2, r2, #16
 8007ec2:	6811      	ldr	r1, [r2, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fe fc06 	bl	80066d6 <ld_clust>
 8007eca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ece:	f103 0308 	add.w	r3, r3, #8
 8007ed2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007eda:	f103 0310 	add.w	r3, r3, #16
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	f7fe fc27 	bl	8006732 <st_clust>
				dj.fs->wflag = 1;
 8007ee4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ee8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007ef4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ef8:	f103 0308 	add.w	r3, r3, #8
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d079      	beq.n	8007ff6 <f_open+0x43a>
					dw = dj.fs->winsect;
 8007f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f06:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f14:	f102 020c 	add.w	r2, r2, #12
 8007f18:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f1e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007f22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f26:	f102 0208 	add.w	r2, r2, #8
 8007f2a:	6811      	ldr	r1, [r2, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe f823 	bl	8005f78 <remove_chain>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f38:	f102 0217 	add.w	r2, r2, #23
 8007f3c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007f3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f42:	f103 0317 	add.w	r3, r3, #23
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d154      	bne.n	8007ff6 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007f4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f50:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007f54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f58:	f103 0308 	add.w	r3, r3, #8
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f64:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f6a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007f6e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f72:	f102 020c 	add.w	r2, r2, #12
 8007f76:	6811      	ldr	r1, [r2, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fd fc99 	bl	80058b0 <move_window>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f84:	f102 0217 	add.w	r2, r2, #23
 8007f88:	7013      	strb	r3, [r2, #0]
 8007f8a:	e034      	b.n	8007ff6 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007f8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f90:	f103 0317 	add.w	r3, r3, #23
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d12d      	bne.n	8007ff6 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007f9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f9e:	f103 0310 	add.w	r3, r3, #16
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330b      	adds	r3, #11
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <f_open+0x408>
					res = FR_NO_FILE;
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007fb6:	f102 0217 	add.w	r2, r2, #23
 8007fba:	7013      	strb	r3, [r2, #0]
 8007fbc:	e01b      	b.n	8007ff6 <f_open+0x43a>
 8007fbe:	bf00      	nop
 8007fc0:	20002660 	.word	0x20002660
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fc8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d010      	beq.n	8007ff6 <f_open+0x43a>
 8007fd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fd8:	f103 0310 	add.w	r3, r3, #16
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330b      	adds	r3, #11
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <f_open+0x43a>
						res = FR_DENIED;
 8007fea:	2307      	movs	r3, #7
 8007fec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ff0:	f102 0217 	add.w	r2, r2, #23
 8007ff4:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007ff6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ffa:	f103 0317 	add.w	r3, r3, #23
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d157      	bne.n	80080b4 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008008:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <f_open+0x46e>
				mode |= FA__WRITTEN;
 8008014:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008018:	461a      	mov	r2, r3
 800801a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800801e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008022:	f043 0320 	orr.w	r3, r3, #32
 8008026:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800802a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800802e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800803c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008044:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008046:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800804a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800804e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008052:	461a      	mov	r2, r3
 8008054:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008058:	f103 0310 	add.w	r3, r3, #16
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008060:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008064:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	bf14      	ite	ne
 8008070:	2301      	movne	r3, #1
 8008072:	2300      	moveq	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800807c:	3b18      	subs	r3, #24
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd fa99 	bl	80055b8 <inc_lock>
 8008086:	4602      	mov	r2, r0
 8008088:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800808c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008094:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800809a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d105      	bne.n	80080b4 <f_open+0x4f8>
 80080a8:	2302      	movs	r3, #2
 80080aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080ae:	f102 0217 	add.w	r2, r2, #23
 80080b2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80080b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080b8:	f103 0317 	add.w	r3, r3, #23
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f040 8088 	bne.w	80081d4 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 80080c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080c8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d0:	461a      	mov	r2, r3
 80080d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080d6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80080da:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80080dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e8:	2200      	movs	r2, #0
 80080ea:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80080ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080f0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80080f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080f8:	f102 0210 	add.w	r2, r2, #16
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fae9 	bl	80066d6 <ld_clust>
 8008104:	4602      	mov	r2, r0
 8008106:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800810a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800810e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008112:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008114:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008118:	f103 0310 	add.w	r3, r3, #16
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	331f      	adds	r3, #31
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	061a      	lsls	r2, r3, #24
 8008124:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008128:	f103 0310 	add.w	r3, r3, #16
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	331e      	adds	r3, #30
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	4313      	orrs	r3, r2
 8008136:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800813a:	f102 0210 	add.w	r2, r2, #16
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	321d      	adds	r2, #29
 8008142:	7812      	ldrb	r2, [r2, #0]
 8008144:	0212      	lsls	r2, r2, #8
 8008146:	4313      	orrs	r3, r2
 8008148:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800814c:	f102 0210 	add.w	r2, r2, #16
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	321c      	adds	r2, #28
 8008154:	7812      	ldrb	r2, [r2, #0]
 8008156:	4313      	orrs	r3, r2
 8008158:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800815c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008160:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008164:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008166:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800816a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	461a      	mov	r2, r3
 8008174:	2300      	movs	r3, #0
 8008176:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800817c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008184:	461a      	mov	r2, r3
 8008186:	2300      	movs	r3, #0
 8008188:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800818a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800818e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	461a      	mov	r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800819c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081a0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80081a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80081a8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80081ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081b0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80081b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80081ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c4:	88da      	ldrh	r2, [r3, #6]
 80081c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081ca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80081d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081d8:	f103 0317 	add.w	r3, r3, #23
 80081dc:	781b      	ldrb	r3, [r3, #0]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff fc53 	bl	8007ab0 <validate>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <f_write+0x2c>
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	e21e      	b.n	8008656 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821e:	79db      	ldrb	r3, [r3, #7]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822a:	79db      	ldrb	r3, [r3, #7]
 800822c:	e213      	b.n	8008656 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	799b      	ldrb	r3, [r3, #6]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800823e:	2307      	movs	r3, #7
 8008240:	e209      	b.n	8008656 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	441a      	add	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	429a      	cmp	r2, r3
 8008258:	f080 81d9 	bcs.w	800860e <f_write+0x422>
 800825c:	2300      	movs	r3, #0
 800825e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008260:	e1d5      	b.n	800860e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008276:	8952      	ldrh	r2, [r2, #10]
 8008278:	fbb3 f1f2 	udiv	r1, r3, r2
 800827c:	fb01 f202 	mul.w	r2, r1, r2
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 8169 	bne.w	800855a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800829c:	8952      	ldrh	r2, [r2, #10]
 800829e:	fbb3 f3f2 	udiv	r3, r3, r2
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b0:	789b      	ldrb	r3, [r3, #2]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	4013      	ands	r3, r2
 80082b8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80082ba:	7dbb      	ldrb	r3, [r7, #22]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d15f      	bne.n	8008380 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d111      	bne.n	80082f0 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d126      	bne.n	800832a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fd fea7 	bl	800603a <create_chain>
 80082ec:	6278      	str	r0, [r7, #36]	; 0x24
 80082ee:	e01c      	b.n	800832a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d009      	beq.n	8008310 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	4619      	mov	r1, r3
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7fd ff3f 	bl	800618a <clmt_clust>
 800830c:	6278      	str	r0, [r7, #36]	; 0x24
 800830e:	e00c      	b.n	800832a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fd fe89 	bl	800603a <create_chain>
 8008328:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8173 	beq.w	8008618 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <f_write+0x15a>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833e:	2202      	movs	r2, #2
 8008340:	71da      	strb	r2, [r3, #7]
 8008342:	2302      	movs	r3, #2
 8008344:	e187      	b.n	8008656 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d106      	bne.n	800835c <f_write+0x170>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008354:	2201      	movs	r2, #1
 8008356:	71da      	strb	r2, [r3, #7]
 8008358:	2301      	movs	r3, #1
 800835a:	e17c      	b.n	8008656 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008362:	461a      	mov	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <f_write+0x194>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837a:	461a      	mov	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	799b      	ldrb	r3, [r3, #6]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d023      	beq.n	80083d8 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	7858      	ldrb	r0, [r3, #1]
 800839e:	68f9      	ldr	r1, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a6:	699a      	ldr	r2, [r3, #24]
 80083a8:	2301      	movs	r3, #1
 80083aa:	f7fc ffbb 	bl	8005324 <disk_write>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d006      	beq.n	80083c2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ba:	2201      	movs	r2, #1
 80083bc:	71da      	strb	r2, [r3, #7]
 80083be:	2301      	movs	r3, #1
 80083c0:	e149      	b.n	8008656 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c8:	799b      	ldrb	r3, [r3, #6]
 80083ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fd fb51 	bl	8005a92 <clust2sect>
 80083f0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <f_write+0x21a>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fe:	2202      	movs	r2, #2
 8008400:	71da      	strb	r2, [r3, #7]
 8008402:	2302      	movs	r3, #2
 8008404:	e127      	b.n	8008656 <f_write+0x46a>
			sect += csect;
 8008406:	7dbb      	ldrb	r3, [r7, #22]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4413      	add	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	895b      	ldrh	r3, [r3, #10]
 800841c:	461a      	mov	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	fbb3 f3f2 	udiv	r3, r3, r2
 8008424:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d069      	beq.n	8008500 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800842c:	7dba      	ldrb	r2, [r7, #22]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800843e:	7892      	ldrb	r2, [r2, #2]
 8008440:	4293      	cmp	r3, r2
 8008442:	d90a      	bls.n	800845a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	461a      	mov	r2, r3
 8008454:	7dbb      	ldrb	r3, [r7, #22]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008466:	7858      	ldrb	r0, [r3, #1]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	f7fc ff59 	bl	8005324 <disk_write>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847e:	2201      	movs	r2, #1
 8008480:	71da      	strb	r2, [r3, #7]
 8008482:	2301      	movs	r3, #1
 8008484:	e0e7      	b.n	8008656 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	429a      	cmp	r2, r3
 8008496:	d926      	bls.n	80084e6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084b2:	8952      	ldrh	r2, [r2, #10]
 80084b4:	fb02 f303 	mul.w	r3, r2, r3
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	18d1      	adds	r1, r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c8:	895b      	ldrh	r3, [r3, #10]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7fc ff68 	bl	80053a0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d6:	799b      	ldrb	r3, [r3, #6]
 80084d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f2:	895b      	ldrh	r3, [r3, #10]
 80084f4:	461a      	mov	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	fb02 f303 	mul.w	r3, r2, r3
 80084fc:	623b      	str	r3, [r7, #32]
				continue;
 80084fe:	e06e      	b.n	80085de <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	429a      	cmp	r2, r3
 800850c:	d01f      	beq.n	800854e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	429a      	cmp	r2, r3
 8008520:	d215      	bcs.n	800854e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852e:	7858      	ldrb	r0, [r3, #1]
 8008530:	68f9      	ldr	r1, [r7, #12]
 8008532:	2301      	movs	r3, #1
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	f7fc fed5 	bl	80052e4 <disk_read>
 800853a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800853c:	2b00      	cmp	r3, #0
 800853e:	d006      	beq.n	800854e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008546:	2201      	movs	r2, #1
 8008548:	71da      	strb	r2, [r3, #7]
 800854a:	2301      	movs	r3, #1
 800854c:	e083      	b.n	8008656 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008554:	461a      	mov	r2, r3
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008566:	895b      	ldrh	r3, [r3, #10]
 8008568:	4618      	mov	r0, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800857e:	8952      	ldrh	r2, [r2, #10]
 8008580:	fbb3 f1f2 	udiv	r1, r3, r2
 8008584:	fb01 f202 	mul.w	r2, r1, r2
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	1ac3      	subs	r3, r0, r3
 800858c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800858e:	6a3a      	ldr	r2, [r7, #32]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d901      	bls.n	800859a <f_write+0x3ae>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085ae:	8952      	ldrh	r2, [r2, #10]
 80085b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085b4:	fb01 f202 	mul.w	r2, r1, r2
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	6a3a      	ldr	r2, [r7, #32]
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fc feec 	bl	80053a0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ce:	799b      	ldrb	r3, [r3, #6]
 80085d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085dc:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	4413      	add	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	4413      	add	r3, r2
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085f8:	6093      	str	r3, [r2, #8]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	441a      	add	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f47f ae26 	bne.w	8008262 <f_write+0x76>
 8008616:	e000      	b.n	800861a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008618:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	429a      	cmp	r2, r3
 800862c:	d907      	bls.n	800863e <f_write+0x452>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800863c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008644:	799b      	ldrb	r3, [r3, #6]
 8008646:	f043 0320 	orr.w	r3, r3, #32
 800864a:	b2da      	uxtb	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008652:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3728      	adds	r7, #40	; 0x28
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fa22 	bl	8007ab0 <validate>
 800866c:	4603      	mov	r3, r0
 800866e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f040 80bc 	bne.w	80087f0 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867e:	799b      	ldrb	r3, [r3, #6]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80b3 	beq.w	80087f0 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	799b      	ldrb	r3, [r3, #6]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01e      	beq.n	80086d8 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a6:	7858      	ldrb	r0, [r3, #1]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	2301      	movs	r3, #1
 80086b4:	f7fc fe36 	bl	8005324 <disk_write>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80086be:	2301      	movs	r3, #1
 80086c0:	e097      	b.n	80087f2 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c8:	799b      	ldrb	r3, [r3, #6]
 80086ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7fd f8e0 	bl	80058b0 <move_window>
 80086f0:	4603      	mov	r3, r0
 80086f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d17a      	bne.n	80087f0 <f_sync+0x192>
				dir = fp->dir_ptr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	330b      	adds	r3, #11
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	330b      	adds	r3, #11
 800870e:	f042 0220 	orr.w	r2, r2, #32
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	331c      	adds	r3, #28
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	b29b      	uxth	r3, r3
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	b29a      	uxth	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	331d      	adds	r3, #29
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	0c1a      	lsrs	r2, r3, #16
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	331e      	adds	r3, #30
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	0e1a      	lsrs	r2, r3, #24
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	331f      	adds	r3, #31
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4619      	mov	r1, r3
 800876a:	6938      	ldr	r0, [r7, #16]
 800876c:	f7fd ffe1 	bl	8006732 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008770:	f7fc fd16 	bl	80051a0 <get_fattime>
 8008774:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3316      	adds	r3, #22
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	b29b      	uxth	r3, r3
 8008784:	0a1b      	lsrs	r3, r3, #8
 8008786:	b29a      	uxth	r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	3317      	adds	r3, #23
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	0c1a      	lsrs	r2, r3, #16
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	3318      	adds	r3, #24
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0e1a      	lsrs	r2, r3, #24
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	3319      	adds	r3, #25
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3312      	adds	r3, #18
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3313      	adds	r3, #19
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087be:	799b      	ldrb	r3, [r3, #6]
 80087c0:	f023 0320 	bic.w	r3, r3, #32
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087cc:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087da:	2201      	movs	r2, #1
 80087dc:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd f894 	bl	8005914 <sync_fs>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff ff2b 	bl	800865e <f_sync>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d119      	bne.n	8008846 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff f94c 	bl	8007ab0 <validate>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d111      	bne.n	8008846 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	4618      	mov	r0, r3
 800882c:	f7fc ff80 	bl	8005730 <dec_lock>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008840:	461a      	mov	r2, r3
 8008842:	2300      	movs	r3, #0
 8008844:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b090      	sub	sp, #64	; 0x40
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff f928 	bl	8007ab0 <validate>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <f_lseek+0x24>
 800886e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008872:	e2da      	b.n	8008e2a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887a:	79db      	ldrb	r3, [r3, #7]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008886:	79db      	ldrb	r3, [r3, #7]
 8008888:	e2cf      	b.n	8008e2a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 8124 	beq.w	8008ae0 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d16c      	bne.n	800897a <f_lseek+0x12a>
			tbl = fp->cltbl;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	627a      	str	r2, [r7, #36]	; 0x24
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	2302      	movs	r3, #2
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d046      	beq.n	8008956 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	2300      	movs	r3, #0
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	3302      	adds	r3, #2
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	60fb      	str	r3, [r7, #12]
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	3301      	adds	r3, #1
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd f8f5 	bl	8005ada <get_fat>
 80088f0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d806      	bhi.n	8008906 <f_lseek+0xb6>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fe:	2202      	movs	r2, #2
 8008900:	71da      	strb	r2, [r3, #7]
 8008902:	2302      	movs	r3, #2
 8008904:	e291      	b.n	8008e2a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d106      	bne.n	800891c <f_lseek+0xcc>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008914:	2201      	movs	r2, #1
 8008916:	71da      	strb	r2, [r3, #7]
 8008918:	2301      	movs	r3, #1
 800891a:	e286      	b.n	8008e2a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008922:	429a      	cmp	r2, r3
 8008924:	d0d7      	beq.n	80088d6 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	429a      	cmp	r2, r3
 800892c:	d809      	bhi.n	8008942 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	627a      	str	r2, [r7, #36]	; 0x24
 8008934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	627a      	str	r2, [r7, #36]	; 0x24
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008952:	429a      	cmp	r2, r3
 8008954:	d3b8      	bcc.n	80088c8 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008960:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	429a      	cmp	r2, r3
 8008968:	d803      	bhi.n	8008972 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	e259      	b.n	8008e26 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008972:	2311      	movs	r3, #17
 8008974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008978:	e255      	b.n	8008e26 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d904      	bls.n	8008992 <f_lseek+0x142>
				ofs = fp->fsize;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008998:	461a      	mov	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 8240 	beq.w	8008e26 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fd fbec 	bl	800618a <clmt_clust>
 80089b2:	4602      	mov	r2, r0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ba:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fd f85f 	bl	8005a92 <clust2sect>
 80089d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <f_lseek+0x19a>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e2:	2202      	movs	r2, #2
 80089e4:	71da      	strb	r2, [r3, #7]
 80089e6:	2302      	movs	r3, #2
 80089e8:	e21f      	b.n	8008e2a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089fa:	8952      	ldrh	r2, [r2, #10]
 80089fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a0c:	7892      	ldrb	r2, [r2, #2]
 8008a0e:	3a01      	subs	r2, #1
 8008a10:	4013      	ands	r3, r2
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	4413      	add	r3, r2
 8008a16:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a26:	6812      	ldr	r2, [r2, #0]
 8008a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a2c:	8952      	ldrh	r2, [r2, #10]
 8008a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a32:	fb01 f202 	mul.w	r2, r1, r2
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 81f4 	beq.w	8008e26 <f_lseek+0x5d6>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	f000 81ec 	beq.w	8008e26 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a54:	799b      	ldrb	r3, [r3, #6]
 8008a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d023      	beq.n	8008aa6 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6a:	7858      	ldrb	r0, [r3, #1]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	2301      	movs	r3, #1
 8008a78:	f7fc fc54 	bl	8005324 <disk_write>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	2201      	movs	r2, #1
 8008a8a:	71da      	strb	r2, [r3, #7]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e1cc      	b.n	8008e2a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a96:	799b      	ldrb	r3, [r3, #6]
 8008a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab2:	7858      	ldrb	r0, [r3, #1]
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	f7fc fc13 	bl	80052e4 <disk_read>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	2201      	movs	r2, #1
 8008acc:	71da      	strb	r2, [r3, #7]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e1ab      	b.n	8008e2a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	461a      	mov	r2, r3
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6193      	str	r3, [r2, #24]
 8008ade:	e1a2      	b.n	8008e26 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d90c      	bls.n	8008b08 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af4:	799b      	ldrb	r3, [r3, #6]
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d104      	bne.n	8008b08 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b20:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 8100 	beq.w	8008d2a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	789b      	ldrb	r3, [r3, #2]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	fb02 f303 	mul.w	r3, r2, r3
 8008b4c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d021      	beq.n	8008b98 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	1e5a      	subs	r2, r3, #1
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	1e59      	subs	r1, r3, #1
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d315      	bcc.n	8008b98 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	1e5a      	subs	r2, r3, #1
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	425b      	negs	r3, r3
 8008b74:	4013      	ands	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b7c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b96:	e031      	b.n	8008bfc <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d123      	bne.n	8008bf0 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd fa41 	bl	800603a <create_chain>
 8008bb8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d106      	bne.n	8008bce <f_lseek+0x37e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	71da      	strb	r2, [r3, #7]
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e12d      	b.n	8008e2a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd4:	d106      	bne.n	8008be4 <f_lseek+0x394>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bdc:	2201      	movs	r2, #1
 8008bde:	71da      	strb	r2, [r3, #7]
 8008be0:	2301      	movs	r3, #1
 8008be2:	e122      	b.n	8008e2a <f_lseek+0x5da>
					fp->sclust = clst;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bea:	461a      	mov	r2, r3
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8093 	beq.w	8008d2a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8008c04:	e052      	b.n	8008cac <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0c:	799b      	ldrb	r3, [r3, #6]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00e      	beq.n	8008c34 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fd fa0a 	bl	800603a <create_chain>
 8008c26:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10b      	bne.n	8008c46 <f_lseek+0x3f6>
							ofs = bcs; break;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	603b      	str	r3, [r7, #0]
 8008c32:	e03f      	b.n	8008cb4 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fc ff4b 	bl	8005ada <get_fat>
 8008c44:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d106      	bne.n	8008c5c <f_lseek+0x40c>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	2201      	movs	r2, #1
 8008c56:	71da      	strb	r2, [r3, #7]
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0e6      	b.n	8008e2a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d909      	bls.n	8008c76 <f_lseek+0x426>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d306      	bcc.n	8008c84 <f_lseek+0x434>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	71da      	strb	r2, [r3, #7]
 8008c80:	2302      	movs	r3, #2
 8008c82:	e0d2      	b.n	8008e2a <f_lseek+0x5da>
					fp->clust = clst;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ca2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d8a8      	bhi.n	8008c06 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cc6:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd4:	895b      	ldrh	r3, [r3, #10]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cde:	fb01 f202 	mul.w	r2, r1, r2
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d020      	beq.n	8008d2a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fc fecd 	bl	8005a92 <clust2sect>
 8008cf8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <f_lseek+0x4be>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d06:	2202      	movs	r2, #2
 8008d08:	71da      	strb	r2, [r3, #7]
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e08d      	b.n	8008e2a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1a:	895b      	ldrh	r3, [r3, #10]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d26:	4413      	add	r3, r2
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d3e:	8952      	ldrh	r2, [r2, #10]
 8008d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d44:	fb01 f202 	mul.w	r2, r1, r2
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d04e      	beq.n	8008dec <f_lseek+0x59c>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d047      	beq.n	8008dec <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d62:	799b      	ldrb	r3, [r3, #6]
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d023      	beq.n	8008db4 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d78:	7858      	ldrb	r0, [r3, #1]
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	2301      	movs	r3, #1
 8008d86:	f7fc facd 	bl	8005324 <disk_write>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d006      	beq.n	8008d9e <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d96:	2201      	movs	r2, #1
 8008d98:	71da      	strb	r2, [r3, #7]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e045      	b.n	8008e2a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da4:	799b      	ldrb	r3, [r3, #6]
 8008da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc0:	7858      	ldrb	r0, [r3, #1]
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc8:	f7fc fa8c 	bl	80052e4 <disk_read>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd8:	2201      	movs	r2, #1
 8008dda:	71da      	strb	r2, [r3, #7]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e024      	b.n	8008e2a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	461a      	mov	r2, r3
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d912      	bls.n	8008e26 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e0e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e16:	799b      	ldrb	r3, [r3, #6]
 8008e18:	f043 0320 	orr.w	r3, r3, #32
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e24:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008e26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3740      	adds	r7, #64	; 0x40
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	2b0a      	cmp	r3, #10
 8008e42:	d103      	bne.n	8008e4c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008e44:	210d      	movs	r1, #13
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fff3 	bl	8008e32 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	db25      	blt.n	8008ea4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	60fa      	str	r2, [r7, #12]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b3c      	cmp	r3, #60	; 0x3c
 8008e6a:	dd12      	ble.n	8008e92 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 010c 	add.w	r1, r3, #12
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	f7ff f9b6 	bl	80081ec <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d101      	bne.n	8008e8c <putc_bfd+0x5a>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e001      	b.n	8008e90 <putc_bfd+0x5e>
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	609a      	str	r2, [r3, #8]
 8008ea2:	e000      	b.n	8008ea6 <putc_bfd+0x74>
	if (i < 0) return;
 8008ea4:	bf00      	nop
}
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b097      	sub	sp, #92	; 0x5c
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008ec2:	e009      	b.n	8008ed8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	f107 030c 	add.w	r3, r7, #12
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff ffad 	bl	8008e32 <putc_bfd>
	while (*str)			/* Put the string */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f1      	bne.n	8008ec4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db15      	blt.n	8008f12 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	461c      	mov	r4, r3
 8008eec:	f107 0208 	add.w	r2, r7, #8
 8008ef0:	f107 030c 	add.w	r3, r7, #12
 8008ef4:	f103 010c 	add.w	r1, r3, #12
 8008ef8:	4613      	mov	r3, r2
 8008efa:	4622      	mov	r2, r4
 8008efc:	f7ff f976 	bl	80081ec <f_write>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d101      	bne.n	8008f12 <f_puts+0x66>
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	e001      	b.n	8008f16 <f_puts+0x6a>
	return EOF;
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	375c      	adds	r7, #92	; 0x5c
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd90      	pop	{r4, r7, pc}
	...

08008f20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f38:	7a5b      	ldrb	r3, [r3, #9]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d831      	bhi.n	8008fa4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f42:	7a5b      	ldrb	r3, [r3, #9]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f50:	7a5b      	ldrb	r3, [r3, #9]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f60:	7a5b      	ldrb	r3, [r3, #9]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f68:	4413      	add	r3, r2
 8008f6a:	79fa      	ldrb	r2, [r7, #7]
 8008f6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f6e:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f70:	7a5b      	ldrb	r3, [r3, #9]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	b2d1      	uxtb	r1, r2
 8008f78:	4a0d      	ldr	r2, [pc, #52]	; (8008fb0 <FATFS_LinkDriverEx+0x90>)
 8008f7a:	7251      	strb	r1, [r2, #9]
 8008f7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f7e:	7dbb      	ldrb	r3, [r7, #22]
 8008f80:	3330      	adds	r3, #48	; 0x30
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	223a      	movs	r2, #58	; 0x3a
 8008f8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	3302      	adds	r3, #2
 8008f94:	222f      	movs	r2, #47	; 0x2f
 8008f96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3303      	adds	r3, #3
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr
 8008fb0:	20002860 	.word	0x20002860

08008fb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff ffac 	bl	8008f20 <FATFS_LinkDriverEx>
 8008fc8:	4603      	mov	r3, r0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008fe0:	88fb      	ldrh	r3, [r7, #6]
 8008fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe4:	d802      	bhi.n	8008fec <ff_convert+0x18>
		c = chr;
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	81fb      	strh	r3, [r7, #14]
 8008fea:	e025      	b.n	8009038 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	2bff      	cmp	r3, #255	; 0xff
 8008ff6:	d805      	bhi.n	8009004 <ff_convert+0x30>
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	3b80      	subs	r3, #128	; 0x80
 8008ffc:	4a11      	ldr	r2, [pc, #68]	; (8009044 <ff_convert+0x70>)
 8008ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009002:	e000      	b.n	8009006 <ff_convert+0x32>
 8009004:	2300      	movs	r3, #0
 8009006:	81fb      	strh	r3, [r7, #14]
 8009008:	e016      	b.n	8009038 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800900a:	2300      	movs	r3, #0
 800900c:	81fb      	strh	r3, [r7, #14]
 800900e:	e009      	b.n	8009024 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009010:	89fb      	ldrh	r3, [r7, #14]
 8009012:	4a0c      	ldr	r2, [pc, #48]	; (8009044 <ff_convert+0x70>)
 8009014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009018:	88fa      	ldrh	r2, [r7, #6]
 800901a:	429a      	cmp	r2, r3
 800901c:	d006      	beq.n	800902c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800901e:	89fb      	ldrh	r3, [r7, #14]
 8009020:	3301      	adds	r3, #1
 8009022:	81fb      	strh	r3, [r7, #14]
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	2b7f      	cmp	r3, #127	; 0x7f
 8009028:	d9f2      	bls.n	8009010 <ff_convert+0x3c>
 800902a:	e000      	b.n	800902e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800902c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800902e:	89fb      	ldrh	r3, [r7, #14]
 8009030:	3380      	adds	r3, #128	; 0x80
 8009032:	b29b      	uxth	r3, r3
 8009034:	b2db      	uxtb	r3, r3
 8009036:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009038:	89fb      	ldrh	r3, [r7, #14]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	0800bb84 	.word	0x0800bb84

08009048 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e002      	b.n	800905e <ff_wtoupper+0x16>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	4a0f      	ldr	r2, [pc, #60]	; (800909c <ff_wtoupper+0x54>)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <ff_wtoupper+0x30>
 800906a:	4a0c      	ldr	r2, [pc, #48]	; (800909c <ff_wtoupper+0x54>)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009072:	88fa      	ldrh	r2, [r7, #6]
 8009074:	429a      	cmp	r2, r3
 8009076:	d1ef      	bne.n	8009058 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009078:	4a08      	ldr	r2, [pc, #32]	; (800909c <ff_wtoupper+0x54>)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <ff_wtoupper+0x46>
 8009084:	4a06      	ldr	r2, [pc, #24]	; (80090a0 <ff_wtoupper+0x58>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800908c:	e000      	b.n	8009090 <ff_wtoupper+0x48>
 800908e:	88fb      	ldrh	r3, [r7, #6]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	0800bc84 	.word	0x0800bc84
 80090a0:	0800be64 	.word	0x0800be64

080090a4 <rand>:
 80090a4:	4b16      	ldr	r3, [pc, #88]	; (8009100 <rand+0x5c>)
 80090a6:	b510      	push	{r4, lr}
 80090a8:	681c      	ldr	r4, [r3, #0]
 80090aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80090ac:	b9b3      	cbnz	r3, 80090dc <rand+0x38>
 80090ae:	2018      	movs	r0, #24
 80090b0:	f000 fa5e 	bl	8009570 <malloc>
 80090b4:	4602      	mov	r2, r0
 80090b6:	6320      	str	r0, [r4, #48]	; 0x30
 80090b8:	b920      	cbnz	r0, 80090c4 <rand+0x20>
 80090ba:	2152      	movs	r1, #82	; 0x52
 80090bc:	4b11      	ldr	r3, [pc, #68]	; (8009104 <rand+0x60>)
 80090be:	4812      	ldr	r0, [pc, #72]	; (8009108 <rand+0x64>)
 80090c0:	f000 f9f0 	bl	80094a4 <__assert_func>
 80090c4:	4911      	ldr	r1, [pc, #68]	; (800910c <rand+0x68>)
 80090c6:	4b12      	ldr	r3, [pc, #72]	; (8009110 <rand+0x6c>)
 80090c8:	e9c0 1300 	strd	r1, r3, [r0]
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <rand+0x70>)
 80090ce:	2100      	movs	r1, #0
 80090d0:	6083      	str	r3, [r0, #8]
 80090d2:	230b      	movs	r3, #11
 80090d4:	8183      	strh	r3, [r0, #12]
 80090d6:	2001      	movs	r0, #1
 80090d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80090dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80090de:	480e      	ldr	r0, [pc, #56]	; (8009118 <rand+0x74>)
 80090e0:	690b      	ldr	r3, [r1, #16]
 80090e2:	694c      	ldr	r4, [r1, #20]
 80090e4:	4358      	muls	r0, r3
 80090e6:	4a0d      	ldr	r2, [pc, #52]	; (800911c <rand+0x78>)
 80090e8:	fb02 0004 	mla	r0, r2, r4, r0
 80090ec:	fba3 3202 	umull	r3, r2, r3, r2
 80090f0:	3301      	adds	r3, #1
 80090f2:	eb40 0002 	adc.w	r0, r0, r2
 80090f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80090fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80090fe:	bd10      	pop	{r4, pc}
 8009100:	2000008c 	.word	0x2000008c
 8009104:	0800c044 	.word	0x0800c044
 8009108:	0800c05b 	.word	0x0800c05b
 800910c:	abcd330e 	.word	0xabcd330e
 8009110:	e66d1234 	.word	0xe66d1234
 8009114:	0005deec 	.word	0x0005deec
 8009118:	5851f42d 	.word	0x5851f42d
 800911c:	4c957f2d 	.word	0x4c957f2d

08009120 <std>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 3300 	strd	r3, r3, [r0]
 800912a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800912e:	6083      	str	r3, [r0, #8]
 8009130:	8181      	strh	r1, [r0, #12]
 8009132:	6643      	str	r3, [r0, #100]	; 0x64
 8009134:	81c2      	strh	r2, [r0, #14]
 8009136:	6183      	str	r3, [r0, #24]
 8009138:	4619      	mov	r1, r3
 800913a:	2208      	movs	r2, #8
 800913c:	305c      	adds	r0, #92	; 0x5c
 800913e:	f000 f936 	bl	80093ae <memset>
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <std+0x38>)
 8009144:	6224      	str	r4, [r4, #32]
 8009146:	6263      	str	r3, [r4, #36]	; 0x24
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <std+0x3c>)
 800914a:	62a3      	str	r3, [r4, #40]	; 0x28
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <std+0x40>)
 800914e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <std+0x44>)
 8009152:	6323      	str	r3, [r4, #48]	; 0x30
 8009154:	bd10      	pop	{r4, pc}
 8009156:	bf00      	nop
 8009158:	08009329 	.word	0x08009329
 800915c:	0800934b 	.word	0x0800934b
 8009160:	08009383 	.word	0x08009383
 8009164:	080093a7 	.word	0x080093a7

08009168 <stdio_exit_handler>:
 8009168:	4a02      	ldr	r2, [pc, #8]	; (8009174 <stdio_exit_handler+0xc>)
 800916a:	4903      	ldr	r1, [pc, #12]	; (8009178 <stdio_exit_handler+0x10>)
 800916c:	4803      	ldr	r0, [pc, #12]	; (800917c <stdio_exit_handler+0x14>)
 800916e:	f000 b869 	b.w	8009244 <_fwalk_sglue>
 8009172:	bf00      	nop
 8009174:	20000034 	.word	0x20000034
 8009178:	08009db5 	.word	0x08009db5
 800917c:	20000040 	.word	0x20000040

08009180 <cleanup_stdio>:
 8009180:	6841      	ldr	r1, [r0, #4]
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <cleanup_stdio+0x34>)
 8009184:	b510      	push	{r4, lr}
 8009186:	4299      	cmp	r1, r3
 8009188:	4604      	mov	r4, r0
 800918a:	d001      	beq.n	8009190 <cleanup_stdio+0x10>
 800918c:	f000 fe12 	bl	8009db4 <_fflush_r>
 8009190:	68a1      	ldr	r1, [r4, #8]
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <cleanup_stdio+0x38>)
 8009194:	4299      	cmp	r1, r3
 8009196:	d002      	beq.n	800919e <cleanup_stdio+0x1e>
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fe0b 	bl	8009db4 <_fflush_r>
 800919e:	68e1      	ldr	r1, [r4, #12]
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <cleanup_stdio+0x3c>)
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d004      	beq.n	80091b0 <cleanup_stdio+0x30>
 80091a6:	4620      	mov	r0, r4
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f000 be02 	b.w	8009db4 <_fflush_r>
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	2000286c 	.word	0x2000286c
 80091b8:	200028d4 	.word	0x200028d4
 80091bc:	2000293c 	.word	0x2000293c

080091c0 <global_stdio_init.part.0>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <global_stdio_init.part.0+0x30>)
 80091c4:	4c0b      	ldr	r4, [pc, #44]	; (80091f4 <global_stdio_init.part.0+0x34>)
 80091c6:	4a0c      	ldr	r2, [pc, #48]	; (80091f8 <global_stdio_init.part.0+0x38>)
 80091c8:	4620      	mov	r0, r4
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	2104      	movs	r1, #4
 80091ce:	2200      	movs	r2, #0
 80091d0:	f7ff ffa6 	bl	8009120 <std>
 80091d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091d8:	2201      	movs	r2, #1
 80091da:	2109      	movs	r1, #9
 80091dc:	f7ff ffa0 	bl	8009120 <std>
 80091e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091e4:	2202      	movs	r2, #2
 80091e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ea:	2112      	movs	r1, #18
 80091ec:	f7ff bf98 	b.w	8009120 <std>
 80091f0:	200029a4 	.word	0x200029a4
 80091f4:	2000286c 	.word	0x2000286c
 80091f8:	08009169 	.word	0x08009169

080091fc <__sfp_lock_acquire>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sfp_lock_acquire+0x8>)
 80091fe:	f000 b94f 	b.w	80094a0 <__retarget_lock_acquire_recursive>
 8009202:	bf00      	nop
 8009204:	200029ad 	.word	0x200029ad

08009208 <__sfp_lock_release>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sfp_lock_release+0x8>)
 800920a:	f000 b94a 	b.w	80094a2 <__retarget_lock_release_recursive>
 800920e:	bf00      	nop
 8009210:	200029ad 	.word	0x200029ad

08009214 <__sinit>:
 8009214:	b510      	push	{r4, lr}
 8009216:	4604      	mov	r4, r0
 8009218:	f7ff fff0 	bl	80091fc <__sfp_lock_acquire>
 800921c:	6a23      	ldr	r3, [r4, #32]
 800921e:	b11b      	cbz	r3, 8009228 <__sinit+0x14>
 8009220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009224:	f7ff bff0 	b.w	8009208 <__sfp_lock_release>
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <__sinit+0x28>)
 800922a:	6223      	str	r3, [r4, #32]
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <__sinit+0x2c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f5      	bne.n	8009220 <__sinit+0xc>
 8009234:	f7ff ffc4 	bl	80091c0 <global_stdio_init.part.0>
 8009238:	e7f2      	b.n	8009220 <__sinit+0xc>
 800923a:	bf00      	nop
 800923c:	08009181 	.word	0x08009181
 8009240:	200029a4 	.word	0x200029a4

08009244 <_fwalk_sglue>:
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009248:	4607      	mov	r7, r0
 800924a:	4688      	mov	r8, r1
 800924c:	4614      	mov	r4, r2
 800924e:	2600      	movs	r6, #0
 8009250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009254:	f1b9 0901 	subs.w	r9, r9, #1
 8009258:	d505      	bpl.n	8009266 <_fwalk_sglue+0x22>
 800925a:	6824      	ldr	r4, [r4, #0]
 800925c:	2c00      	cmp	r4, #0
 800925e:	d1f7      	bne.n	8009250 <_fwalk_sglue+0xc>
 8009260:	4630      	mov	r0, r6
 8009262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d907      	bls.n	800927c <_fwalk_sglue+0x38>
 800926c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009270:	3301      	adds	r3, #1
 8009272:	d003      	beq.n	800927c <_fwalk_sglue+0x38>
 8009274:	4629      	mov	r1, r5
 8009276:	4638      	mov	r0, r7
 8009278:	47c0      	blx	r8
 800927a:	4306      	orrs	r6, r0
 800927c:	3568      	adds	r5, #104	; 0x68
 800927e:	e7e9      	b.n	8009254 <_fwalk_sglue+0x10>

08009280 <sniprintf>:
 8009280:	b40c      	push	{r2, r3}
 8009282:	b530      	push	{r4, r5, lr}
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <sniprintf+0x64>)
 8009286:	1e0c      	subs	r4, r1, #0
 8009288:	681d      	ldr	r5, [r3, #0]
 800928a:	b09d      	sub	sp, #116	; 0x74
 800928c:	da08      	bge.n	80092a0 <sniprintf+0x20>
 800928e:	238b      	movs	r3, #139	; 0x8b
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	b01d      	add	sp, #116	; 0x74
 8009298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800929c:	b002      	add	sp, #8
 800929e:	4770      	bx	lr
 80092a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092a8:	bf0c      	ite	eq
 80092aa:	4623      	moveq	r3, r4
 80092ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b8:	9002      	str	r0, [sp, #8]
 80092ba:	9006      	str	r0, [sp, #24]
 80092bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092c0:	4628      	mov	r0, r5
 80092c2:	ab21      	add	r3, sp, #132	; 0x84
 80092c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092c6:	a902      	add	r1, sp, #8
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f000 fa5f 	bl	800978c <_svfiprintf_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	bfbc      	itt	lt
 80092d2:	238b      	movlt	r3, #139	; 0x8b
 80092d4:	602b      	strlt	r3, [r5, #0]
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d0dd      	beq.n	8009296 <sniprintf+0x16>
 80092da:	2200      	movs	r2, #0
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e7d9      	b.n	8009296 <sniprintf+0x16>
 80092e2:	bf00      	nop
 80092e4:	2000008c 	.word	0x2000008c

080092e8 <siprintf>:
 80092e8:	b40e      	push	{r1, r2, r3}
 80092ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092ee:	b500      	push	{lr}
 80092f0:	b09c      	sub	sp, #112	; 0x70
 80092f2:	ab1d      	add	r3, sp, #116	; 0x74
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	9006      	str	r0, [sp, #24]
 80092f8:	9107      	str	r1, [sp, #28]
 80092fa:	9104      	str	r1, [sp, #16]
 80092fc:	4808      	ldr	r0, [pc, #32]	; (8009320 <siprintf+0x38>)
 80092fe:	4909      	ldr	r1, [pc, #36]	; (8009324 <siprintf+0x3c>)
 8009300:	f853 2b04 	ldr.w	r2, [r3], #4
 8009304:	9105      	str	r1, [sp, #20]
 8009306:	6800      	ldr	r0, [r0, #0]
 8009308:	a902      	add	r1, sp, #8
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	f000 fa3e 	bl	800978c <_svfiprintf_r>
 8009310:	2200      	movs	r2, #0
 8009312:	9b02      	ldr	r3, [sp, #8]
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	b01c      	add	sp, #112	; 0x70
 8009318:	f85d eb04 	ldr.w	lr, [sp], #4
 800931c:	b003      	add	sp, #12
 800931e:	4770      	bx	lr
 8009320:	2000008c 	.word	0x2000008c
 8009324:	ffff0208 	.word	0xffff0208

08009328 <__sread>:
 8009328:	b510      	push	{r4, lr}
 800932a:	460c      	mov	r4, r1
 800932c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009330:	f000 f868 	bl	8009404 <_read_r>
 8009334:	2800      	cmp	r0, #0
 8009336:	bfab      	itete	ge
 8009338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800933a:	89a3      	ldrhlt	r3, [r4, #12]
 800933c:	181b      	addge	r3, r3, r0
 800933e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009342:	bfac      	ite	ge
 8009344:	6563      	strge	r3, [r4, #84]	; 0x54
 8009346:	81a3      	strhlt	r3, [r4, #12]
 8009348:	bd10      	pop	{r4, pc}

0800934a <__swrite>:
 800934a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800934e:	461f      	mov	r7, r3
 8009350:	898b      	ldrh	r3, [r1, #12]
 8009352:	4605      	mov	r5, r0
 8009354:	05db      	lsls	r3, r3, #23
 8009356:	460c      	mov	r4, r1
 8009358:	4616      	mov	r6, r2
 800935a:	d505      	bpl.n	8009368 <__swrite+0x1e>
 800935c:	2302      	movs	r3, #2
 800935e:	2200      	movs	r2, #0
 8009360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009364:	f000 f83c 	bl	80093e0 <_lseek_r>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	4632      	mov	r2, r6
 800936c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	4628      	mov	r0, r5
 8009374:	463b      	mov	r3, r7
 8009376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	f000 b853 	b.w	8009428 <_write_r>

08009382 <__sseek>:
 8009382:	b510      	push	{r4, lr}
 8009384:	460c      	mov	r4, r1
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	f000 f829 	bl	80093e0 <_lseek_r>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	bf15      	itete	ne
 8009394:	6560      	strne	r0, [r4, #84]	; 0x54
 8009396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800939a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800939e:	81a3      	strheq	r3, [r4, #12]
 80093a0:	bf18      	it	ne
 80093a2:	81a3      	strhne	r3, [r4, #12]
 80093a4:	bd10      	pop	{r4, pc}

080093a6 <__sclose>:
 80093a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093aa:	f000 b809 	b.w	80093c0 <_close_r>

080093ae <memset>:
 80093ae:	4603      	mov	r3, r0
 80093b0:	4402      	add	r2, r0
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d100      	bne.n	80093b8 <memset+0xa>
 80093b6:	4770      	bx	lr
 80093b8:	f803 1b01 	strb.w	r1, [r3], #1
 80093bc:	e7f9      	b.n	80093b2 <memset+0x4>
	...

080093c0 <_close_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	2300      	movs	r3, #0
 80093c4:	4d05      	ldr	r5, [pc, #20]	; (80093dc <_close_r+0x1c>)
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f9 f9aa 	bl	8002724 <_close>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_close_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_close_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	200029a8 	.word	0x200029a8

080093e0 <_lseek_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	2200      	movs	r2, #0
 80093ea:	4d05      	ldr	r5, [pc, #20]	; (8009400 <_lseek_r+0x20>)
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f9 f9bc 	bl	800276c <_lseek>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_lseek_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_lseek_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	200029a8 	.word	0x200029a8

08009404 <_read_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	2200      	movs	r2, #0
 800940e:	4d05      	ldr	r5, [pc, #20]	; (8009424 <_read_r+0x20>)
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f9 f94d 	bl	80026b2 <_read>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_read_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_read_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	200029a8 	.word	0x200029a8

08009428 <_write_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	4611      	mov	r1, r2
 8009430:	2200      	movs	r2, #0
 8009432:	4d05      	ldr	r5, [pc, #20]	; (8009448 <_write_r+0x20>)
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f9 f958 	bl	80026ec <_write>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_write_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_write_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	200029a8 	.word	0x200029a8

0800944c <__errno>:
 800944c:	4b01      	ldr	r3, [pc, #4]	; (8009454 <__errno+0x8>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	2000008c 	.word	0x2000008c

08009458 <__libc_init_array>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	2600      	movs	r6, #0
 800945c:	4d0c      	ldr	r5, [pc, #48]	; (8009490 <__libc_init_array+0x38>)
 800945e:	4c0d      	ldr	r4, [pc, #52]	; (8009494 <__libc_init_array+0x3c>)
 8009460:	1b64      	subs	r4, r4, r5
 8009462:	10a4      	asrs	r4, r4, #2
 8009464:	42a6      	cmp	r6, r4
 8009466:	d109      	bne.n	800947c <__libc_init_array+0x24>
 8009468:	f001 f802 	bl	800a470 <_init>
 800946c:	2600      	movs	r6, #0
 800946e:	4d0a      	ldr	r5, [pc, #40]	; (8009498 <__libc_init_array+0x40>)
 8009470:	4c0a      	ldr	r4, [pc, #40]	; (800949c <__libc_init_array+0x44>)
 8009472:	1b64      	subs	r4, r4, r5
 8009474:	10a4      	asrs	r4, r4, #2
 8009476:	42a6      	cmp	r6, r4
 8009478:	d105      	bne.n	8009486 <__libc_init_array+0x2e>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009480:	4798      	blx	r3
 8009482:	3601      	adds	r6, #1
 8009484:	e7ee      	b.n	8009464 <__libc_init_array+0xc>
 8009486:	f855 3b04 	ldr.w	r3, [r5], #4
 800948a:	4798      	blx	r3
 800948c:	3601      	adds	r6, #1
 800948e:	e7f2      	b.n	8009476 <__libc_init_array+0x1e>
 8009490:	0800c124 	.word	0x0800c124
 8009494:	0800c124 	.word	0x0800c124
 8009498:	0800c124 	.word	0x0800c124
 800949c:	0800c128 	.word	0x0800c128

080094a0 <__retarget_lock_acquire_recursive>:
 80094a0:	4770      	bx	lr

080094a2 <__retarget_lock_release_recursive>:
 80094a2:	4770      	bx	lr

080094a4 <__assert_func>:
 80094a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094a6:	4614      	mov	r4, r2
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <__assert_func+0x2c>)
 80094ac:	4605      	mov	r5, r0
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68d8      	ldr	r0, [r3, #12]
 80094b2:	b14c      	cbz	r4, 80094c8 <__assert_func+0x24>
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <__assert_func+0x30>)
 80094b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094ba:	9100      	str	r1, [sp, #0]
 80094bc:	462b      	mov	r3, r5
 80094be:	4906      	ldr	r1, [pc, #24]	; (80094d8 <__assert_func+0x34>)
 80094c0:	f000 fca0 	bl	8009e04 <fiprintf>
 80094c4:	f000 fcf6 	bl	8009eb4 <abort>
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <__assert_func+0x38>)
 80094ca:	461c      	mov	r4, r3
 80094cc:	e7f3      	b.n	80094b6 <__assert_func+0x12>
 80094ce:	bf00      	nop
 80094d0:	2000008c 	.word	0x2000008c
 80094d4:	0800c0b3 	.word	0x0800c0b3
 80094d8:	0800c0c0 	.word	0x0800c0c0
 80094dc:	0800c0ee 	.word	0x0800c0ee

080094e0 <_free_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4605      	mov	r5, r0
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d040      	beq.n	800956a <_free_r+0x8a>
 80094e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ec:	1f0c      	subs	r4, r1, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	f000 f8e4 	bl	80096c0 <__malloc_lock>
 80094f8:	4a1c      	ldr	r2, [pc, #112]	; (800956c <_free_r+0x8c>)
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	b933      	cbnz	r3, 800950c <_free_r+0x2c>
 80094fe:	6063      	str	r3, [r4, #4]
 8009500:	6014      	str	r4, [r2, #0]
 8009502:	4628      	mov	r0, r5
 8009504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009508:	f000 b8e0 	b.w	80096cc <__malloc_unlock>
 800950c:	42a3      	cmp	r3, r4
 800950e:	d908      	bls.n	8009522 <_free_r+0x42>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	1821      	adds	r1, r4, r0
 8009514:	428b      	cmp	r3, r1
 8009516:	bf01      	itttt	eq
 8009518:	6819      	ldreq	r1, [r3, #0]
 800951a:	685b      	ldreq	r3, [r3, #4]
 800951c:	1809      	addeq	r1, r1, r0
 800951e:	6021      	streq	r1, [r4, #0]
 8009520:	e7ed      	b.n	80094fe <_free_r+0x1e>
 8009522:	461a      	mov	r2, r3
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	b10b      	cbz	r3, 800952c <_free_r+0x4c>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d9fa      	bls.n	8009522 <_free_r+0x42>
 800952c:	6811      	ldr	r1, [r2, #0]
 800952e:	1850      	adds	r0, r2, r1
 8009530:	42a0      	cmp	r0, r4
 8009532:	d10b      	bne.n	800954c <_free_r+0x6c>
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	4401      	add	r1, r0
 8009538:	1850      	adds	r0, r2, r1
 800953a:	4283      	cmp	r3, r0
 800953c:	6011      	str	r1, [r2, #0]
 800953e:	d1e0      	bne.n	8009502 <_free_r+0x22>
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	4408      	add	r0, r1
 8009546:	6010      	str	r0, [r2, #0]
 8009548:	6053      	str	r3, [r2, #4]
 800954a:	e7da      	b.n	8009502 <_free_r+0x22>
 800954c:	d902      	bls.n	8009554 <_free_r+0x74>
 800954e:	230c      	movs	r3, #12
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	e7d6      	b.n	8009502 <_free_r+0x22>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	1821      	adds	r1, r4, r0
 8009558:	428b      	cmp	r3, r1
 800955a:	bf01      	itttt	eq
 800955c:	6819      	ldreq	r1, [r3, #0]
 800955e:	685b      	ldreq	r3, [r3, #4]
 8009560:	1809      	addeq	r1, r1, r0
 8009562:	6021      	streq	r1, [r4, #0]
 8009564:	6063      	str	r3, [r4, #4]
 8009566:	6054      	str	r4, [r2, #4]
 8009568:	e7cb      	b.n	8009502 <_free_r+0x22>
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	200029b0 	.word	0x200029b0

08009570 <malloc>:
 8009570:	4b02      	ldr	r3, [pc, #8]	; (800957c <malloc+0xc>)
 8009572:	4601      	mov	r1, r0
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	f000 b823 	b.w	80095c0 <_malloc_r>
 800957a:	bf00      	nop
 800957c:	2000008c 	.word	0x2000008c

08009580 <sbrk_aligned>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4e0e      	ldr	r6, [pc, #56]	; (80095bc <sbrk_aligned+0x3c>)
 8009584:	460c      	mov	r4, r1
 8009586:	6831      	ldr	r1, [r6, #0]
 8009588:	4605      	mov	r5, r0
 800958a:	b911      	cbnz	r1, 8009592 <sbrk_aligned+0x12>
 800958c:	f000 fc66 	bl	8009e5c <_sbrk_r>
 8009590:	6030      	str	r0, [r6, #0]
 8009592:	4621      	mov	r1, r4
 8009594:	4628      	mov	r0, r5
 8009596:	f000 fc61 	bl	8009e5c <_sbrk_r>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d00a      	beq.n	80095b4 <sbrk_aligned+0x34>
 800959e:	1cc4      	adds	r4, r0, #3
 80095a0:	f024 0403 	bic.w	r4, r4, #3
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d007      	beq.n	80095b8 <sbrk_aligned+0x38>
 80095a8:	1a21      	subs	r1, r4, r0
 80095aa:	4628      	mov	r0, r5
 80095ac:	f000 fc56 	bl	8009e5c <_sbrk_r>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d101      	bne.n	80095b8 <sbrk_aligned+0x38>
 80095b4:	f04f 34ff 	mov.w	r4, #4294967295
 80095b8:	4620      	mov	r0, r4
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	200029b4 	.word	0x200029b4

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4607      	mov	r7, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d905      	bls.n	80095e8 <_malloc_r+0x28>
 80095dc:	230c      	movs	r3, #12
 80095de:	2600      	movs	r6, #0
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	4630      	mov	r0, r6
 80095e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096bc <_malloc_r+0xfc>
 80095ec:	f000 f868 	bl	80096c0 <__malloc_lock>
 80095f0:	f8d8 3000 	ldr.w	r3, [r8]
 80095f4:	461c      	mov	r4, r3
 80095f6:	bb5c      	cbnz	r4, 8009650 <_malloc_r+0x90>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7ff ffc0 	bl	8009580 <sbrk_aligned>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	4604      	mov	r4, r0
 8009604:	d155      	bne.n	80096b2 <_malloc_r+0xf2>
 8009606:	f8d8 4000 	ldr.w	r4, [r8]
 800960a:	4626      	mov	r6, r4
 800960c:	2e00      	cmp	r6, #0
 800960e:	d145      	bne.n	800969c <_malloc_r+0xdc>
 8009610:	2c00      	cmp	r4, #0
 8009612:	d048      	beq.n	80096a6 <_malloc_r+0xe6>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	4631      	mov	r1, r6
 8009618:	4638      	mov	r0, r7
 800961a:	eb04 0903 	add.w	r9, r4, r3
 800961e:	f000 fc1d 	bl	8009e5c <_sbrk_r>
 8009622:	4581      	cmp	r9, r0
 8009624:	d13f      	bne.n	80096a6 <_malloc_r+0xe6>
 8009626:	6821      	ldr	r1, [r4, #0]
 8009628:	4638      	mov	r0, r7
 800962a:	1a6d      	subs	r5, r5, r1
 800962c:	4629      	mov	r1, r5
 800962e:	f7ff ffa7 	bl	8009580 <sbrk_aligned>
 8009632:	3001      	adds	r0, #1
 8009634:	d037      	beq.n	80096a6 <_malloc_r+0xe6>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	442b      	add	r3, r5
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	f8d8 3000 	ldr.w	r3, [r8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d038      	beq.n	80096b6 <_malloc_r+0xf6>
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	42a2      	cmp	r2, r4
 8009648:	d12b      	bne.n	80096a2 <_malloc_r+0xe2>
 800964a:	2200      	movs	r2, #0
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	e00f      	b.n	8009670 <_malloc_r+0xb0>
 8009650:	6822      	ldr	r2, [r4, #0]
 8009652:	1b52      	subs	r2, r2, r5
 8009654:	d41f      	bmi.n	8009696 <_malloc_r+0xd6>
 8009656:	2a0b      	cmp	r2, #11
 8009658:	d917      	bls.n	800968a <_malloc_r+0xca>
 800965a:	1961      	adds	r1, r4, r5
 800965c:	42a3      	cmp	r3, r4
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	bf18      	it	ne
 8009662:	6059      	strne	r1, [r3, #4]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	bf08      	it	eq
 8009668:	f8c8 1000 	streq.w	r1, [r8]
 800966c:	5162      	str	r2, [r4, r5]
 800966e:	604b      	str	r3, [r1, #4]
 8009670:	4638      	mov	r0, r7
 8009672:	f104 060b 	add.w	r6, r4, #11
 8009676:	f000 f829 	bl	80096cc <__malloc_unlock>
 800967a:	f026 0607 	bic.w	r6, r6, #7
 800967e:	1d23      	adds	r3, r4, #4
 8009680:	1af2      	subs	r2, r6, r3
 8009682:	d0ae      	beq.n	80095e2 <_malloc_r+0x22>
 8009684:	1b9b      	subs	r3, r3, r6
 8009686:	50a3      	str	r3, [r4, r2]
 8009688:	e7ab      	b.n	80095e2 <_malloc_r+0x22>
 800968a:	42a3      	cmp	r3, r4
 800968c:	6862      	ldr	r2, [r4, #4]
 800968e:	d1dd      	bne.n	800964c <_malloc_r+0x8c>
 8009690:	f8c8 2000 	str.w	r2, [r8]
 8009694:	e7ec      	b.n	8009670 <_malloc_r+0xb0>
 8009696:	4623      	mov	r3, r4
 8009698:	6864      	ldr	r4, [r4, #4]
 800969a:	e7ac      	b.n	80095f6 <_malloc_r+0x36>
 800969c:	4634      	mov	r4, r6
 800969e:	6876      	ldr	r6, [r6, #4]
 80096a0:	e7b4      	b.n	800960c <_malloc_r+0x4c>
 80096a2:	4613      	mov	r3, r2
 80096a4:	e7cc      	b.n	8009640 <_malloc_r+0x80>
 80096a6:	230c      	movs	r3, #12
 80096a8:	4638      	mov	r0, r7
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	f000 f80e 	bl	80096cc <__malloc_unlock>
 80096b0:	e797      	b.n	80095e2 <_malloc_r+0x22>
 80096b2:	6025      	str	r5, [r4, #0]
 80096b4:	e7dc      	b.n	8009670 <_malloc_r+0xb0>
 80096b6:	605b      	str	r3, [r3, #4]
 80096b8:	deff      	udf	#255	; 0xff
 80096ba:	bf00      	nop
 80096bc:	200029b0 	.word	0x200029b0

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__malloc_lock+0x8>)
 80096c2:	f7ff beed 	b.w	80094a0 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	200029ac 	.word	0x200029ac

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f7ff bee8 	b.w	80094a2 <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	200029ac 	.word	0x200029ac

080096d8 <__ssputs_r>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	461f      	mov	r7, r3
 80096de:	688e      	ldr	r6, [r1, #8]
 80096e0:	4682      	mov	sl, r0
 80096e2:	42be      	cmp	r6, r7
 80096e4:	460c      	mov	r4, r1
 80096e6:	4690      	mov	r8, r2
 80096e8:	680b      	ldr	r3, [r1, #0]
 80096ea:	d82c      	bhi.n	8009746 <__ssputs_r+0x6e>
 80096ec:	898a      	ldrh	r2, [r1, #12]
 80096ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096f2:	d026      	beq.n	8009742 <__ssputs_r+0x6a>
 80096f4:	6965      	ldr	r5, [r4, #20]
 80096f6:	6909      	ldr	r1, [r1, #16]
 80096f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096fc:	eba3 0901 	sub.w	r9, r3, r1
 8009700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009704:	1c7b      	adds	r3, r7, #1
 8009706:	444b      	add	r3, r9
 8009708:	106d      	asrs	r5, r5, #1
 800970a:	429d      	cmp	r5, r3
 800970c:	bf38      	it	cc
 800970e:	461d      	movcc	r5, r3
 8009710:	0553      	lsls	r3, r2, #21
 8009712:	d527      	bpl.n	8009764 <__ssputs_r+0x8c>
 8009714:	4629      	mov	r1, r5
 8009716:	f7ff ff53 	bl	80095c0 <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b360      	cbz	r0, 8009778 <__ssputs_r+0xa0>
 800971e:	464a      	mov	r2, r9
 8009720:	6921      	ldr	r1, [r4, #16]
 8009722:	f000 fbb9 	bl	8009e98 <memcpy>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	6126      	str	r6, [r4, #16]
 8009734:	444e      	add	r6, r9
 8009736:	6026      	str	r6, [r4, #0]
 8009738:	463e      	mov	r6, r7
 800973a:	6165      	str	r5, [r4, #20]
 800973c:	eba5 0509 	sub.w	r5, r5, r9
 8009740:	60a5      	str	r5, [r4, #8]
 8009742:	42be      	cmp	r6, r7
 8009744:	d900      	bls.n	8009748 <__ssputs_r+0x70>
 8009746:	463e      	mov	r6, r7
 8009748:	4632      	mov	r2, r6
 800974a:	4641      	mov	r1, r8
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	f000 fb6b 	bl	8009e28 <memmove>
 8009752:	2000      	movs	r0, #0
 8009754:	68a3      	ldr	r3, [r4, #8]
 8009756:	1b9b      	subs	r3, r3, r6
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	4433      	add	r3, r6
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	462a      	mov	r2, r5
 8009766:	f000 fbac 	bl	8009ec2 <_realloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	2800      	cmp	r0, #0
 800976e:	d1e0      	bne.n	8009732 <__ssputs_r+0x5a>
 8009770:	4650      	mov	r0, sl
 8009772:	6921      	ldr	r1, [r4, #16]
 8009774:	f7ff feb4 	bl	80094e0 <_free_r>
 8009778:	230c      	movs	r3, #12
 800977a:	f8ca 3000 	str.w	r3, [sl]
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	e7e9      	b.n	8009760 <__ssputs_r+0x88>

0800978c <_svfiprintf_r>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	4698      	mov	r8, r3
 8009792:	898b      	ldrh	r3, [r1, #12]
 8009794:	4607      	mov	r7, r0
 8009796:	061b      	lsls	r3, r3, #24
 8009798:	460d      	mov	r5, r1
 800979a:	4614      	mov	r4, r2
 800979c:	b09d      	sub	sp, #116	; 0x74
 800979e:	d50e      	bpl.n	80097be <_svfiprintf_r+0x32>
 80097a0:	690b      	ldr	r3, [r1, #16]
 80097a2:	b963      	cbnz	r3, 80097be <_svfiprintf_r+0x32>
 80097a4:	2140      	movs	r1, #64	; 0x40
 80097a6:	f7ff ff0b 	bl	80095c0 <_malloc_r>
 80097aa:	6028      	str	r0, [r5, #0]
 80097ac:	6128      	str	r0, [r5, #16]
 80097ae:	b920      	cbnz	r0, 80097ba <_svfiprintf_r+0x2e>
 80097b0:	230c      	movs	r3, #12
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	e0d0      	b.n	800995c <_svfiprintf_r+0x1d0>
 80097ba:	2340      	movs	r3, #64	; 0x40
 80097bc:	616b      	str	r3, [r5, #20]
 80097be:	2300      	movs	r3, #0
 80097c0:	9309      	str	r3, [sp, #36]	; 0x24
 80097c2:	2320      	movs	r3, #32
 80097c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097c8:	2330      	movs	r3, #48	; 0x30
 80097ca:	f04f 0901 	mov.w	r9, #1
 80097ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009974 <_svfiprintf_r+0x1e8>
 80097d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097da:	4623      	mov	r3, r4
 80097dc:	469a      	mov	sl, r3
 80097de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e2:	b10a      	cbz	r2, 80097e8 <_svfiprintf_r+0x5c>
 80097e4:	2a25      	cmp	r2, #37	; 0x25
 80097e6:	d1f9      	bne.n	80097dc <_svfiprintf_r+0x50>
 80097e8:	ebba 0b04 	subs.w	fp, sl, r4
 80097ec:	d00b      	beq.n	8009806 <_svfiprintf_r+0x7a>
 80097ee:	465b      	mov	r3, fp
 80097f0:	4622      	mov	r2, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7ff ff6f 	bl	80096d8 <__ssputs_r>
 80097fa:	3001      	adds	r0, #1
 80097fc:	f000 80a9 	beq.w	8009952 <_svfiprintf_r+0x1c6>
 8009800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009802:	445a      	add	r2, fp
 8009804:	9209      	str	r2, [sp, #36]	; 0x24
 8009806:	f89a 3000 	ldrb.w	r3, [sl]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80a1 	beq.w	8009952 <_svfiprintf_r+0x1c6>
 8009810:	2300      	movs	r3, #0
 8009812:	f04f 32ff 	mov.w	r2, #4294967295
 8009816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800981a:	f10a 0a01 	add.w	sl, sl, #1
 800981e:	9304      	str	r3, [sp, #16]
 8009820:	9307      	str	r3, [sp, #28]
 8009822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009826:	931a      	str	r3, [sp, #104]	; 0x68
 8009828:	4654      	mov	r4, sl
 800982a:	2205      	movs	r2, #5
 800982c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009830:	4850      	ldr	r0, [pc, #320]	; (8009974 <_svfiprintf_r+0x1e8>)
 8009832:	f000 fb23 	bl	8009e7c <memchr>
 8009836:	9a04      	ldr	r2, [sp, #16]
 8009838:	b9d8      	cbnz	r0, 8009872 <_svfiprintf_r+0xe6>
 800983a:	06d0      	lsls	r0, r2, #27
 800983c:	bf44      	itt	mi
 800983e:	2320      	movmi	r3, #32
 8009840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009844:	0711      	lsls	r1, r2, #28
 8009846:	bf44      	itt	mi
 8009848:	232b      	movmi	r3, #43	; 0x2b
 800984a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800984e:	f89a 3000 	ldrb.w	r3, [sl]
 8009852:	2b2a      	cmp	r3, #42	; 0x2a
 8009854:	d015      	beq.n	8009882 <_svfiprintf_r+0xf6>
 8009856:	4654      	mov	r4, sl
 8009858:	2000      	movs	r0, #0
 800985a:	f04f 0c0a 	mov.w	ip, #10
 800985e:	9a07      	ldr	r2, [sp, #28]
 8009860:	4621      	mov	r1, r4
 8009862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009866:	3b30      	subs	r3, #48	; 0x30
 8009868:	2b09      	cmp	r3, #9
 800986a:	d94d      	bls.n	8009908 <_svfiprintf_r+0x17c>
 800986c:	b1b0      	cbz	r0, 800989c <_svfiprintf_r+0x110>
 800986e:	9207      	str	r2, [sp, #28]
 8009870:	e014      	b.n	800989c <_svfiprintf_r+0x110>
 8009872:	eba0 0308 	sub.w	r3, r0, r8
 8009876:	fa09 f303 	lsl.w	r3, r9, r3
 800987a:	4313      	orrs	r3, r2
 800987c:	46a2      	mov	sl, r4
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	e7d2      	b.n	8009828 <_svfiprintf_r+0x9c>
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	1d19      	adds	r1, r3, #4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	9103      	str	r1, [sp, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	bfbb      	ittet	lt
 800988e:	425b      	neglt	r3, r3
 8009890:	f042 0202 	orrlt.w	r2, r2, #2
 8009894:	9307      	strge	r3, [sp, #28]
 8009896:	9307      	strlt	r3, [sp, #28]
 8009898:	bfb8      	it	lt
 800989a:	9204      	strlt	r2, [sp, #16]
 800989c:	7823      	ldrb	r3, [r4, #0]
 800989e:	2b2e      	cmp	r3, #46	; 0x2e
 80098a0:	d10c      	bne.n	80098bc <_svfiprintf_r+0x130>
 80098a2:	7863      	ldrb	r3, [r4, #1]
 80098a4:	2b2a      	cmp	r3, #42	; 0x2a
 80098a6:	d134      	bne.n	8009912 <_svfiprintf_r+0x186>
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	3402      	adds	r4, #2
 80098ac:	1d1a      	adds	r2, r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	9203      	str	r2, [sp, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bfb8      	it	lt
 80098b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ba:	9305      	str	r3, [sp, #20]
 80098bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009978 <_svfiprintf_r+0x1ec>
 80098c0:	2203      	movs	r2, #3
 80098c2:	4650      	mov	r0, sl
 80098c4:	7821      	ldrb	r1, [r4, #0]
 80098c6:	f000 fad9 	bl	8009e7c <memchr>
 80098ca:	b138      	cbz	r0, 80098dc <_svfiprintf_r+0x150>
 80098cc:	2240      	movs	r2, #64	; 0x40
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	eba0 000a 	sub.w	r0, r0, sl
 80098d4:	4082      	lsls	r2, r0
 80098d6:	4313      	orrs	r3, r2
 80098d8:	3401      	adds	r4, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e0:	2206      	movs	r2, #6
 80098e2:	4826      	ldr	r0, [pc, #152]	; (800997c <_svfiprintf_r+0x1f0>)
 80098e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e8:	f000 fac8 	bl	8009e7c <memchr>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d038      	beq.n	8009962 <_svfiprintf_r+0x1d6>
 80098f0:	4b23      	ldr	r3, [pc, #140]	; (8009980 <_svfiprintf_r+0x1f4>)
 80098f2:	bb1b      	cbnz	r3, 800993c <_svfiprintf_r+0x1b0>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	3307      	adds	r3, #7
 80098f8:	f023 0307 	bic.w	r3, r3, #7
 80098fc:	3308      	adds	r3, #8
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009902:	4433      	add	r3, r6
 8009904:	9309      	str	r3, [sp, #36]	; 0x24
 8009906:	e768      	b.n	80097da <_svfiprintf_r+0x4e>
 8009908:	460c      	mov	r4, r1
 800990a:	2001      	movs	r0, #1
 800990c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009910:	e7a6      	b.n	8009860 <_svfiprintf_r+0xd4>
 8009912:	2300      	movs	r3, #0
 8009914:	f04f 0c0a 	mov.w	ip, #10
 8009918:	4619      	mov	r1, r3
 800991a:	3401      	adds	r4, #1
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	4620      	mov	r0, r4
 8009920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009924:	3a30      	subs	r2, #48	; 0x30
 8009926:	2a09      	cmp	r2, #9
 8009928:	d903      	bls.n	8009932 <_svfiprintf_r+0x1a6>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0c6      	beq.n	80098bc <_svfiprintf_r+0x130>
 800992e:	9105      	str	r1, [sp, #20]
 8009930:	e7c4      	b.n	80098bc <_svfiprintf_r+0x130>
 8009932:	4604      	mov	r4, r0
 8009934:	2301      	movs	r3, #1
 8009936:	fb0c 2101 	mla	r1, ip, r1, r2
 800993a:	e7f0      	b.n	800991e <_svfiprintf_r+0x192>
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	462a      	mov	r2, r5
 8009942:	4638      	mov	r0, r7
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <_svfiprintf_r+0x1f8>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	f3af 8000 	nop.w
 800994c:	1c42      	adds	r2, r0, #1
 800994e:	4606      	mov	r6, r0
 8009950:	d1d6      	bne.n	8009900 <_svfiprintf_r+0x174>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	065b      	lsls	r3, r3, #25
 8009956:	f53f af2d 	bmi.w	80097b4 <_svfiprintf_r+0x28>
 800995a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995c:	b01d      	add	sp, #116	; 0x74
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009962:	ab03      	add	r3, sp, #12
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	462a      	mov	r2, r5
 8009968:	4638      	mov	r0, r7
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <_svfiprintf_r+0x1f8>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	f000 f87d 	bl	8009a6c <_printf_i>
 8009972:	e7eb      	b.n	800994c <_svfiprintf_r+0x1c0>
 8009974:	0800c0ef 	.word	0x0800c0ef
 8009978:	0800c0f5 	.word	0x0800c0f5
 800997c:	0800c0f9 	.word	0x0800c0f9
 8009980:	00000000 	.word	0x00000000
 8009984:	080096d9 	.word	0x080096d9

08009988 <_printf_common>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	4616      	mov	r6, r2
 800998e:	4699      	mov	r9, r3
 8009990:	688a      	ldr	r2, [r1, #8]
 8009992:	690b      	ldr	r3, [r1, #16]
 8009994:	4607      	mov	r7, r0
 8009996:	4293      	cmp	r3, r2
 8009998:	bfb8      	it	lt
 800999a:	4613      	movlt	r3, r2
 800999c:	6033      	str	r3, [r6, #0]
 800999e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099a2:	460c      	mov	r4, r1
 80099a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a8:	b10a      	cbz	r2, 80099ae <_printf_common+0x26>
 80099aa:	3301      	adds	r3, #1
 80099ac:	6033      	str	r3, [r6, #0]
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	0699      	lsls	r1, r3, #26
 80099b2:	bf42      	ittt	mi
 80099b4:	6833      	ldrmi	r3, [r6, #0]
 80099b6:	3302      	addmi	r3, #2
 80099b8:	6033      	strmi	r3, [r6, #0]
 80099ba:	6825      	ldr	r5, [r4, #0]
 80099bc:	f015 0506 	ands.w	r5, r5, #6
 80099c0:	d106      	bne.n	80099d0 <_printf_common+0x48>
 80099c2:	f104 0a19 	add.w	sl, r4, #25
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	6832      	ldr	r2, [r6, #0]
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	dc2b      	bgt.n	8009a28 <_printf_common+0xa0>
 80099d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099d4:	1e13      	subs	r3, r2, #0
 80099d6:	6822      	ldr	r2, [r4, #0]
 80099d8:	bf18      	it	ne
 80099da:	2301      	movne	r3, #1
 80099dc:	0692      	lsls	r2, r2, #26
 80099de:	d430      	bmi.n	8009a42 <_printf_common+0xba>
 80099e0:	4649      	mov	r1, r9
 80099e2:	4638      	mov	r0, r7
 80099e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099e8:	47c0      	blx	r8
 80099ea:	3001      	adds	r0, #1
 80099ec:	d023      	beq.n	8009a36 <_printf_common+0xae>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	6922      	ldr	r2, [r4, #16]
 80099f2:	f003 0306 	and.w	r3, r3, #6
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	bf14      	ite	ne
 80099fa:	2500      	movne	r5, #0
 80099fc:	6833      	ldreq	r3, [r6, #0]
 80099fe:	f04f 0600 	mov.w	r6, #0
 8009a02:	bf08      	it	eq
 8009a04:	68e5      	ldreq	r5, [r4, #12]
 8009a06:	f104 041a 	add.w	r4, r4, #26
 8009a0a:	bf08      	it	eq
 8009a0c:	1aed      	subeq	r5, r5, r3
 8009a0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a12:	bf08      	it	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	bfc4      	itt	gt
 8009a1c:	1a9b      	subgt	r3, r3, r2
 8009a1e:	18ed      	addgt	r5, r5, r3
 8009a20:	42b5      	cmp	r5, r6
 8009a22:	d11a      	bne.n	8009a5a <_printf_common+0xd2>
 8009a24:	2000      	movs	r0, #0
 8009a26:	e008      	b.n	8009a3a <_printf_common+0xb2>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	4638      	mov	r0, r7
 8009a30:	47c0      	blx	r8
 8009a32:	3001      	adds	r0, #1
 8009a34:	d103      	bne.n	8009a3e <_printf_common+0xb6>
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3e:	3501      	adds	r5, #1
 8009a40:	e7c1      	b.n	80099c6 <_printf_common+0x3e>
 8009a42:	2030      	movs	r0, #48	; 0x30
 8009a44:	18e1      	adds	r1, r4, r3
 8009a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a50:	4422      	add	r2, r4
 8009a52:	3302      	adds	r3, #2
 8009a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a58:	e7c2      	b.n	80099e0 <_printf_common+0x58>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4638      	mov	r0, r7
 8009a62:	47c0      	blx	r8
 8009a64:	3001      	adds	r0, #1
 8009a66:	d0e6      	beq.n	8009a36 <_printf_common+0xae>
 8009a68:	3601      	adds	r6, #1
 8009a6a:	e7d9      	b.n	8009a20 <_printf_common+0x98>

08009a6c <_printf_i>:
 8009a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	7e0f      	ldrb	r7, [r1, #24]
 8009a72:	4691      	mov	r9, r2
 8009a74:	2f78      	cmp	r7, #120	; 0x78
 8009a76:	4680      	mov	r8, r0
 8009a78:	460c      	mov	r4, r1
 8009a7a:	469a      	mov	sl, r3
 8009a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a82:	d807      	bhi.n	8009a94 <_printf_i+0x28>
 8009a84:	2f62      	cmp	r7, #98	; 0x62
 8009a86:	d80a      	bhi.n	8009a9e <_printf_i+0x32>
 8009a88:	2f00      	cmp	r7, #0
 8009a8a:	f000 80d5 	beq.w	8009c38 <_printf_i+0x1cc>
 8009a8e:	2f58      	cmp	r7, #88	; 0x58
 8009a90:	f000 80c1 	beq.w	8009c16 <_printf_i+0x1aa>
 8009a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a9c:	e03a      	b.n	8009b14 <_printf_i+0xa8>
 8009a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aa2:	2b15      	cmp	r3, #21
 8009aa4:	d8f6      	bhi.n	8009a94 <_printf_i+0x28>
 8009aa6:	a101      	add	r1, pc, #4	; (adr r1, 8009aac <_printf_i+0x40>)
 8009aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009a95 	.word	0x08009a95
 8009ab8:	08009a95 	.word	0x08009a95
 8009abc:	08009a95 	.word	0x08009a95
 8009ac0:	08009a95 	.word	0x08009a95
 8009ac4:	08009b19 	.word	0x08009b19
 8009ac8:	08009a95 	.word	0x08009a95
 8009acc:	08009a95 	.word	0x08009a95
 8009ad0:	08009a95 	.word	0x08009a95
 8009ad4:	08009a95 	.word	0x08009a95
 8009ad8:	08009c1f 	.word	0x08009c1f
 8009adc:	08009b45 	.word	0x08009b45
 8009ae0:	08009bd9 	.word	0x08009bd9
 8009ae4:	08009a95 	.word	0x08009a95
 8009ae8:	08009a95 	.word	0x08009a95
 8009aec:	08009c41 	.word	0x08009c41
 8009af0:	08009a95 	.word	0x08009a95
 8009af4:	08009b45 	.word	0x08009b45
 8009af8:	08009a95 	.word	0x08009a95
 8009afc:	08009a95 	.word	0x08009a95
 8009b00:	08009be1 	.word	0x08009be1
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	1d1a      	adds	r2, r3, #4
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	602a      	str	r2, [r5, #0]
 8009b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0a0      	b.n	8009c5a <_printf_i+0x1ee>
 8009b18:	6820      	ldr	r0, [r4, #0]
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	0607      	lsls	r7, r0, #24
 8009b1e:	f103 0104 	add.w	r1, r3, #4
 8009b22:	6029      	str	r1, [r5, #0]
 8009b24:	d501      	bpl.n	8009b2a <_printf_i+0xbe>
 8009b26:	681e      	ldr	r6, [r3, #0]
 8009b28:	e003      	b.n	8009b32 <_printf_i+0xc6>
 8009b2a:	0646      	lsls	r6, r0, #25
 8009b2c:	d5fb      	bpl.n	8009b26 <_printf_i+0xba>
 8009b2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	da03      	bge.n	8009b3e <_printf_i+0xd2>
 8009b36:	232d      	movs	r3, #45	; 0x2d
 8009b38:	4276      	negs	r6, r6
 8009b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b3e:	230a      	movs	r3, #10
 8009b40:	4859      	ldr	r0, [pc, #356]	; (8009ca8 <_printf_i+0x23c>)
 8009b42:	e012      	b.n	8009b6a <_printf_i+0xfe>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	6820      	ldr	r0, [r4, #0]
 8009b48:	1d19      	adds	r1, r3, #4
 8009b4a:	6029      	str	r1, [r5, #0]
 8009b4c:	0605      	lsls	r5, r0, #24
 8009b4e:	d501      	bpl.n	8009b54 <_printf_i+0xe8>
 8009b50:	681e      	ldr	r6, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <_printf_i+0xee>
 8009b54:	0641      	lsls	r1, r0, #25
 8009b56:	d5fb      	bpl.n	8009b50 <_printf_i+0xe4>
 8009b58:	881e      	ldrh	r6, [r3, #0]
 8009b5a:	2f6f      	cmp	r7, #111	; 0x6f
 8009b5c:	bf0c      	ite	eq
 8009b5e:	2308      	moveq	r3, #8
 8009b60:	230a      	movne	r3, #10
 8009b62:	4851      	ldr	r0, [pc, #324]	; (8009ca8 <_printf_i+0x23c>)
 8009b64:	2100      	movs	r1, #0
 8009b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b6a:	6865      	ldr	r5, [r4, #4]
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	bfa8      	it	ge
 8009b70:	6821      	ldrge	r1, [r4, #0]
 8009b72:	60a5      	str	r5, [r4, #8]
 8009b74:	bfa4      	itt	ge
 8009b76:	f021 0104 	bicge.w	r1, r1, #4
 8009b7a:	6021      	strge	r1, [r4, #0]
 8009b7c:	b90e      	cbnz	r6, 8009b82 <_printf_i+0x116>
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	d04b      	beq.n	8009c1a <_printf_i+0x1ae>
 8009b82:	4615      	mov	r5, r2
 8009b84:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b88:	fb03 6711 	mls	r7, r3, r1, r6
 8009b8c:	5dc7      	ldrb	r7, [r0, r7]
 8009b8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b92:	4637      	mov	r7, r6
 8009b94:	42bb      	cmp	r3, r7
 8009b96:	460e      	mov	r6, r1
 8009b98:	d9f4      	bls.n	8009b84 <_printf_i+0x118>
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d10b      	bne.n	8009bb6 <_printf_i+0x14a>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	07de      	lsls	r6, r3, #31
 8009ba2:	d508      	bpl.n	8009bb6 <_printf_i+0x14a>
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	6861      	ldr	r1, [r4, #4]
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	bfde      	ittt	le
 8009bac:	2330      	movle	r3, #48	; 0x30
 8009bae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bb6:	1b52      	subs	r2, r2, r5
 8009bb8:	6122      	str	r2, [r4, #16]
 8009bba:	464b      	mov	r3, r9
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	f8cd a000 	str.w	sl, [sp]
 8009bc4:	aa03      	add	r2, sp, #12
 8009bc6:	f7ff fedf 	bl	8009988 <_printf_common>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d14a      	bne.n	8009c64 <_printf_i+0x1f8>
 8009bce:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd2:	b004      	add	sp, #16
 8009bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	f043 0320 	orr.w	r3, r3, #32
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	2778      	movs	r7, #120	; 0x78
 8009be2:	4832      	ldr	r0, [pc, #200]	; (8009cac <_printf_i+0x240>)
 8009be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	6829      	ldr	r1, [r5, #0]
 8009bec:	061f      	lsls	r7, r3, #24
 8009bee:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bf2:	d402      	bmi.n	8009bfa <_printf_i+0x18e>
 8009bf4:	065f      	lsls	r7, r3, #25
 8009bf6:	bf48      	it	mi
 8009bf8:	b2b6      	uxthmi	r6, r6
 8009bfa:	07df      	lsls	r7, r3, #31
 8009bfc:	bf48      	it	mi
 8009bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8009c02:	6029      	str	r1, [r5, #0]
 8009c04:	bf48      	it	mi
 8009c06:	6023      	strmi	r3, [r4, #0]
 8009c08:	b91e      	cbnz	r6, 8009c12 <_printf_i+0x1a6>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	f023 0320 	bic.w	r3, r3, #32
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	2310      	movs	r3, #16
 8009c14:	e7a6      	b.n	8009b64 <_printf_i+0xf8>
 8009c16:	4824      	ldr	r0, [pc, #144]	; (8009ca8 <_printf_i+0x23c>)
 8009c18:	e7e4      	b.n	8009be4 <_printf_i+0x178>
 8009c1a:	4615      	mov	r5, r2
 8009c1c:	e7bd      	b.n	8009b9a <_printf_i+0x12e>
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	6826      	ldr	r6, [r4, #0]
 8009c22:	1d18      	adds	r0, r3, #4
 8009c24:	6961      	ldr	r1, [r4, #20]
 8009c26:	6028      	str	r0, [r5, #0]
 8009c28:	0635      	lsls	r5, r6, #24
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	d501      	bpl.n	8009c32 <_printf_i+0x1c6>
 8009c2e:	6019      	str	r1, [r3, #0]
 8009c30:	e002      	b.n	8009c38 <_printf_i+0x1cc>
 8009c32:	0670      	lsls	r0, r6, #25
 8009c34:	d5fb      	bpl.n	8009c2e <_printf_i+0x1c2>
 8009c36:	8019      	strh	r1, [r3, #0]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4615      	mov	r5, r2
 8009c3c:	6123      	str	r3, [r4, #16]
 8009c3e:	e7bc      	b.n	8009bba <_printf_i+0x14e>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	2100      	movs	r1, #0
 8009c44:	1d1a      	adds	r2, r3, #4
 8009c46:	602a      	str	r2, [r5, #0]
 8009c48:	681d      	ldr	r5, [r3, #0]
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f000 f915 	bl	8009e7c <memchr>
 8009c52:	b108      	cbz	r0, 8009c58 <_printf_i+0x1ec>
 8009c54:	1b40      	subs	r0, r0, r5
 8009c56:	6060      	str	r0, [r4, #4]
 8009c58:	6863      	ldr	r3, [r4, #4]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c62:	e7aa      	b.n	8009bba <_printf_i+0x14e>
 8009c64:	462a      	mov	r2, r5
 8009c66:	4649      	mov	r1, r9
 8009c68:	4640      	mov	r0, r8
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	47d0      	blx	sl
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d0ad      	beq.n	8009bce <_printf_i+0x162>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	079b      	lsls	r3, r3, #30
 8009c76:	d413      	bmi.n	8009ca0 <_printf_i+0x234>
 8009c78:	68e0      	ldr	r0, [r4, #12]
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	4298      	cmp	r0, r3
 8009c7e:	bfb8      	it	lt
 8009c80:	4618      	movlt	r0, r3
 8009c82:	e7a6      	b.n	8009bd2 <_printf_i+0x166>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4632      	mov	r2, r6
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	47d0      	blx	sl
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d09d      	beq.n	8009bce <_printf_i+0x162>
 8009c92:	3501      	adds	r5, #1
 8009c94:	68e3      	ldr	r3, [r4, #12]
 8009c96:	9903      	ldr	r1, [sp, #12]
 8009c98:	1a5b      	subs	r3, r3, r1
 8009c9a:	42ab      	cmp	r3, r5
 8009c9c:	dcf2      	bgt.n	8009c84 <_printf_i+0x218>
 8009c9e:	e7eb      	b.n	8009c78 <_printf_i+0x20c>
 8009ca0:	2500      	movs	r5, #0
 8009ca2:	f104 0619 	add.w	r6, r4, #25
 8009ca6:	e7f5      	b.n	8009c94 <_printf_i+0x228>
 8009ca8:	0800c100 	.word	0x0800c100
 8009cac:	0800c111 	.word	0x0800c111

08009cb0 <__sflush_r>:
 8009cb0:	898a      	ldrh	r2, [r1, #12]
 8009cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	0710      	lsls	r0, r2, #28
 8009cb8:	460c      	mov	r4, r1
 8009cba:	d457      	bmi.n	8009d6c <__sflush_r+0xbc>
 8009cbc:	684b      	ldr	r3, [r1, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dc04      	bgt.n	8009ccc <__sflush_r+0x1c>
 8009cc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dc01      	bgt.n	8009ccc <__sflush_r+0x1c>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	d0fa      	beq.n	8009cc8 <__sflush_r+0x18>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cd8:	682f      	ldr	r7, [r5, #0]
 8009cda:	6a21      	ldr	r1, [r4, #32]
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	d032      	beq.n	8009d46 <__sflush_r+0x96>
 8009ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	075a      	lsls	r2, r3, #29
 8009ce6:	d505      	bpl.n	8009cf4 <__sflush_r+0x44>
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	1ac0      	subs	r0, r0, r3
 8009cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cee:	b10b      	cbz	r3, 8009cf4 <__sflush_r+0x44>
 8009cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf2:	1ac0      	subs	r0, r0, r3
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	6a21      	ldr	r1, [r4, #32]
 8009cfe:	47b0      	blx	r6
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	d106      	bne.n	8009d14 <__sflush_r+0x64>
 8009d06:	6829      	ldr	r1, [r5, #0]
 8009d08:	291d      	cmp	r1, #29
 8009d0a:	d82b      	bhi.n	8009d64 <__sflush_r+0xb4>
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <__sflush_r+0x100>)
 8009d0e:	410a      	asrs	r2, r1
 8009d10:	07d6      	lsls	r6, r2, #31
 8009d12:	d427      	bmi.n	8009d64 <__sflush_r+0xb4>
 8009d14:	2200      	movs	r2, #0
 8009d16:	6062      	str	r2, [r4, #4]
 8009d18:	6922      	ldr	r2, [r4, #16]
 8009d1a:	04d9      	lsls	r1, r3, #19
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	d504      	bpl.n	8009d2a <__sflush_r+0x7a>
 8009d20:	1c42      	adds	r2, r0, #1
 8009d22:	d101      	bne.n	8009d28 <__sflush_r+0x78>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b903      	cbnz	r3, 8009d2a <__sflush_r+0x7a>
 8009d28:	6560      	str	r0, [r4, #84]	; 0x54
 8009d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2c:	602f      	str	r7, [r5, #0]
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	d0ca      	beq.n	8009cc8 <__sflush_r+0x18>
 8009d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d36:	4299      	cmp	r1, r3
 8009d38:	d002      	beq.n	8009d40 <__sflush_r+0x90>
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f7ff fbd0 	bl	80094e0 <_free_r>
 8009d40:	2000      	movs	r0, #0
 8009d42:	6360      	str	r0, [r4, #52]	; 0x34
 8009d44:	e7c1      	b.n	8009cca <__sflush_r+0x1a>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b0      	blx	r6
 8009d4c:	1c41      	adds	r1, r0, #1
 8009d4e:	d1c8      	bne.n	8009ce2 <__sflush_r+0x32>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c5      	beq.n	8009ce2 <__sflush_r+0x32>
 8009d56:	2b1d      	cmp	r3, #29
 8009d58:	d001      	beq.n	8009d5e <__sflush_r+0xae>
 8009d5a:	2b16      	cmp	r3, #22
 8009d5c:	d101      	bne.n	8009d62 <__sflush_r+0xb2>
 8009d5e:	602f      	str	r7, [r5, #0]
 8009d60:	e7b2      	b.n	8009cc8 <__sflush_r+0x18>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	e7ae      	b.n	8009cca <__sflush_r+0x1a>
 8009d6c:	690f      	ldr	r7, [r1, #16]
 8009d6e:	2f00      	cmp	r7, #0
 8009d70:	d0aa      	beq.n	8009cc8 <__sflush_r+0x18>
 8009d72:	0793      	lsls	r3, r2, #30
 8009d74:	bf18      	it	ne
 8009d76:	2300      	movne	r3, #0
 8009d78:	680e      	ldr	r6, [r1, #0]
 8009d7a:	bf08      	it	eq
 8009d7c:	694b      	ldreq	r3, [r1, #20]
 8009d7e:	1bf6      	subs	r6, r6, r7
 8009d80:	600f      	str	r7, [r1, #0]
 8009d82:	608b      	str	r3, [r1, #8]
 8009d84:	2e00      	cmp	r6, #0
 8009d86:	dd9f      	ble.n	8009cc8 <__sflush_r+0x18>
 8009d88:	4633      	mov	r3, r6
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	6a21      	ldr	r1, [r4, #32]
 8009d90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009d94:	47e0      	blx	ip
 8009d96:	2800      	cmp	r0, #0
 8009d98:	dc06      	bgt.n	8009da8 <__sflush_r+0xf8>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	e790      	b.n	8009cca <__sflush_r+0x1a>
 8009da8:	4407      	add	r7, r0
 8009daa:	1a36      	subs	r6, r6, r0
 8009dac:	e7ea      	b.n	8009d84 <__sflush_r+0xd4>
 8009dae:	bf00      	nop
 8009db0:	dfbffffe 	.word	0xdfbffffe

08009db4 <_fflush_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	690b      	ldr	r3, [r1, #16]
 8009db8:	4605      	mov	r5, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	b913      	cbnz	r3, 8009dc4 <_fflush_r+0x10>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	b118      	cbz	r0, 8009dce <_fflush_r+0x1a>
 8009dc6:	6a03      	ldr	r3, [r0, #32]
 8009dc8:	b90b      	cbnz	r3, 8009dce <_fflush_r+0x1a>
 8009dca:	f7ff fa23 	bl	8009214 <__sinit>
 8009dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f3      	beq.n	8009dbe <_fflush_r+0xa>
 8009dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dd8:	07d0      	lsls	r0, r2, #31
 8009dda:	d404      	bmi.n	8009de6 <_fflush_r+0x32>
 8009ddc:	0599      	lsls	r1, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_fflush_r+0x32>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f7ff fb5d 	bl	80094a0 <__retarget_lock_acquire_recursive>
 8009de6:	4628      	mov	r0, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	f7ff ff61 	bl	8009cb0 <__sflush_r>
 8009dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df0:	4605      	mov	r5, r0
 8009df2:	07da      	lsls	r2, r3, #31
 8009df4:	d4e4      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	059b      	lsls	r3, r3, #22
 8009dfa:	d4e1      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfe:	f7ff fb50 	bl	80094a2 <__retarget_lock_release_recursive>
 8009e02:	e7dd      	b.n	8009dc0 <_fflush_r+0xc>

08009e04 <fiprintf>:
 8009e04:	b40e      	push	{r1, r2, r3}
 8009e06:	b503      	push	{r0, r1, lr}
 8009e08:	4601      	mov	r1, r0
 8009e0a:	ab03      	add	r3, sp, #12
 8009e0c:	4805      	ldr	r0, [pc, #20]	; (8009e24 <fiprintf+0x20>)
 8009e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e12:	6800      	ldr	r0, [r0, #0]
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	f000 f8ab 	bl	8009f70 <_vfiprintf_r>
 8009e1a:	b002      	add	sp, #8
 8009e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e20:	b003      	add	sp, #12
 8009e22:	4770      	bx	lr
 8009e24:	2000008c 	.word	0x2000008c

08009e28 <memmove>:
 8009e28:	4288      	cmp	r0, r1
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	eb01 0402 	add.w	r4, r1, r2
 8009e30:	d902      	bls.n	8009e38 <memmove+0x10>
 8009e32:	4284      	cmp	r4, r0
 8009e34:	4623      	mov	r3, r4
 8009e36:	d807      	bhi.n	8009e48 <memmove+0x20>
 8009e38:	1e43      	subs	r3, r0, #1
 8009e3a:	42a1      	cmp	r1, r4
 8009e3c:	d008      	beq.n	8009e50 <memmove+0x28>
 8009e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e46:	e7f8      	b.n	8009e3a <memmove+0x12>
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4402      	add	r2, r0
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d100      	bne.n	8009e52 <memmove+0x2a>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5a:	e7f7      	b.n	8009e4c <memmove+0x24>

08009e5c <_sbrk_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4d05      	ldr	r5, [pc, #20]	; (8009e78 <_sbrk_r+0x1c>)
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	602b      	str	r3, [r5, #0]
 8009e68:	f7f8 fc8c 	bl	8002784 <_sbrk>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_sbrk_r+0x1a>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_sbrk_r+0x1a>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	200029a8 	.word	0x200029a8

08009e7c <memchr>:
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	b2c9      	uxtb	r1, r1
 8009e82:	4402      	add	r2, r0
 8009e84:	4293      	cmp	r3, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	d101      	bne.n	8009e8e <memchr+0x12>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e003      	b.n	8009e96 <memchr+0x1a>
 8009e8e:	7804      	ldrb	r4, [r0, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	428c      	cmp	r4, r1
 8009e94:	d1f6      	bne.n	8009e84 <memchr+0x8>
 8009e96:	bd10      	pop	{r4, pc}

08009e98 <memcpy>:
 8009e98:	440a      	add	r2, r1
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ea0:	d100      	bne.n	8009ea4 <memcpy+0xc>
 8009ea2:	4770      	bx	lr
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb0:	d1f9      	bne.n	8009ea6 <memcpy+0xe>
 8009eb2:	bd10      	pop	{r4, pc}

08009eb4 <abort>:
 8009eb4:	2006      	movs	r0, #6
 8009eb6:	b508      	push	{r3, lr}
 8009eb8:	f000 fa32 	bl	800a320 <raise>
 8009ebc:	2001      	movs	r0, #1
 8009ebe:	f7f8 fbee 	bl	800269e <_exit>

08009ec2 <_realloc_r>:
 8009ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	4614      	mov	r4, r2
 8009eca:	460e      	mov	r6, r1
 8009ecc:	b921      	cbnz	r1, 8009ed8 <_realloc_r+0x16>
 8009ece:	4611      	mov	r1, r2
 8009ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	f7ff bb74 	b.w	80095c0 <_malloc_r>
 8009ed8:	b92a      	cbnz	r2, 8009ee6 <_realloc_r+0x24>
 8009eda:	f7ff fb01 	bl	80094e0 <_free_r>
 8009ede:	4625      	mov	r5, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee6:	f000 fa37 	bl	800a358 <_malloc_usable_size_r>
 8009eea:	4284      	cmp	r4, r0
 8009eec:	4607      	mov	r7, r0
 8009eee:	d802      	bhi.n	8009ef6 <_realloc_r+0x34>
 8009ef0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ef4:	d812      	bhi.n	8009f1c <_realloc_r+0x5a>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4640      	mov	r0, r8
 8009efa:	f7ff fb61 	bl	80095c0 <_malloc_r>
 8009efe:	4605      	mov	r5, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0ed      	beq.n	8009ee0 <_realloc_r+0x1e>
 8009f04:	42bc      	cmp	r4, r7
 8009f06:	4622      	mov	r2, r4
 8009f08:	4631      	mov	r1, r6
 8009f0a:	bf28      	it	cs
 8009f0c:	463a      	movcs	r2, r7
 8009f0e:	f7ff ffc3 	bl	8009e98 <memcpy>
 8009f12:	4631      	mov	r1, r6
 8009f14:	4640      	mov	r0, r8
 8009f16:	f7ff fae3 	bl	80094e0 <_free_r>
 8009f1a:	e7e1      	b.n	8009ee0 <_realloc_r+0x1e>
 8009f1c:	4635      	mov	r5, r6
 8009f1e:	e7df      	b.n	8009ee0 <_realloc_r+0x1e>

08009f20 <__sfputc_r>:
 8009f20:	6893      	ldr	r3, [r2, #8]
 8009f22:	b410      	push	{r4}
 8009f24:	3b01      	subs	r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	6093      	str	r3, [r2, #8]
 8009f2a:	da07      	bge.n	8009f3c <__sfputc_r+0x1c>
 8009f2c:	6994      	ldr	r4, [r2, #24]
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	db01      	blt.n	8009f36 <__sfputc_r+0x16>
 8009f32:	290a      	cmp	r1, #10
 8009f34:	d102      	bne.n	8009f3c <__sfputc_r+0x1c>
 8009f36:	bc10      	pop	{r4}
 8009f38:	f000 b934 	b.w	800a1a4 <__swbuf_r>
 8009f3c:	6813      	ldr	r3, [r2, #0]
 8009f3e:	1c58      	adds	r0, r3, #1
 8009f40:	6010      	str	r0, [r2, #0]
 8009f42:	7019      	strb	r1, [r3, #0]
 8009f44:	4608      	mov	r0, r1
 8009f46:	bc10      	pop	{r4}
 8009f48:	4770      	bx	lr

08009f4a <__sfputs_r>:
 8009f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	4614      	mov	r4, r2
 8009f52:	18d5      	adds	r5, r2, r3
 8009f54:	42ac      	cmp	r4, r5
 8009f56:	d101      	bne.n	8009f5c <__sfputs_r+0x12>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e007      	b.n	8009f6c <__sfputs_r+0x22>
 8009f5c:	463a      	mov	r2, r7
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f64:	f7ff ffdc 	bl	8009f20 <__sfputc_r>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d1f3      	bne.n	8009f54 <__sfputs_r+0xa>
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f70 <_vfiprintf_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	460d      	mov	r5, r1
 8009f76:	4614      	mov	r4, r2
 8009f78:	4698      	mov	r8, r3
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	b09d      	sub	sp, #116	; 0x74
 8009f7e:	b118      	cbz	r0, 8009f88 <_vfiprintf_r+0x18>
 8009f80:	6a03      	ldr	r3, [r0, #32]
 8009f82:	b90b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x18>
 8009f84:	f7ff f946 	bl	8009214 <__sinit>
 8009f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f96:	f7ff fa83 	bl	80094a0 <__retarget_lock_acquire_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	071b      	lsls	r3, r3, #28
 8009f9e:	d501      	bpl.n	8009fa4 <_vfiprintf_r+0x34>
 8009fa0:	692b      	ldr	r3, [r5, #16]
 8009fa2:	b99b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x5c>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 f93a 	bl	800a220 <__swsetup_r>
 8009fac:	b170      	cbz	r0, 8009fcc <_vfiprintf_r+0x5c>
 8009fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb0:	07dc      	lsls	r4, r3, #31
 8009fb2:	d504      	bpl.n	8009fbe <_vfiprintf_r+0x4e>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	b01d      	add	sp, #116	; 0x74
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	0598      	lsls	r0, r3, #22
 8009fc2:	d4f7      	bmi.n	8009fb4 <_vfiprintf_r+0x44>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc6:	f7ff fa6c 	bl	80094a2 <__retarget_lock_release_recursive>
 8009fca:	e7f3      	b.n	8009fb4 <_vfiprintf_r+0x44>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fd6:	2330      	movs	r3, #48	; 0x30
 8009fd8:	f04f 0901 	mov.w	r9, #1
 8009fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a190 <_vfiprintf_r+0x220>
 8009fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe8:	4623      	mov	r3, r4
 8009fea:	469a      	mov	sl, r3
 8009fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff0:	b10a      	cbz	r2, 8009ff6 <_vfiprintf_r+0x86>
 8009ff2:	2a25      	cmp	r2, #37	; 0x25
 8009ff4:	d1f9      	bne.n	8009fea <_vfiprintf_r+0x7a>
 8009ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffa:	d00b      	beq.n	800a014 <_vfiprintf_r+0xa4>
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	4622      	mov	r2, r4
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff ffa1 	bl	8009f4a <__sfputs_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	f000 80a9 	beq.w	800a160 <_vfiprintf_r+0x1f0>
 800a00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a010:	445a      	add	r2, fp
 800a012:	9209      	str	r2, [sp, #36]	; 0x24
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80a1 	beq.w	800a160 <_vfiprintf_r+0x1f0>
 800a01e:	2300      	movs	r3, #0
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a028:	f10a 0a01 	add.w	sl, sl, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	9307      	str	r3, [sp, #28]
 800a030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a034:	931a      	str	r3, [sp, #104]	; 0x68
 800a036:	4654      	mov	r4, sl
 800a038:	2205      	movs	r2, #5
 800a03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03e:	4854      	ldr	r0, [pc, #336]	; (800a190 <_vfiprintf_r+0x220>)
 800a040:	f7ff ff1c 	bl	8009e7c <memchr>
 800a044:	9a04      	ldr	r2, [sp, #16]
 800a046:	b9d8      	cbnz	r0, 800a080 <_vfiprintf_r+0x110>
 800a048:	06d1      	lsls	r1, r2, #27
 800a04a:	bf44      	itt	mi
 800a04c:	2320      	movmi	r3, #32
 800a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a052:	0713      	lsls	r3, r2, #28
 800a054:	bf44      	itt	mi
 800a056:	232b      	movmi	r3, #43	; 0x2b
 800a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b2a      	cmp	r3, #42	; 0x2a
 800a062:	d015      	beq.n	800a090 <_vfiprintf_r+0x120>
 800a064:	4654      	mov	r4, sl
 800a066:	2000      	movs	r0, #0
 800a068:	f04f 0c0a 	mov.w	ip, #10
 800a06c:	9a07      	ldr	r2, [sp, #28]
 800a06e:	4621      	mov	r1, r4
 800a070:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a074:	3b30      	subs	r3, #48	; 0x30
 800a076:	2b09      	cmp	r3, #9
 800a078:	d94d      	bls.n	800a116 <_vfiprintf_r+0x1a6>
 800a07a:	b1b0      	cbz	r0, 800a0aa <_vfiprintf_r+0x13a>
 800a07c:	9207      	str	r2, [sp, #28]
 800a07e:	e014      	b.n	800a0aa <_vfiprintf_r+0x13a>
 800a080:	eba0 0308 	sub.w	r3, r0, r8
 800a084:	fa09 f303 	lsl.w	r3, r9, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	46a2      	mov	sl, r4
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	e7d2      	b.n	800a036 <_vfiprintf_r+0xc6>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	1d19      	adds	r1, r3, #4
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	9103      	str	r1, [sp, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfbb      	ittet	lt
 800a09c:	425b      	neglt	r3, r3
 800a09e:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a2:	9307      	strge	r3, [sp, #28]
 800a0a4:	9307      	strlt	r3, [sp, #28]
 800a0a6:	bfb8      	it	lt
 800a0a8:	9204      	strlt	r2, [sp, #16]
 800a0aa:	7823      	ldrb	r3, [r4, #0]
 800a0ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ae:	d10c      	bne.n	800a0ca <_vfiprintf_r+0x15a>
 800a0b0:	7863      	ldrb	r3, [r4, #1]
 800a0b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b4:	d134      	bne.n	800a120 <_vfiprintf_r+0x1b0>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	3402      	adds	r4, #2
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	9203      	str	r2, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a194 <_vfiprintf_r+0x224>
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	4650      	mov	r0, sl
 800a0d2:	7821      	ldrb	r1, [r4, #0]
 800a0d4:	f7ff fed2 	bl	8009e7c <memchr>
 800a0d8:	b138      	cbz	r0, 800a0ea <_vfiprintf_r+0x17a>
 800a0da:	2240      	movs	r2, #64	; 0x40
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	eba0 000a 	sub.w	r0, r0, sl
 800a0e2:	4082      	lsls	r2, r0
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	3401      	adds	r4, #1
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ee:	2206      	movs	r2, #6
 800a0f0:	4829      	ldr	r0, [pc, #164]	; (800a198 <_vfiprintf_r+0x228>)
 800a0f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0f6:	f7ff fec1 	bl	8009e7c <memchr>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d03f      	beq.n	800a17e <_vfiprintf_r+0x20e>
 800a0fe:	4b27      	ldr	r3, [pc, #156]	; (800a19c <_vfiprintf_r+0x22c>)
 800a100:	bb1b      	cbnz	r3, 800a14a <_vfiprintf_r+0x1da>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	3307      	adds	r3, #7
 800a106:	f023 0307 	bic.w	r3, r3, #7
 800a10a:	3308      	adds	r3, #8
 800a10c:	9303      	str	r3, [sp, #12]
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a110:	443b      	add	r3, r7
 800a112:	9309      	str	r3, [sp, #36]	; 0x24
 800a114:	e768      	b.n	8009fe8 <_vfiprintf_r+0x78>
 800a116:	460c      	mov	r4, r1
 800a118:	2001      	movs	r0, #1
 800a11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11e:	e7a6      	b.n	800a06e <_vfiprintf_r+0xfe>
 800a120:	2300      	movs	r3, #0
 800a122:	f04f 0c0a 	mov.w	ip, #10
 800a126:	4619      	mov	r1, r3
 800a128:	3401      	adds	r4, #1
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	4620      	mov	r0, r4
 800a12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a132:	3a30      	subs	r2, #48	; 0x30
 800a134:	2a09      	cmp	r2, #9
 800a136:	d903      	bls.n	800a140 <_vfiprintf_r+0x1d0>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0c6      	beq.n	800a0ca <_vfiprintf_r+0x15a>
 800a13c:	9105      	str	r1, [sp, #20]
 800a13e:	e7c4      	b.n	800a0ca <_vfiprintf_r+0x15a>
 800a140:	4604      	mov	r4, r0
 800a142:	2301      	movs	r3, #1
 800a144:	fb0c 2101 	mla	r1, ip, r1, r2
 800a148:	e7f0      	b.n	800a12c <_vfiprintf_r+0x1bc>
 800a14a:	ab03      	add	r3, sp, #12
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	462a      	mov	r2, r5
 800a150:	4630      	mov	r0, r6
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <_vfiprintf_r+0x230>)
 800a154:	a904      	add	r1, sp, #16
 800a156:	f3af 8000 	nop.w
 800a15a:	4607      	mov	r7, r0
 800a15c:	1c78      	adds	r0, r7, #1
 800a15e:	d1d6      	bne.n	800a10e <_vfiprintf_r+0x19e>
 800a160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d405      	bmi.n	800a172 <_vfiprintf_r+0x202>
 800a166:	89ab      	ldrh	r3, [r5, #12]
 800a168:	059a      	lsls	r2, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_vfiprintf_r+0x202>
 800a16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a16e:	f7ff f998 	bl	80094a2 <__retarget_lock_release_recursive>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	065b      	lsls	r3, r3, #25
 800a176:	f53f af1d 	bmi.w	8009fb4 <_vfiprintf_r+0x44>
 800a17a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a17c:	e71c      	b.n	8009fb8 <_vfiprintf_r+0x48>
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4630      	mov	r0, r6
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <_vfiprintf_r+0x230>)
 800a188:	a904      	add	r1, sp, #16
 800a18a:	f7ff fc6f 	bl	8009a6c <_printf_i>
 800a18e:	e7e4      	b.n	800a15a <_vfiprintf_r+0x1ea>
 800a190:	0800c0ef 	.word	0x0800c0ef
 800a194:	0800c0f5 	.word	0x0800c0f5
 800a198:	0800c0f9 	.word	0x0800c0f9
 800a19c:	00000000 	.word	0x00000000
 800a1a0:	08009f4b 	.word	0x08009f4b

0800a1a4 <__swbuf_r>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	460e      	mov	r6, r1
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	b118      	cbz	r0, 800a1b6 <__swbuf_r+0x12>
 800a1ae:	6a03      	ldr	r3, [r0, #32]
 800a1b0:	b90b      	cbnz	r3, 800a1b6 <__swbuf_r+0x12>
 800a1b2:	f7ff f82f 	bl	8009214 <__sinit>
 800a1b6:	69a3      	ldr	r3, [r4, #24]
 800a1b8:	60a3      	str	r3, [r4, #8]
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	071a      	lsls	r2, r3, #28
 800a1be:	d525      	bpl.n	800a20c <__swbuf_r+0x68>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	b31b      	cbz	r3, 800a20c <__swbuf_r+0x68>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	6922      	ldr	r2, [r4, #16]
 800a1c8:	b2f6      	uxtb	r6, r6
 800a1ca:	1a98      	subs	r0, r3, r2
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	4637      	mov	r7, r6
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	dc04      	bgt.n	800a1de <__swbuf_r+0x3a>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7ff fdec 	bl	8009db4 <_fflush_r>
 800a1dc:	b9e0      	cbnz	r0, 800a218 <__swbuf_r+0x74>
 800a1de:	68a3      	ldr	r3, [r4, #8]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	60a3      	str	r3, [r4, #8]
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	6022      	str	r2, [r4, #0]
 800a1ea:	701e      	strb	r6, [r3, #0]
 800a1ec:	6962      	ldr	r2, [r4, #20]
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d004      	beq.n	800a1fe <__swbuf_r+0x5a>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	07db      	lsls	r3, r3, #31
 800a1f8:	d506      	bpl.n	800a208 <__swbuf_r+0x64>
 800a1fa:	2e0a      	cmp	r6, #10
 800a1fc:	d104      	bne.n	800a208 <__swbuf_r+0x64>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f7ff fdd7 	bl	8009db4 <_fflush_r>
 800a206:	b938      	cbnz	r0, 800a218 <__swbuf_r+0x74>
 800a208:	4638      	mov	r0, r7
 800a20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f806 	bl	800a220 <__swsetup_r>
 800a214:	2800      	cmp	r0, #0
 800a216:	d0d5      	beq.n	800a1c4 <__swbuf_r+0x20>
 800a218:	f04f 37ff 	mov.w	r7, #4294967295
 800a21c:	e7f4      	b.n	800a208 <__swbuf_r+0x64>
	...

0800a220 <__swsetup_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4b2a      	ldr	r3, [pc, #168]	; (800a2cc <__swsetup_r+0xac>)
 800a224:	4605      	mov	r5, r0
 800a226:	6818      	ldr	r0, [r3, #0]
 800a228:	460c      	mov	r4, r1
 800a22a:	b118      	cbz	r0, 800a234 <__swsetup_r+0x14>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <__swsetup_r+0x14>
 800a230:	f7fe fff0 	bl	8009214 <__sinit>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a23a:	0718      	lsls	r0, r3, #28
 800a23c:	d422      	bmi.n	800a284 <__swsetup_r+0x64>
 800a23e:	06d9      	lsls	r1, r3, #27
 800a240:	d407      	bmi.n	800a252 <__swsetup_r+0x32>
 800a242:	2309      	movs	r3, #9
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	e034      	b.n	800a2bc <__swsetup_r+0x9c>
 800a252:	0758      	lsls	r0, r3, #29
 800a254:	d512      	bpl.n	800a27c <__swsetup_r+0x5c>
 800a256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a258:	b141      	cbz	r1, 800a26c <__swsetup_r+0x4c>
 800a25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a25e:	4299      	cmp	r1, r3
 800a260:	d002      	beq.n	800a268 <__swsetup_r+0x48>
 800a262:	4628      	mov	r0, r5
 800a264:	f7ff f93c 	bl	80094e0 <_free_r>
 800a268:	2300      	movs	r3, #0
 800a26a:	6363      	str	r3, [r4, #52]	; 0x34
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	2300      	movs	r3, #0
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f043 0308 	orr.w	r3, r3, #8
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	b94b      	cbnz	r3, 800a29c <__swsetup_r+0x7c>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a28e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a292:	d003      	beq.n	800a29c <__swsetup_r+0x7c>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f88b 	bl	800a3b2 <__smakebuf_r>
 800a29c:	89a0      	ldrh	r0, [r4, #12]
 800a29e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a2:	f010 0301 	ands.w	r3, r0, #1
 800a2a6:	d00a      	beq.n	800a2be <__swsetup_r+0x9e>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60a3      	str	r3, [r4, #8]
 800a2ac:	6963      	ldr	r3, [r4, #20]
 800a2ae:	425b      	negs	r3, r3
 800a2b0:	61a3      	str	r3, [r4, #24]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	b943      	cbnz	r3, 800a2c8 <__swsetup_r+0xa8>
 800a2b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2ba:	d1c4      	bne.n	800a246 <__swsetup_r+0x26>
 800a2bc:	bd38      	pop	{r3, r4, r5, pc}
 800a2be:	0781      	lsls	r1, r0, #30
 800a2c0:	bf58      	it	pl
 800a2c2:	6963      	ldrpl	r3, [r4, #20]
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	e7f4      	b.n	800a2b2 <__swsetup_r+0x92>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7f7      	b.n	800a2bc <__swsetup_r+0x9c>
 800a2cc:	2000008c 	.word	0x2000008c

0800a2d0 <_raise_r>:
 800a2d0:	291f      	cmp	r1, #31
 800a2d2:	b538      	push	{r3, r4, r5, lr}
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	d904      	bls.n	800a2e4 <_raise_r+0x14>
 800a2da:	2316      	movs	r3, #22
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a2e6:	b112      	cbz	r2, 800a2ee <_raise_r+0x1e>
 800a2e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2ec:	b94b      	cbnz	r3, 800a302 <_raise_r+0x32>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 f830 	bl	800a354 <_getpid_r>
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fe:	f000 b817 	b.w	800a330 <_kill_r>
 800a302:	2b01      	cmp	r3, #1
 800a304:	d00a      	beq.n	800a31c <_raise_r+0x4c>
 800a306:	1c59      	adds	r1, r3, #1
 800a308:	d103      	bne.n	800a312 <_raise_r+0x42>
 800a30a:	2316      	movs	r3, #22
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	2001      	movs	r0, #1
 800a310:	e7e7      	b.n	800a2e2 <_raise_r+0x12>
 800a312:	2400      	movs	r4, #0
 800a314:	4628      	mov	r0, r5
 800a316:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a31a:	4798      	blx	r3
 800a31c:	2000      	movs	r0, #0
 800a31e:	e7e0      	b.n	800a2e2 <_raise_r+0x12>

0800a320 <raise>:
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <raise+0xc>)
 800a322:	4601      	mov	r1, r0
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f7ff bfd3 	b.w	800a2d0 <_raise_r>
 800a32a:	bf00      	nop
 800a32c:	2000008c 	.word	0x2000008c

0800a330 <_kill_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	2300      	movs	r3, #0
 800a334:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_kill_r+0x20>)
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	602b      	str	r3, [r5, #0]
 800a33e:	f7f8 f99e 	bl	800267e <_kill>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d102      	bne.n	800a34c <_kill_r+0x1c>
 800a346:	682b      	ldr	r3, [r5, #0]
 800a348:	b103      	cbz	r3, 800a34c <_kill_r+0x1c>
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	200029a8 	.word	0x200029a8

0800a354 <_getpid_r>:
 800a354:	f7f8 b98c 	b.w	8002670 <_getpid>

0800a358 <_malloc_usable_size_r>:
 800a358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35c:	1f18      	subs	r0, r3, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfbc      	itt	lt
 800a362:	580b      	ldrlt	r3, [r1, r0]
 800a364:	18c0      	addlt	r0, r0, r3
 800a366:	4770      	bx	lr

0800a368 <__swhatbuf_r>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	460c      	mov	r4, r1
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	4615      	mov	r5, r2
 800a372:	2900      	cmp	r1, #0
 800a374:	461e      	mov	r6, r3
 800a376:	b096      	sub	sp, #88	; 0x58
 800a378:	da0c      	bge.n	800a394 <__swhatbuf_r+0x2c>
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	2100      	movs	r1, #0
 800a37e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a382:	bf0c      	ite	eq
 800a384:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a388:	2340      	movne	r3, #64	; 0x40
 800a38a:	2000      	movs	r0, #0
 800a38c:	6031      	str	r1, [r6, #0]
 800a38e:	602b      	str	r3, [r5, #0]
 800a390:	b016      	add	sp, #88	; 0x58
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	466a      	mov	r2, sp
 800a396:	f000 f849 	bl	800a42c <_fstat_r>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	dbed      	blt.n	800a37a <__swhatbuf_r+0x12>
 800a39e:	9901      	ldr	r1, [sp, #4]
 800a3a0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3a4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3a8:	4259      	negs	r1, r3
 800a3aa:	4159      	adcs	r1, r3
 800a3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b0:	e7eb      	b.n	800a38a <__swhatbuf_r+0x22>

0800a3b2 <__smakebuf_r>:
 800a3b2:	898b      	ldrh	r3, [r1, #12]
 800a3b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3b6:	079d      	lsls	r5, r3, #30
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	d507      	bpl.n	800a3ce <__smakebuf_r+0x1c>
 800a3be:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	6163      	str	r3, [r4, #20]
 800a3ca:	b002      	add	sp, #8
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	466a      	mov	r2, sp
 800a3d0:	ab01      	add	r3, sp, #4
 800a3d2:	f7ff ffc9 	bl	800a368 <__swhatbuf_r>
 800a3d6:	9900      	ldr	r1, [sp, #0]
 800a3d8:	4605      	mov	r5, r0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff f8f0 	bl	80095c0 <_malloc_r>
 800a3e0:	b948      	cbnz	r0, 800a3f6 <__smakebuf_r+0x44>
 800a3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e6:	059a      	lsls	r2, r3, #22
 800a3e8:	d4ef      	bmi.n	800a3ca <__smakebuf_r+0x18>
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	f043 0302 	orr.w	r3, r3, #2
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	e7e3      	b.n	800a3be <__smakebuf_r+0xc>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	6020      	str	r0, [r4, #0]
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	6120      	str	r0, [r4, #16]
 800a404:	6163      	str	r3, [r4, #20]
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	b15b      	cbz	r3, 800a422 <__smakebuf_r+0x70>
 800a40a:	4630      	mov	r0, r6
 800a40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a410:	f000 f81e 	bl	800a450 <_isatty_r>
 800a414:	b128      	cbz	r0, 800a422 <__smakebuf_r+0x70>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	431d      	orrs	r5, r3
 800a426:	81a5      	strh	r5, [r4, #12]
 800a428:	e7cf      	b.n	800a3ca <__smakebuf_r+0x18>
	...

0800a42c <_fstat_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	2300      	movs	r3, #0
 800a430:	4d06      	ldr	r5, [pc, #24]	; (800a44c <_fstat_r+0x20>)
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	4611      	mov	r1, r2
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	f7f8 f97e 	bl	800273a <_fstat>
 800a43e:	1c43      	adds	r3, r0, #1
 800a440:	d102      	bne.n	800a448 <_fstat_r+0x1c>
 800a442:	682b      	ldr	r3, [r5, #0]
 800a444:	b103      	cbz	r3, 800a448 <_fstat_r+0x1c>
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	bd38      	pop	{r3, r4, r5, pc}
 800a44a:	bf00      	nop
 800a44c:	200029a8 	.word	0x200029a8

0800a450 <_isatty_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	2300      	movs	r3, #0
 800a454:	4d05      	ldr	r5, [pc, #20]	; (800a46c <_isatty_r+0x1c>)
 800a456:	4604      	mov	r4, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	f7f8 f97c 	bl	8002758 <_isatty>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_isatty_r+0x1a>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_isatty_r+0x1a>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	200029a8 	.word	0x200029a8

0800a470 <_init>:
 800a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a472:	bf00      	nop
 800a474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a476:	bc08      	pop	{r3}
 800a478:	469e      	mov	lr, r3
 800a47a:	4770      	bx	lr

0800a47c <_fini>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	bf00      	nop
 800a480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a482:	bc08      	pop	{r3}
 800a484:	469e      	mov	lr, r3
 800a486:	4770      	bx	lr
