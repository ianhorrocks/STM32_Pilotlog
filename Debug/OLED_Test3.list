
OLED_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e00  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800caf4  0800caf4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800caf4  0800caf4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800cafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b8  20000090  0800cb8c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a48  0800cb8c  00022a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f275  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000342d  00000000  00000000  0002f371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8b  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a63e  00000000  00000000  000344ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170c8  00000000  00000000  0004eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008888b  00000000  00000000  00065bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f50  00000000  00000000  000ee43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800acdc 	.word	0x0800acdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800acdc 	.word	0x0800acdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <writeCSVRecord>:
// csv_utils.c

#include "csv_utils.h"
#include <stdio.h>

void writeCSVRecord(FIL* file, TimeRecord* record) {
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b0b1      	sub	sp, #196	; 0xc4
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    // Crear una l√≠nea con el nuevo registro
    char write_buffer[100];
    if (f_size(file) == 0) {
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d10d      	bne.n	800018e <writeCSVRecord+0x32>
        char header[] = "id,id_embebido,id_usuario,tiempo_inicial,tiempo_final,tiempo_total\n";
 8000172:	4a1c      	ldr	r2, [pc, #112]	; (80001e4 <writeCSVRecord+0x88>)
 8000174:	f107 0308 	add.w	r3, r7, #8
 8000178:	4611      	mov	r1, r2
 800017a:	2244      	movs	r2, #68	; 0x44
 800017c:	4618      	mov	r0, r3
 800017e:	f009 f943 	bl	8009408 <memcpy>
        f_puts(header, file);
 8000182:	f107 0308 	add.w	r3, r7, #8
 8000186:	6879      	ldr	r1, [r7, #4]
 8000188:	4618      	mov	r0, r3
 800018a:	f008 fe41 	bl	8008e10 <f_puts>
    }
    sprintf(write_buffer, "%s,%s,%s,%s,%s,%s\n",
            record->id,
 800018e:	683d      	ldr	r5, [r7, #0]
            record->id_embebido,
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	f103 0619 	add.w	r6, r3, #25
			record->id_usuario,
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	332d      	adds	r3, #45	; 0x2d
            record->tiempo_inicial,
 800019a:	683a      	ldr	r2, [r7, #0]
 800019c:	3236      	adds	r2, #54	; 0x36
            record->tiempo_final,
 800019e:	6839      	ldr	r1, [r7, #0]
 80001a0:	314a      	adds	r1, #74	; 0x4a
            record->tiempo_total);
 80001a2:	6838      	ldr	r0, [r7, #0]
 80001a4:	305e      	adds	r0, #94	; 0x5e
    sprintf(write_buffer, "%s,%s,%s,%s,%s,%s\n",
 80001a6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80001aa:	9003      	str	r0, [sp, #12]
 80001ac:	9102      	str	r1, [sp, #8]
 80001ae:	9201      	str	r2, [sp, #4]
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	4633      	mov	r3, r6
 80001b4:	462a      	mov	r2, r5
 80001b6:	490c      	ldr	r1, [pc, #48]	; (80001e8 <writeCSVRecord+0x8c>)
 80001b8:	4620      	mov	r0, r4
 80001ba:	f009 f813 	bl	80091e4 <siprintf>

    f_lseek(file, f_size(file));  // Ir al final del archivo
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80001c4:	68db      	ldr	r3, [r3, #12]
 80001c6:	4619      	mov	r1, r3
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f008 faf3 	bl	80087b4 <f_lseek>
    f_puts(write_buffer, file);
 80001ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f008 fe1b 	bl	8008e10 <f_puts>
}
 80001da:	bf00      	nop
 80001dc:	37b4      	adds	r7, #180	; 0xb4
 80001de:	46bd      	mov	sp, r7
 80001e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80001e2:	bf00      	nop
 80001e4:	0800ad08 	.word	0x0800ad08
 80001e8:	0800acf4 	.word	0x0800acf4

080001ec <ds1307_write_byte>:
 * 
 * @param ds1307_reg_addres: REG Address you can see more in datasheet page 4 figure 2
 * @param data 
 * @return ds1307_err_t: 0 if everything is ok
 */
static ds1307_err_t ds1307_write_byte(uint8_t ds1307_reg_addres, uint8_t data){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	4603      	mov	r3, r0
 80001f4:	460a      	mov	r2, r1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]

	uint8_t buff[2] = {ds1307_reg_addres,data};
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	733b      	strb	r3, [r7, #12]
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	737b      	strb	r3, [r7, #13]
	ds1307_err_t ret_val;
	ret_val = HAL_I2C_Master_Transmit(&DS1307_HANDLER, DS1307_ADDRES << 1, buff, 2, DS1307_TIMEOUT);
 8000204:	f107 020c 	add.w	r2, r7, #12
 8000208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2302      	movs	r3, #2
 8000210:	21d0      	movs	r1, #208	; 0xd0
 8000212:	4805      	ldr	r0, [pc, #20]	; (8000228 <ds1307_write_byte+0x3c>)
 8000214:	f002 ff2c 	bl	8003070 <HAL_I2C_Master_Transmit>
 8000218:	4603      	mov	r3, r0
 800021a:	73fb      	strb	r3, [r7, #15]

	return ret_val;
 800021c:	7bfb      	ldrb	r3, [r7, #15]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000108 	.word	0x20000108

0800022c <ds1307_read_byte>:
 * @brief Read byte data from an specific address ds1307 RTC
 * 
 * @param ds1307_reg_addres: REG Address you can see more in datasheet page 4 figure 2
 * @return data: data read from reg address
 */
static uint8_t ds1307_read_byte(uint8_t ds1307_reg_addres){
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af02      	add	r7, sp, #8
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	HAL_I2C_Master_Transmit(&DS1307_HANDLER, DS1307_ADDRES << 1, &ds1307_reg_addres, 1, DS1307_TIMEOUT);
 8000236:	1dfa      	adds	r2, r7, #7
 8000238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2301      	movs	r3, #1
 8000240:	21d0      	movs	r1, #208	; 0xd0
 8000242:	4809      	ldr	r0, [pc, #36]	; (8000268 <ds1307_read_byte+0x3c>)
 8000244:	f002 ff14 	bl	8003070 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&DS1307_HANDLER, DS1307_ADDRES << 1, &data, 1, DS1307_TIMEOUT);
 8000248:	f107 020f 	add.w	r2, r7, #15
 800024c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2301      	movs	r3, #1
 8000254:	21d0      	movs	r1, #208	; 0xd0
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <ds1307_read_byte+0x3c>)
 8000258:	f003 f808 	bl	800326c <HAL_I2C_Master_Receive>
	return data;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000108 	.word	0x20000108

0800026c <ds1307_bcd_decode>:
 * @brief BCD decode
 * 
 * @param data: Value to convert
 * @return uint8_t: data converted
 */
static uint8_t ds1307_bcd_decode(uint8_t data){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	return (((data & 0xf0) >> 4) * 10) + (data & 0x0f);
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	091b      	lsrs	r3, r3, #4
 800027a:	b2db      	uxtb	r3, r3
 800027c:	461a      	mov	r2, r3
 800027e:	0092      	lsls	r2, r2, #2
 8000280:	4413      	add	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	b2da      	uxtb	r2, r3
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 030f 	and.w	r3, r3, #15
 800028c:	b2db      	uxtb	r3, r3
 800028e:	4413      	add	r3, r2
 8000290:	b2db      	uxtb	r3, r3
}
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <ds1307_init>:

/**
 * @brief Init ds1307
 * 
 */
void ds1307_init(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	ds1307_set_clock_halt(0);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f802 	bl	80002aa <ds1307_set_clock_halt>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}

080002aa <ds1307_set_clock_halt>:
 * @brief To start the time and calendar, we must set the stop bit of the clock (CH) in 0, to stop, put the bit in 1
 * more information see datasheet on page 4
 * 
 * @param halt: 0 init, 1 stop
 */
void ds1307_set_clock_halt(uint8_t halt){
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b084      	sub	sp, #16
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <ds1307_set_clock_halt+0x14>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	e000      	b.n	80002c0 <ds1307_set_clock_halt+0x16>
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	ds1307_write_byte(DS1307_SECONDS, ch | (ds1307_read_byte(DS1307_SECONDS) & 0x7F));
 80002c2:	2000      	movs	r0, #0
 80002c4:	f7ff ffb2 	bl	800022c <ds1307_read_byte>
 80002c8:	4603      	mov	r3, r0
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d0:	b25a      	sxtb	r2, r3
 80002d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ff84 	bl	80001ec <ds1307_write_byte>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <ds1307_get_hour>:
/**
 * @brief ds1307_get_hour
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_hour(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_HOURS) & 0x3F);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f7ff ff9b 	bl	800022c <ds1307_read_byte>
 80002f6:	4603      	mov	r3, r0
 80002f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffb4 	bl	800026c <ds1307_bcd_decode>
 8000304:	4603      	mov	r3, r0
}
 8000306:	4618      	mov	r0, r3
 8000308:	bd80      	pop	{r7, pc}

0800030a <ds1307_get_second>:
/**
 * @brief ds1307_get_second
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_second(void){
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_SECONDS) & 0x7F);
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ff8c 	bl	800022c <ds1307_read_byte>
 8000314:	4603      	mov	r3, r0
 8000316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffa5 	bl	800026c <ds1307_bcd_decode>
 8000322:	4603      	mov	r3, r0
}
 8000324:	4618      	mov	r0, r3
 8000326:	bd80      	pop	{r7, pc}

08000328 <ds1307_get_minutes>:
/**
 * @brief ds1307_get_minutes
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_minutes(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_MINUTES));
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff7d 	bl	800022c <ds1307_read_byte>
 8000332:	4603      	mov	r3, r0
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff99 	bl	800026c <ds1307_bcd_decode>
 800033a:	4603      	mov	r3, r0

}
 800033c:	4618      	mov	r0, r3
 800033e:	bd80      	pop	{r7, pc}

08000340 <ds1307_get_day>:
/**
 * @brief ds1307_get_day
 * 
 * @return ds1307_days_t 
 */
ds1307_days_t ds1307_get_day(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	return ds1307_read_byte(ds1307_bcd_decode(DS1307_DAY));
 8000344:	2003      	movs	r0, #3
 8000346:	f7ff ff91 	bl	800026c <ds1307_bcd_decode>
 800034a:	4603      	mov	r3, r0
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff6d 	bl	800022c <ds1307_read_byte>
 8000352:	4603      	mov	r3, r0
}
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}

08000358 <ds1307_get_date>:
/**
 * @brief 
 * 
 * @return uint8_t 
 */
uint8_t ds1307_get_date(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_DATE));
 800035c:	2004      	movs	r0, #4
 800035e:	f7ff ff65 	bl	800022c <ds1307_read_byte>
 8000362:	4603      	mov	r3, r0
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff81 	bl	800026c <ds1307_bcd_decode>
 800036a:	4603      	mov	r3, r0
}
 800036c:	4618      	mov	r0, r3
 800036e:	bd80      	pop	{r7, pc}

08000370 <ds1307_get_month>:
/**
 * @brief ds1307_get_month
 * 
 * @return ds1307_months_t 
 */
ds1307_months_t ds1307_get_month(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	return ds1307_read_byte(ds1307_bcd_decode(DS1307_MONTH));
 8000374:	2005      	movs	r0, #5
 8000376:	f7ff ff79 	bl	800026c <ds1307_bcd_decode>
 800037a:	4603      	mov	r3, r0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff55 	bl	800022c <ds1307_read_byte>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}

08000388 <ds1307_get_year>:
/**
 * @brief ds1307_get_year
 * 
 * @return uint16_t: current year
 */
uint16_t ds1307_get_year(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	uint16_t cent = ds1307_read_byte(DS1307_REG_CENT) * 100;
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ff4c 	bl	800022c <ds1307_read_byte>
 8000394:	4603      	mov	r3, r0
 8000396:	b29b      	uxth	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	4413      	add	r3, r2
 800039e:	461a      	mov	r2, r3
 80003a0:	0091      	lsls	r1, r2, #2
 80003a2:	461a      	mov	r2, r3
 80003a4:	460b      	mov	r3, r1
 80003a6:	4413      	add	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	80fb      	strh	r3, [r7, #6]
	return ds1307_bcd_decode(ds1307_read_byte(DS1307_YEAR)) + cent;
 80003ac:	2006      	movs	r0, #6
 80003ae:	f7ff ff3d 	bl	800022c <ds1307_read_byte>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff59 	bl	800026c <ds1307_bcd_decode>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	4413      	add	r3, r2
 80003c2:	b29b      	uxth	r3, r3

}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <ds1307_get_time_zone_hour>:
/**
 * @brief Get the actual timezone-hour configured in the rtc
 * 
 * @return int8_t actual time zone
 */
int8_t ds1307_get_time_zone_hour(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	return ds1307_read_byte(DS1307_REG_UTC_HR);
 80003d0:	2008      	movs	r0, #8
 80003d2:	f7ff ff2b 	bl	800022c <ds1307_read_byte>
 80003d6:	4603      	mov	r3, r0
 80003d8:	b25b      	sxtb	r3, r3
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}

080003de <ds1307_get_time_zone_min>:
/**
 * @brief  Get the actual timezone-min configured in the rtc
 * 
 * @return int8_t: actual time zone
 */
int8_t ds1307_get_time_zone_min(void){
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
	return ds1307_read_byte(DS1307_REG_UTC_MIN);
 80003e2:	2009      	movs	r0, #9
 80003e4:	f7ff ff22 	bl	800022c <ds1307_read_byte>
 80003e8:	4603      	mov	r3, r0
 80003ea:	b25b      	sxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <ds1307_update>:
/**
 * @brief Update ds1307 data
 * 
 * @param dev: ds1307 pointer
 */
void ds1307_update(ds1307_dev_t *ds1307_dev){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	ds1307_dev->seconds = ds1307_get_second();
 80003f8:	f7ff ff87 	bl	800030a <ds1307_get_second>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	701a      	strb	r2, [r3, #0]
	ds1307_dev->minutes = ds1307_get_minutes();
 8000404:	f7ff ff90 	bl	8000328 <ds1307_get_minutes>
 8000408:	4603      	mov	r3, r0
 800040a:	461a      	mov	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	705a      	strb	r2, [r3, #1]
	ds1307_dev->hours = ds1307_get_hour();
 8000410:	f7ff ff6c 	bl	80002ec <ds1307_get_hour>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	709a      	strb	r2, [r3, #2]
	ds1307_dev->day = ds1307_get_day();
 800041c:	f7ff ff90 	bl	8000340 <ds1307_get_day>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	70da      	strb	r2, [r3, #3]
	ds1307_dev->date = ds1307_get_date();
 8000428:	f7ff ff96 	bl	8000358 <ds1307_get_date>
 800042c:	4603      	mov	r3, r0
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	711a      	strb	r2, [r3, #4]
	ds1307_dev->month = ds1307_get_month();
 8000434:	f7ff ff9c 	bl	8000370 <ds1307_get_month>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	715a      	strb	r2, [r3, #5]
	ds1307_dev->year = ds1307_get_year();
 8000440:	f7ff ffa2 	bl	8000388 <ds1307_get_year>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	80da      	strh	r2, [r3, #6]
	ds1307_dev->t_zone_hour = ds1307_get_time_zone_hour();
 800044c:	f7ff ffbe 	bl	80003cc <ds1307_get_time_zone_hour>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	721a      	strb	r2, [r3, #8]
	ds1307_dev->t_zone_min = ds1307_get_time_zone_min();
 8000458:	f7ff ffc1 	bl	80003de <ds1307_get_time_zone_min>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	725a      	strb	r2, [r3, #9]
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <SELECT+0x1c>)
 8000478:	f002 fc9d 	bl	8002db6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f002 f9f7 	bl	8002870 <HAL_Delay>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40010c00 	.word	0x40010c00

0800048c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <DESELECT+0x1c>)
 8000498:	f002 fc8d 	bl	8002db6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f002 f9e7 	bl	8002870 <HAL_Delay>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00

080004ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b6:	bf00      	nop
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SPI_TxByte+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d1f8      	bne.n	80004b8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SPI_TxByte+0x30>)
 80004ce:	f004 fa6d 	bl	80049ac <HAL_SPI_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20002260 	.word	0x20002260

080004e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004ec:	bf00      	nop
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SPI_TxBuffer+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d1f8      	bne.n	80004ee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <SPI_TxBuffer+0x30>)
 8000504:	f004 fa52 	bl	80049ac <HAL_SPI_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20002260 	.word	0x20002260

08000514 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SPI_RxByte+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052e:	1dba      	adds	r2, r7, #6
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_RxByte+0x34>)
 800053a:	f004 fb7a 	bl	8004c32 <HAL_SPI_TransmitReceive>

	return data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20002260 	.word	0x20002260

0800054c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000554:	f7ff ffde 	bl	8000514 <SPI_RxByte>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SD_ReadyWait+0x30>)
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000576:	f7ff ffcd 	bl	8000514 <SPI_RxByte>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d003      	beq.n	800058c <SD_ReadyWait+0x24>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SD_ReadyWait+0x30>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <SD_ReadyWait+0xe>

	return res;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000ae 	.word	0x200000ae

0800059c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a8:	f7ff ff70 	bl	800048c <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	f7ff ff7a 	bl	80004ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf6      	ble.n	80005b2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c4:	f7ff ff52 	bl	800046c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005dc:	2395      	movs	r3, #149	; 0x95
 80005de:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005e0:	463b      	mov	r3, r7
 80005e2:	2106      	movs	r1, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff7b 	bl	80004e0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ea:	e002      	b.n	80005f2 <SD_PowerOn+0x56>
	{
		cnt--;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005f2:	f7ff ff8f 	bl	8000514 <SPI_RxByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d002      	beq.n	8000602 <SD_PowerOn+0x66>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f4      	bne.n	80005ec <SD_PowerOn+0x50>
	}

	DESELECT();
 8000602:	f7ff ff43 	bl	800048c <DESELECT>
	SPI_TxByte(0XFF);
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	f7ff ff50 	bl	80004ac <SPI_TxByte>

	PowerFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <SD_PowerOn+0x80>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000b1 	.word	0x200000b1

08000620 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SD_PowerOff+0x14>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200000b1 	.word	0x200000b1

08000638 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SD_CheckPower+0x10>)
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200000b1 	.word	0x200000b1

0800064c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SD_RxDataBlock+0x58>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800065c:	f7ff ff5a 	bl	8000514 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d103      	bne.n	8000672 <SD_RxDataBlock+0x26>
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SD_RxDataBlock+0x58>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f4      	bne.n	800065c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	d001      	beq.n	800067c <SD_RxDataBlock+0x30>
 8000678:	2300      	movs	r3, #0
 800067a:	e00f      	b.n	800069c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff62 	bl	800054c <SPI_RxBytePtr>
	} while(len--);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000692:	f7ff ff3f 	bl	8000514 <SPI_RxByte>
	SPI_RxByte();
 8000696:	f7ff ff3d 	bl	8000514 <SPI_RxByte>

	return TRUE;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000ac 	.word	0x200000ac

080006a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b8:	f7ff ff56 	bl	8000568 <SD_ReadyWait>
 80006bc:	4603      	mov	r3, r0
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d001      	beq.n	80006c6 <SD_TxDataBlock+0x1e>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02f      	b.n	8000726 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff feef 	bl	80004ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2bfd      	cmp	r3, #253	; 0xfd
 80006d2:	d020      	beq.n	8000716 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff01 	bl	80004e0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006de:	f7ff ff19 	bl	8000514 <SPI_RxByte>
		SPI_RxByte();
 80006e2:	f7ff ff17 	bl	8000514 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e6:	e00b      	b.n	8000700 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e8:	f7ff ff14 	bl	8000514 <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d006      	beq.n	8000708 <SD_TxDataBlock+0x60>
			i++;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d9f0      	bls.n	80006e8 <SD_TxDataBlock+0x40>
 8000706:	e000      	b.n	800070a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000708:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800070a:	bf00      	nop
 800070c:	f7ff ff02 	bl	8000514 <SPI_RxByte>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0fa      	beq.n	800070c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	2b05      	cmp	r3, #5
 800071e:	d101      	bne.n	8000724 <SD_TxDataBlock+0x7c>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	6039      	str	r1, [r7, #0]
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800073a:	f7ff ff15 	bl	8000568 <SD_ReadyWait>
 800073e:	4603      	mov	r3, r0
 8000740:	2bff      	cmp	r3, #255	; 0xff
 8000742:	d001      	beq.n	8000748 <SD_SendCmd+0x1a>
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	e042      	b.n	80007ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feae 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0e1b      	lsrs	r3, r3, #24
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea8 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fea2 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe9c 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe97 	bl	80004ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x5c>
 8000784:	2395      	movs	r3, #149	; 0x95
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e007      	b.n	800079a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b48      	cmp	r3, #72	; 0x48
 800078e:	d102      	bne.n	8000796 <SD_SendCmd+0x68>
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <SD_SendCmd+0x6c>
	else crc = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe85 	bl	80004ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b4c      	cmp	r3, #76	; 0x4c
 80007a6:	d101      	bne.n	80007ac <SD_SendCmd+0x7e>
 80007a8:	f7ff feb4 	bl	8000514 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007b0:	f7ff feb0 	bl	8000514 <SPI_RxByte>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da05      	bge.n	80007cc <SD_SendCmd+0x9e>
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <SD_SendCmd+0x82>

	return res;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SD_disk_initialize+0x14>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e0d1      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <SD_disk_initialize+0x2a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e0c6      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000802:	f7ff fecb 	bl	800059c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000806:	f7ff fe31 	bl	800046c <SELECT>

	/* check disk type */
	type = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080e:	2100      	movs	r1, #0
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f7ff ff8c 	bl	800072e <SD_SendCmd>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 80a1 	bne.w	8000960 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <SD_disk_initialize+0x1c4>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800082a:	2048      	movs	r0, #72	; 0x48
 800082c:	f7ff ff7f 	bl	800072e <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d155      	bne.n	80008e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e00c      	b.n	8000856 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800083c:	7bfc      	ldrb	r4, [r7, #15]
 800083e:	f7ff fe69 	bl	8000514 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f104 0310 	add.w	r3, r4, #16
 800084a:	443b      	add	r3, r7
 800084c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9ef      	bls.n	800083c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d17e      	bne.n	8000960 <SD_disk_initialize+0x188>
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2baa      	cmp	r3, #170	; 0xaa
 8000866:	d17b      	bne.n	8000960 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000868:	2100      	movs	r1, #0
 800086a:	2077      	movs	r0, #119	; 0x77
 800086c:	f7ff ff5f 	bl	800072e <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d807      	bhi.n	8000886 <SD_disk_initialize+0xae>
 8000876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800087a:	2069      	movs	r0, #105	; 0x69
 800087c:	f7ff ff57 	bl	800072e <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ec      	bne.n	8000868 <SD_disk_initialize+0x90>
 800088e:	e000      	b.n	8000892 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <SD_disk_initialize+0x1c4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d062      	beq.n	8000960 <SD_disk_initialize+0x188>
 800089a:	2100      	movs	r1, #0
 800089c:	207a      	movs	r0, #122	; 0x7a
 800089e:	f7ff ff46 	bl	800072e <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d15b      	bne.n	8000960 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe30 	bl	8000514 <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f104 0310 	add.w	r3, r4, #16
 80008bc:	443b      	add	r3, r7
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x104>
 80008d8:	230c      	movs	r3, #12
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0x106>
 80008dc:	2304      	movs	r3, #4
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e03e      	b.n	8000960 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008e2:	2100      	movs	r1, #0
 80008e4:	2077      	movs	r0, #119	; 0x77
 80008e6:	f7ff ff22 	bl	800072e <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d808      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008f0:	2100      	movs	r1, #0
 80008f2:	2069      	movs	r0, #105	; 0x69
 80008f4:	f7ff ff1b 	bl	800072e <SD_SendCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d801      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <SD_disk_initialize+0x12c>
 8000902:	2301      	movs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10e      	bne.n	800092a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800090c:	2100      	movs	r1, #0
 800090e:	2077      	movs	r0, #119	; 0x77
 8000910:	f7ff ff0d 	bl	800072e <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d80e      	bhi.n	8000938 <SD_disk_initialize+0x160>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff ff06 	bl	800072e <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <SD_disk_initialize+0x160>
 8000928:	e00c      	b.n	8000944 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800092a:	2100      	movs	r1, #0
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fefe 	bl	800072e <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e2      	bne.n	8000906 <SD_disk_initialize+0x12e>
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <SD_disk_initialize+0x1c4>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <SD_disk_initialize+0x184>
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	2050      	movs	r0, #80	; 0x50
 8000952:	f7ff feec 	bl	800072e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x188>
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SD_disk_initialize+0x1c8>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000966:	f7ff fd91 	bl	800048c <DESELECT>
	SPI_RxByte();
 800096a:	f7ff fdd3 	bl	8000514 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e001      	b.n	800098a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000986:	f7ff fe4b 	bl	8000620 <SD_PowerOff>
	}

	return Stat;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SD_disk_initialize+0x1c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	200000ac 	.word	0x200000ac
 80009a0:	200000b0 	.word	0x200000b0

080009a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_status+0x14>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e002      	b.n	80009be <SD_disk_status+0x1a>
	return Stat;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SD_disk_status+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <SD_disk_read+0x1c>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SD_disk_read+0x20>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e051      	b.n	8000a90 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SD_disk_read+0xcc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SD_disk_read+0x32>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e048      	b.n	8000a90 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SD_disk_read+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <SD_disk_read+0x44>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a10:	f7ff fd2c 	bl	800046c <SELECT>

	if (count == 1)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d111      	bne.n	8000a3e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2051      	movs	r0, #81	; 0x51
 8000a1e:	f7ff fe86 	bl	800072e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <SD_disk_read+0xb0>
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fe0d 	bl	800064c <SD_RxDataBlock>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d021      	beq.n	8000a7c <SD_disk_read+0xb0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e01e      	b.n	8000a7c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2052      	movs	r0, #82	; 0x52
 8000a42:	f7ff fe74 	bl	800072e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d117      	bne.n	8000a7c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f7ff fdfb 	bl	800064c <SD_RxDataBlock>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <SD_disk_read+0xa6>
				buff += 512;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <SD_disk_read+0x80>
 8000a70:	e000      	b.n	8000a74 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a72:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	204c      	movs	r0, #76	; 0x4c
 8000a78:	f7ff fe59 	bl	800072e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd06 	bl	800048c <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fd48 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	200000b0 	.word	0x200000b0

08000aa0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_write+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_write+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e06b      	b.n	8000b98 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SD_disk_write+0x100>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_write+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e062      	b.n	8000b98 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SD_disk_write+0x100>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_write+0x44>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e059      	b.n	8000b98 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SD_disk_write+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <SD_disk_write+0x56>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af6:	f7ff fcb9 	bl	800046c <SELECT>

	if (count == 1)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d110      	bne.n	8000b22 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2058      	movs	r0, #88	; 0x58
 8000b04:	f7ff fe13 	bl	800072e <SD_SendCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d13a      	bne.n	8000b84 <SD_disk_write+0xe4>
 8000b0e:	21fe      	movs	r1, #254	; 0xfe
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fdc9 	bl	80006a8 <SD_TxDataBlock>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <SD_disk_write+0xe4>
			count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e030      	b.n	8000b84 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <SD_disk_write+0x104>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2077      	movs	r0, #119	; 0x77
 8000b32:	f7ff fdfc 	bl	800072e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	2057      	movs	r0, #87	; 0x57
 8000b3a:	f7ff fdf8 	bl	800072e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2059      	movs	r0, #89	; 0x59
 8000b42:	f7ff fdf4 	bl	800072e <SD_SendCmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b4c:	21fc      	movs	r1, #252	; 0xfc
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f7ff fdaa 	bl	80006a8 <SD_TxDataBlock>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <SD_disk_write+0xd0>
				buff += 512;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ee      	bne.n	8000b4c <SD_disk_write+0xac>
 8000b6e:	e000      	b.n	8000b72 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b70:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b72:	21fd      	movs	r1, #253	; 0xfd
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd97 	bl	80006a8 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b84:	f7ff fc82 	bl	800048c <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fcc4 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200000b0 	.word	0x200000b0

08000ba8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_ioctl+0x1e>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e115      	b.n	8000df2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d124      	bne.n	8000c1c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d012      	beq.n	8000c00 <SD_disk_ioctl+0x58>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc1a      	bgt.n	8000c14 <SD_disk_ioctl+0x6c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SD_disk_ioctl+0x40>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d006      	beq.n	8000bf4 <SD_disk_ioctl+0x4c>
 8000be6:	e015      	b.n	8000c14 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be8:	f7ff fd1a 	bl	8000620 <SD_PowerOff>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0fc      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf4:	f7ff fcd2 	bl	800059c <SD_PowerOn>
			res = RES_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfe:	e0f6      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	1c5c      	adds	r4, r3, #1
 8000c04:	f7ff fd18 	bl	8000638 <SD_CheckPower>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c12:	e0ec      	b.n	8000dee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	e0e8      	b.n	8000dee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <SD_disk_ioctl+0x254>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x86>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e0e1      	b.n	8000df2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2e:	f7ff fc1d 	bl	800046c <SELECT>

		switch (ctrl)
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	f200 80cb 	bhi.w	8000dd0 <SD_disk_ioctl+0x228>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <SD_disk_ioctl+0x98>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000d3b 	.word	0x08000d3b
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	08000d2b 	.word	0x08000d2b
 8000c4c:	08000dd1 	.word	0x08000dd1
 8000c50:	08000dd1 	.word	0x08000dd1
 8000c54:	08000dd1 	.word	0x08000dd1
 8000c58:	08000dd1 	.word	0x08000dd1
 8000c5c:	08000dd1 	.word	0x08000dd1
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000dd1 	.word	0x08000dd1
 8000c68:	08000dd1 	.word	0x08000dd1
 8000c6c:	08000d4d 	.word	0x08000d4d
 8000c70:	08000d71 	.word	0x08000d71
 8000c74:	08000d95 	.word	0x08000d95
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2049      	movs	r0, #73	; 0x49
 8000c7c:	f7ff fd57 	bl	800072e <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 80a8 	bne.w	8000dd8 <SD_disk_ioctl+0x230>
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcdc 	bl	800064c <SD_RxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809e 	beq.w	8000dd8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	099b      	lsrs	r3, r3, #6
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cba:	8bfb      	ldrh	r3, [r7, #30]
 8000cbc:	029a      	lsls	r2, r3, #10
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02e      	b.n	8000d22 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0306 	and.w	r3, r3, #6
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	7cbb      	ldrb	r3, [r7, #18]
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1a:	3b09      	subs	r3, #9
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d28:	e056      	b.n	8000dd8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d38:	e055      	b.n	8000de6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d3a:	f7ff fc15 	bl	8000568 <SD_ReadyWait>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d14b      	bne.n	8000ddc <SD_disk_ioctl+0x234>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e047      	b.n	8000ddc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	; 0x49
 8000d50:	f7ff fced 	bl	800072e <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <SD_disk_ioctl+0x238>
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fc75 	bl	800064c <SD_RxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d03b      	beq.n	8000de0 <SD_disk_ioctl+0x238>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6e:	e037      	b.n	8000de0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d70:	2100      	movs	r1, #0
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fcdb 	bl	800072e <SD_SendCmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d132      	bne.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d7e:	2110      	movs	r1, #16
 8000d80:	6a38      	ldr	r0, [r7, #32]
 8000d82:	f7ff fc63 	bl	800064c <SD_RxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d92:	e027      	b.n	8000de4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	207a      	movs	r0, #122	; 0x7a
 8000d98:	f7ff fcc9 	bl	800072e <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da8:	e00b      	b.n	8000dc2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000daa:	6a3c      	ldr	r4, [r7, #32]
 8000dac:	1c63      	adds	r3, r4, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	f7ff fbb0 	bl	8000514 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd6:	e006      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de4:	bf00      	nop
		}

		DESELECT();
 8000de6:	f7ff fb51 	bl	800048c <DESELECT>
		SPI_RxByte();
 8000dea:	f7ff fb93 	bl	8000514 <SPI_RxByte>
	}

	return res;
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MFRC522_CS_Pin|MFRC522_SCK_Pin|MFRC522_MOSI_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2170      	movs	r1, #112	; 0x70
 8000e60:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e62:	f001 ffa8 	bl	8002db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MFRC522_RST_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f241 0101 	movw	r1, #4097	; 0x1001
 8000e6c:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0xd4>)
 8000e6e:	f001 ffa2 	bl	8002db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MFRC522_CS_Pin|MFRC522_SCK_Pin|MFRC522_MOSI_Pin;
 8000e72:	2370      	movs	r3, #112	; 0x70
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e8a:	f001 fdf9 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFRC522_MISO_Pin;
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MFRC522_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000ea2:	f001 fded 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = MFRC522_RST_Pin|GPIO_PIN_12;
 8000ea6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_GPIO_Init+0xd4>)
 8000ec0:	f001 fdde 	bl	8002a80 <HAL_GPIO_Init>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_I2C1_Init+0x54>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_I2C1_Init+0x58>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f16:	f001 ff67 	bl	8002de8 <HAL_I2C_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f20:	f000 fc43 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000b4 	.word	0x200000b4
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	00061a80 	.word	0x00061a80

08000f34 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_I2C2_Init+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_I2C2_Init+0x58>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_I2C2_Init+0x50>)
 8000f72:	f001 ff39 	bl	8002de8 <HAL_I2C_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f7c:	f000 fc15 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000108 	.word	0x20000108
 8000f88:	40005800 	.word	0x40005800
 8000f8c:	000186a0 	.word	0x000186a0

08000f90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_I2C_MspInit+0xc8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d124      	bne.n	8000ffa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a29      	ldr	r2, [pc, #164]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc8:	23c0      	movs	r3, #192	; 0xc0
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4821      	ldr	r0, [pc, #132]	; (8001060 <HAL_I2C_MspInit+0xd0>)
 8000fdc:	f001 fd50 	bl	8002a80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fea:	61d3      	str	r3, [r2, #28]
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ff8:	e029      	b.n	800104e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_I2C_MspInit+0xd4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d124      	bne.n	800104e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_I2C_MspInit+0xcc>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800101c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4619      	mov	r1, r3
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <HAL_I2C_MspInit+0xd0>)
 8001032:	f001 fd25 	bl	8002a80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a08      	ldr	r2, [pc, #32]	; (800105c <HAL_I2C_MspInit+0xcc>)
 800103c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_I2C_MspInit+0xcc>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40005400 	.word	0x40005400
 800105c:	40021000 	.word	0x40021000
 8001060:	40010c00 	.word	0x40010c00
 8001064:	40005800 	.word	0x40005800

08001068 <DisplayTime>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DisplayTime() {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af02      	add	r7, sp, #8
    ds1307_update(&my_rtc);
 800106e:	4823      	ldr	r0, [pc, #140]	; (80010fc <DisplayTime+0x94>)
 8001070:	f7ff f9be 	bl	80003f0 <ds1307_update>
    sprintf(date_str, "%02d/%02d/%02d", my_rtc.date, my_rtc.month, my_rtc.year % 100);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <DisplayTime+0x94>)
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <DisplayTime+0x94>)
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	461c      	mov	r4, r3
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <DisplayTime+0x94>)
 8001082:	88db      	ldrh	r3, [r3, #6]
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <DisplayTime+0x98>)
 8001086:	fba2 1203 	umull	r1, r2, r2, r3
 800108a:	0952      	lsrs	r2, r2, #5
 800108c:	2164      	movs	r1, #100	; 0x64
 800108e:	fb01 f202 	mul.w	r2, r1, r2
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4623      	mov	r3, r4
 800109a:	4602      	mov	r2, r0
 800109c:	4919      	ldr	r1, [pc, #100]	; (8001104 <DisplayTime+0x9c>)
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <DisplayTime+0xa0>)
 80010a0:	f008 f8a0 	bl	80091e4 <siprintf>
    sprintf(time_str, "%02d:%02d:%02d", my_rtc.hours, my_rtc.minutes, my_rtc.seconds);
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <DisplayTime+0x94>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <DisplayTime+0x94>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <DisplayTime+0x94>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	460b      	mov	r3, r1
 80010b8:	4914      	ldr	r1, [pc, #80]	; (800110c <DisplayTime+0xa4>)
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <DisplayTime+0xa8>)
 80010bc:	f008 f892 	bl	80091e4 <siprintf>
    char date_time_str[30];
    sprintf(date_time_str, "%s %s", date_str, time_str);
 80010c0:	4638      	mov	r0, r7
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <DisplayTime+0xa8>)
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <DisplayTime+0xa0>)
 80010c6:	4913      	ldr	r1, [pc, #76]	; (8001114 <DisplayTime+0xac>)
 80010c8:	f008 f88c 	bl	80091e4 <siprintf>
    SSD1306_GotoXY(5, 1);
 80010cc:	2101      	movs	r1, #1
 80010ce:	2005      	movs	r0, #5
 80010d0:	f001 f8b2 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("                  ", &Font_7x10, BLACK);  // Borra solo la l√≠nea de texto
 80010d4:	2200      	movs	r2, #0
 80010d6:	4910      	ldr	r1, [pc, #64]	; (8001118 <DisplayTime+0xb0>)
 80010d8:	4810      	ldr	r0, [pc, #64]	; (800111c <DisplayTime+0xb4>)
 80010da:	f001 f943 	bl	8002364 <SSD1306_Puts>
    SSD1306_GotoXY(5, 1);
 80010de:	2101      	movs	r1, #1
 80010e0:	2005      	movs	r0, #5
 80010e2:	f001 f8a9 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts(date_time_str, &Font_7x10, WHITE);
 80010e6:	463b      	mov	r3, r7
 80010e8:	2201      	movs	r2, #1
 80010ea:	490b      	ldr	r1, [pc, #44]	; (8001118 <DisplayTime+0xb0>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f939 	bl	8002364 <SSD1306_Puts>
}
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20002240 	.word	0x20002240
 8001100:	51eb851f 	.word	0x51eb851f
 8001104:	0800ad4c 	.word	0x0800ad4c
 8001108:	2000222c 	.word	0x2000222c
 800110c:	0800ad5c 	.word	0x0800ad5c
 8001110:	200021fc 	.word	0x200021fc
 8001114:	0800ad6c 	.word	0x0800ad6c
 8001118:	20000004 	.word	0x20000004
 800111c:	0800ad74 	.word	0x0800ad74

08001120 <DisplayIdle>:


void DisplayIdle() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	ds1307_update(&my_rtc);
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <DisplayIdle+0x28>)
 8001126:	f7ff f963 	bl	80003f0 <ds1307_update>
	DisplayTime();
 800112a:	f7ff ff9d 	bl	8001068 <DisplayTime>
    SSD1306_GotoXY(0, 25);
 800112e:	2119      	movs	r1, #25
 8001130:	2000      	movs	r0, #0
 8001132:	f001 f881 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("ESCANEAR ", &Font_11x18, WHITE);
 8001136:	2201      	movs	r2, #1
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <DisplayIdle+0x2c>)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <DisplayIdle+0x30>)
 800113c:	f001 f912 	bl	8002364 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001140:	f000 ffd6 	bl	80020f0 <SSD1306_UpdateScreen>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20002240 	.word	0x20002240
 800114c:	2000000c 	.word	0x2000000c
 8001150:	0800ad88 	.word	0x0800ad88

08001154 <DisplayUser>:

void DisplayUser(const uint8_t* UID, const char* tiempo_inicial) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    SSD1306_Clear();
 800115e:	f001 f926 	bl	80023ae <SSD1306_Clear>
    SSD1306_GotoXY(5, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	2005      	movs	r0, #5
 8001166:	f001 f867 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("Tiempo Inicial:", &Font_7x10, WHITE);
 800116a:	2201      	movs	r2, #1
 800116c:	4924      	ldr	r1, [pc, #144]	; (8001200 <DisplayUser+0xac>)
 800116e:	4825      	ldr	r0, [pc, #148]	; (8001204 <DisplayUser+0xb0>)
 8001170:	f001 f8f8 	bl	8002364 <SSD1306_Puts>
    SSD1306_GotoXY(18, 15);
 8001174:	210f      	movs	r1, #15
 8001176:	2012      	movs	r0, #18
 8001178:	f001 f85e 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts(tiempo_inicial, &Font_11x18, WHITE);
 800117c:	2201      	movs	r2, #1
 800117e:	4922      	ldr	r1, [pc, #136]	; (8001208 <DisplayUser+0xb4>)
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f001 f8ef 	bl	8002364 <SSD1306_Puts>
    SSD1306_GotoXY(25, 36);
 8001186:	2124      	movs	r1, #36	; 0x24
 8001188:	2019      	movs	r0, #25
 800118a:	f001 f855 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("BUEN VUELO!", &Font_7x10, WHITE);
 800118e:	2201      	movs	r2, #1
 8001190:	491b      	ldr	r1, [pc, #108]	; (8001200 <DisplayUser+0xac>)
 8001192:	481e      	ldr	r0, [pc, #120]	; (800120c <DisplayUser+0xb8>)
 8001194:	f001 f8e6 	bl	8002364 <SSD1306_Puts>
    SSD1306_GotoXY(5, 50);
 8001198:	2132      	movs	r1, #50	; 0x32
 800119a:	2005      	movs	r0, #5
 800119c:	f001 f84c 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("Usuario:", &Font_7x10, WHITE);
 80011a0:	2201      	movs	r2, #1
 80011a2:	4917      	ldr	r1, [pc, #92]	; (8001200 <DisplayUser+0xac>)
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <DisplayUser+0xbc>)
 80011a6:	f001 f8dd 	bl	8002364 <SSD1306_Puts>
    sprintf(buf_tx, "%02X%02X%02X%02X", UID[0], UID[1], UID[2], UID[3]);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3302      	adds	r3, #2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3303      	adds	r3, #3
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	4911      	ldr	r1, [pc, #68]	; (8001214 <DisplayUser+0xc0>)
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <DisplayUser+0xc4>)
 80011d2:	f008 f807 	bl	80091e4 <siprintf>
    SSD1306_GotoXY(65, 50);
 80011d6:	2132      	movs	r1, #50	; 0x32
 80011d8:	2041      	movs	r0, #65	; 0x41
 80011da:	f001 f82d 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts(buf_tx, &Font_7x10, WHITE);
 80011de:	2201      	movs	r2, #1
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <DisplayUser+0xac>)
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <DisplayUser+0xc4>)
 80011e4:	f001 f8be 	bl	8002364 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80011e8:	f000 ff82 	bl	80020f0 <SSD1306_UpdateScreen>
    HAL_Delay(3000);
 80011ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011f0:	f001 fb3e 	bl	8002870 <HAL_Delay>
    SSD1306_Clear();
 80011f4:	f001 f8db 	bl	80023ae <SSD1306_Clear>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000004 	.word	0x20000004
 8001204:	0800ad94 	.word	0x0800ad94
 8001208:	2000000c 	.word	0x2000000c
 800120c:	0800ada4 	.word	0x0800ada4
 8001210:	0800adb0 	.word	0x0800adb0
 8001214:	0800adbc 	.word	0x0800adbc
 8001218:	200021c8 	.word	0x200021c8

0800121c <Display2Case>:

void Display2Case(const char* tiempo_inicial) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	 ds1307_update(&my_rtc);
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <Display2Case+0xa0>)
 8001226:	f7ff f8e3 	bl	80003f0 <ds1307_update>
	 DisplayTime();
 800122a:	f7ff ff1d 	bl	8001068 <DisplayTime>
	 SSD1306_GotoXY(5, 20);
 800122e:	2114      	movs	r1, #20
 8001230:	2005      	movs	r0, #5
 8001232:	f001 f801 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts("Inicial:", &Font_7x10, WHITE);
 8001236:	2201      	movs	r2, #1
 8001238:	4921      	ldr	r1, [pc, #132]	; (80012c0 <Display2Case+0xa4>)
 800123a:	4822      	ldr	r0, [pc, #136]	; (80012c4 <Display2Case+0xa8>)
 800123c:	f001 f892 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(65, 20);
 8001240:	2114      	movs	r1, #20
 8001242:	2041      	movs	r0, #65	; 0x41
 8001244:	f000 fff8 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts(tiempo_inicial, &Font_7x10, WHITE);
 8001248:	2201      	movs	r2, #1
 800124a:	491d      	ldr	r1, [pc, #116]	; (80012c0 <Display2Case+0xa4>)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 f889 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(5, 35);
 8001252:	2123      	movs	r1, #35	; 0x23
 8001254:	2005      	movs	r0, #5
 8001256:	f000 ffef 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts("Final:", &Font_7x10, WHITE);
 800125a:	2201      	movs	r2, #1
 800125c:	4918      	ldr	r1, [pc, #96]	; (80012c0 <Display2Case+0xa4>)
 800125e:	481a      	ldr	r0, [pc, #104]	; (80012c8 <Display2Case+0xac>)
 8001260:	f001 f880 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(5, 50);
 8001264:	2132      	movs	r1, #50	; 0x32
 8001266:	2005      	movs	r0, #5
 8001268:	f000 ffe6 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts("Usuario:", &Font_7x10, WHITE);
 800126c:	2201      	movs	r2, #1
 800126e:	4914      	ldr	r1, [pc, #80]	; (80012c0 <Display2Case+0xa4>)
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <Display2Case+0xb0>)
 8001272:	f001 f877 	bl	8002364 <SSD1306_Puts>
	 sprintf(buf_tx, "%02X%02X%02X%02X", UID[0], UID[1], UID[2], UID[3]);
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <Display2Case+0xb4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <Display2Case+0xb4>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	4618      	mov	r0, r3
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <Display2Case+0xb4>)
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	461a      	mov	r2, r3
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <Display2Case+0xb4>)
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	4603      	mov	r3, r0
 8001292:	460a      	mov	r2, r1
 8001294:	490f      	ldr	r1, [pc, #60]	; (80012d4 <Display2Case+0xb8>)
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <Display2Case+0xbc>)
 8001298:	f007 ffa4 	bl	80091e4 <siprintf>
	 SSD1306_GotoXY(65, 50);
 800129c:	2132      	movs	r1, #50	; 0x32
 800129e:	2041      	movs	r0, #65	; 0x41
 80012a0:	f000 ffca 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts(buf_tx, &Font_7x10, WHITE);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4906      	ldr	r1, [pc, #24]	; (80012c0 <Display2Case+0xa4>)
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <Display2Case+0xbc>)
 80012aa:	f001 f85b 	bl	8002364 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 80012ae:	f000 ff1f 	bl	80020f0 <SSD1306_UpdateScreen>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20002240 	.word	0x20002240
 80012c0:	20000004 	.word	0x20000004
 80012c4:	0800add0 	.word	0x0800add0
 80012c8:	0800addc 	.word	0x0800addc
 80012cc:	0800adb0 	.word	0x0800adb0
 80012d0:	200021bc 	.word	0x200021bc
 80012d4:	0800adbc 	.word	0x0800adbc
 80012d8:	200021c8 	.word	0x200021c8

080012dc <Display2Case2>:

void Display2Case2(const char* tiempo_inicial, const char* tiempo_final) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	 ds1307_update(&my_rtc);
 80012e6:	481f      	ldr	r0, [pc, #124]	; (8001364 <Display2Case2+0x88>)
 80012e8:	f7ff f882 	bl	80003f0 <ds1307_update>
	 sprintf(time_str, "%02d:%02d:%02d", my_rtc.hours, my_rtc.minutes, my_rtc.seconds);
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <Display2Case2+0x88>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <Display2Case2+0x88>)
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <Display2Case2+0x88>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	460b      	mov	r3, r1
 8001300:	4919      	ldr	r1, [pc, #100]	; (8001368 <Display2Case2+0x8c>)
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <Display2Case2+0x90>)
 8001304:	f007 ff6e 	bl	80091e4 <siprintf>
	 DisplayTime(time_str);
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <Display2Case2+0x90>)
 800130a:	f7ff fead 	bl	8001068 <DisplayTime>
	 SSD1306_GotoXY(5, 20);
 800130e:	2114      	movs	r1, #20
 8001310:	2005      	movs	r0, #5
 8001312:	f000 ff91 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts("Inicial:", &Font_7x10, WHITE);
 8001316:	2201      	movs	r2, #1
 8001318:	4915      	ldr	r1, [pc, #84]	; (8001370 <Display2Case2+0x94>)
 800131a:	4816      	ldr	r0, [pc, #88]	; (8001374 <Display2Case2+0x98>)
 800131c:	f001 f822 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(65, 20);
 8001320:	2114      	movs	r1, #20
 8001322:	2041      	movs	r0, #65	; 0x41
 8001324:	f000 ff88 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts(tiempo_inicial, &Font_7x10, WHITE);
 8001328:	2201      	movs	r2, #1
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <Display2Case2+0x94>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f001 f819 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(5, 35);
 8001332:	2123      	movs	r1, #35	; 0x23
 8001334:	2005      	movs	r0, #5
 8001336:	f000 ff7f 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts("Final:", &Font_7x10, WHITE);
 800133a:	2201      	movs	r2, #1
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <Display2Case2+0x94>)
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <Display2Case2+0x9c>)
 8001340:	f001 f810 	bl	8002364 <SSD1306_Puts>
	 SSD1306_GotoXY(65, 35);
 8001344:	2123      	movs	r1, #35	; 0x23
 8001346:	2041      	movs	r0, #65	; 0x41
 8001348:	f000 ff76 	bl	8002238 <SSD1306_GotoXY>
	 SSD1306_Puts(tiempo_final, &Font_7x10, WHITE);
 800134c:	2201      	movs	r2, #1
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <Display2Case2+0x94>)
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f001 f807 	bl	8002364 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8001356:	f000 fecb 	bl	80020f0 <SSD1306_UpdateScreen>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20002240 	.word	0x20002240
 8001368:	0800ad5c 	.word	0x0800ad5c
 800136c:	200021fc 	.word	0x200021fc
 8001370:	20000004 	.word	0x20000004
 8001374:	0800add0 	.word	0x0800add0
 8001378:	0800addc 	.word	0x0800addc

0800137c <DisplayMessage>:

void DisplayMessage(const char* message) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    SSD1306_Clear();
 8001384:	f001 f813 	bl	80023ae <SSD1306_Clear>
    SSD1306_GotoXY(5, 1);
 8001388:	2101      	movs	r1, #1
 800138a:	2005      	movs	r0, #5
 800138c:	f000 ff54 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts("Tiempo de Vuelo:", &Font_7x10, WHITE);
 8001390:	2201      	movs	r2, #1
 8001392:	4909      	ldr	r1, [pc, #36]	; (80013b8 <DisplayMessage+0x3c>)
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <DisplayMessage+0x40>)
 8001396:	f000 ffe5 	bl	8002364 <SSD1306_Puts>
    SSD1306_GotoXY(18, 15); // Posici√≥n del mensaje en la pantalla
 800139a:	210f      	movs	r1, #15
 800139c:	2012      	movs	r0, #18
 800139e:	f000 ff4b 	bl	8002238 <SSD1306_GotoXY>
    SSD1306_Puts(message, &Font_11x18, WHITE);
 80013a2:	2201      	movs	r2, #1
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <DisplayMessage+0x44>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 ffdc 	bl	8002364 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80013ac:	f000 fea0 	bl	80020f0 <SSD1306_UpdateScreen>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000004 	.word	0x20000004
 80013bc:	0800ade4 	.word	0x0800ade4
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <UpdateCSVDateTimeString>:

void UpdateCSVDateTimeString() {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af04      	add	r7, sp, #16
    ds1307_update(&my_rtc);
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013cc:	f7ff f810 	bl	80003f0 <ds1307_update>
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
            my_rtc.year % 100,
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013d2:	88db      	ldrh	r3, [r3, #6]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <UpdateCSVDateTimeString+0x60>)
 80013d6:	fba2 1203 	umull	r1, r2, r2, r3
 80013da:	0952      	lsrs	r2, r2, #5
 80013dc:	2164      	movs	r1, #100	; 0x64
 80013de:	fb01 f202 	mul.w	r2, r1, r2
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461c      	mov	r4, r3
            my_rtc.month,
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013ea:	795b      	ldrb	r3, [r3, #5]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013ec:	461d      	mov	r5, r3
            my_rtc.date,
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013f0:	791b      	ldrb	r3, [r3, #4]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013f2:	461a      	mov	r2, r3
            my_rtc.hours,
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013f6:	789b      	ldrb	r3, [r3, #2]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013f8:	4619      	mov	r1, r3
            my_rtc.minutes,
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 80013fe:	4618      	mov	r0, r3
            my_rtc.seconds);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <UpdateCSVDateTimeString+0x5c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
    sprintf(datetime_csv_str, "20%02d-%02d-%02d %02d:%02d:%02d",
 8001404:	9303      	str	r3, [sp, #12]
 8001406:	9002      	str	r0, [sp, #8]
 8001408:	9101      	str	r1, [sp, #4]
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	462b      	mov	r3, r5
 800140e:	4622      	mov	r2, r4
 8001410:	4905      	ldr	r1, [pc, #20]	; (8001428 <UpdateCSVDateTimeString+0x64>)
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <UpdateCSVDateTimeString+0x68>)
 8001414:	f007 fee6 	bl	80091e4 <siprintf>
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	20002240 	.word	0x20002240
 8001424:	51eb851f 	.word	0x51eb851f
 8001428:	0800adf8 	.word	0x0800adf8
 800142c:	20002210 	.word	0x20002210

08001430 <CalculateTimeDifference>:
        }
    }
    return 1; // Los IDs coinciden
}

void CalculateTimeDifference(TimeRecord* record) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
    // Variables para almacenar la hora extra√≠da de los campos
    int initial_hours, initial_minutes, initial_seconds;
    int final_hours, final_minutes, final_seconds;

    // Extraer la hora desde la parte final del string: "YYYY-MM-DD HH:MM:SS"
    sscanf(record->tiempo_inicial + 11, "%d:%d:%d", &initial_hours, &initial_minutes, &initial_seconds);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3336      	adds	r3, #54	; 0x36
 800143c:	f103 000b 	add.w	r0, r3, #11
 8001440:	f107 011c 	add.w	r1, r7, #28
 8001444:	f107 0220 	add.w	r2, r7, #32
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	460b      	mov	r3, r1
 8001450:	491e      	ldr	r1, [pc, #120]	; (80014cc <CalculateTimeDifference+0x9c>)
 8001452:	f007 fee7 	bl	8009224 <siscanf>
    sscanf(record->tiempo_final + 11, "%d:%d:%d", &final_hours, &final_minutes, &final_seconds);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	334a      	adds	r3, #74	; 0x4a
 800145a:	f103 000b 	add.w	r0, r3, #11
 800145e:	f107 0110 	add.w	r1, r7, #16
 8001462:	f107 0214 	add.w	r2, r7, #20
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	460b      	mov	r3, r1
 800146e:	4917      	ldr	r1, [pc, #92]	; (80014cc <CalculateTimeDifference+0x9c>)
 8001470:	f007 fed8 	bl	8009224 <siscanf>

    // Calcular diferencia
    int time_difference_hours = final_hours - initial_hours;
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int time_difference_minutes = final_minutes - initial_minutes;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    int time_difference_seconds = final_seconds - initial_seconds;
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

    // Ajuste para negativos
    if (time_difference_seconds < 0) {
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	2b00      	cmp	r3, #0
 8001490:	da05      	bge.n	800149e <CalculateTimeDifference+0x6e>
        time_difference_seconds += 60;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	333c      	adds	r3, #60	; 0x3c
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
        time_difference_minutes -= 1;
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	3b01      	subs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (time_difference_minutes < 0) {
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da05      	bge.n	80014b0 <CalculateTimeDifference+0x80>
        time_difference_minutes += 60;
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	333c      	adds	r3, #60	; 0x3c
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
        time_difference_hours -= 1;
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	3b01      	subs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Guardar resultado
    sprintf(record->tiempo_total, "%02d:%02d:%02d", time_difference_hours, time_difference_minutes, time_difference_seconds);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 005e 	add.w	r0, r3, #94	; 0x5e
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014be:	4904      	ldr	r1, [pc, #16]	; (80014d0 <CalculateTimeDifference+0xa0>)
 80014c0:	f007 fe90 	bl	80091e4 <siprintf>
}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800ae18 	.word	0x0800ae18
 80014d0:	0800ad5c 	.word	0x0800ad5c

080014d4 <generateUniqueId>:

void generateUniqueId(ds1307_dev_t* rtc, char* output) {
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af06      	add	r7, sp, #24
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    ds1307_update(rtc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe ff86 	bl	80003f0 <ds1307_update>
    uint16_t rand_part = rand() % 1000;
 80014e4:	f007 fd90 	bl	8009008 <rand>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <generateUniqueId+0x88>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	1191      	asrs	r1, r2, #6
 80014f2:	17da      	asrs	r2, r3, #31
 80014f4:	1a8a      	subs	r2, r1, r2
 80014f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fa:	fb01 f202 	mul.w	r2, r1, r2
 80014fe:	1a9a      	subs	r2, r3, r2
 8001500:	4613      	mov	r3, r2
 8001502:	81fb      	strh	r3, [r7, #14]

    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
        rtc->year % 100,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	88db      	ldrh	r3, [r3, #6]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <generateUniqueId+0x8c>)
 800150a:	fba2 1203 	umull	r1, r2, r2, r3
 800150e:	0952      	lsrs	r2, r2, #5
 8001510:	2164      	movs	r1, #100	; 0x64
 8001512:	fb01 f202 	mul.w	r2, r1, r2
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	461d      	mov	r5, r3
        rtc->month,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	795b      	ldrb	r3, [r3, #5]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 8001520:	461e      	mov	r6, r3
        rtc->date,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	791b      	ldrb	r3, [r3, #4]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 8001526:	461a      	mov	r2, r3
        rtc->hours,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	789b      	ldrb	r3, [r3, #2]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 800152c:	4619      	mov	r1, r3
        rtc->minutes,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	785b      	ldrb	r3, [r3, #1]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 8001532:	4618      	mov	r0, r3
        rtc->seconds,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
    sprintf(output, "20%02d%02d%02d%02d%02d%02d%03d",
 8001538:	461c      	mov	r4, r3
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	9403      	str	r4, [sp, #12]
 8001540:	9002      	str	r0, [sp, #8]
 8001542:	9101      	str	r1, [sp, #4]
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	4633      	mov	r3, r6
 8001548:	462a      	mov	r2, r5
 800154a:	4906      	ldr	r1, [pc, #24]	; (8001564 <generateUniqueId+0x90>)
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f007 fe49 	bl	80091e4 <siprintf>
        rand_part
    );
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155a:	bf00      	nop
 800155c:	10624dd3 	.word	0x10624dd3
 8001560:	51eb851f 	.word	0x51eb851f
 8001564:	0800ae24 	.word	0x0800ae24

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b0a0      	sub	sp, #128	; 0x80
 800156c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f001 f91d 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001572:	f000 f8d5 	bl	8001720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001576:	f7ff fc43 	bl	8000e00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800157a:	f7ff fcad 	bl	8000ed8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800157e:	f7ff fcd9 	bl	8000f34 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001582:	f000 fc6f 	bl	8001e64 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001586:	f003 fdab 	bl	80050e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 800158a:	f000 fa69 	bl	8001a60 <MFRC522_Init>
  SSD1306_Init();
 800158e:	f000 fceb 	bl	8001f68 <SSD1306_Init>
  ds1307_init();
 8001592:	f7fe fe83 	bl	800029c <ds1307_init>


  //ds1307_config(30, 44, 12, Mar, 06, Mayo, 2025, +3, 00);

  // Montar el sistema de archivos
  f_mount(&fs, "", 0);
 8001596:	2200      	movs	r2, #0
 8001598:	4954      	ldr	r1, [pc, #336]	; (80016ec <main+0x184>)
 800159a:	4855      	ldr	r0, [pc, #340]	; (80016f0 <main+0x188>)
 800159c:	f006 fa76 	bl	8007a8c <f_mount>
  TimeRecord record;
  generateUniqueId(&my_rtc, record.id);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4853      	ldr	r0, [pc, #332]	; (80016f4 <main+0x18c>)
 80015a6:	f7ff ff95 	bl	80014d4 <generateUniqueId>
  strcpy(record.id_embebido, "AA4K0GH8");
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	3319      	adds	r3, #25
 80015ae:	4952      	ldr	r1, [pc, #328]	; (80016f8 <main+0x190>)
 80015b0:	461a      	mov	r2, r3
 80015b2:	460b      	mov	r3, r1
 80015b4:	cb03      	ldmia	r3!, {r0, r1}
 80015b6:	6010      	str	r0, [r2, #0]
 80015b8:	6051      	str	r1, [r2, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	7213      	strb	r3, [r2, #8]
    /* USER CODE BEGIN 3 */




	  switch (current_state) {
 80015be:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <main+0x194>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <main+0x64>
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d044      	beq.n	8001654 <main+0xec>
 80015ca:	e7f8      	b.n	80015be <main+0x56>
	      case STATE_IDLE:
	          DisplayIdle();
 80015cc:	f7ff fda8 	bl	8001120 <DisplayIdle>
	          if (MFRC522_IsCard(&TagType)) {
 80015d0:	484b      	ldr	r0, [pc, #300]	; (8001700 <main+0x198>)
 80015d2:	f000 fc1e 	bl	8001e12 <MFRC522_IsCard>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8083 	beq.w	80016e4 <main+0x17c>
	              if (MFRC522_ReadCardSerial((uint8_t*)&UID)) {
 80015de:	4849      	ldr	r0, [pc, #292]	; (8001704 <main+0x19c>)
 80015e0:	f000 fc29 	bl	8001e36 <MFRC522_ReadCardSerial>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d031      	beq.n	800164e <main+0xe6>
	                  HAL_Delay(500);
 80015ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ee:	f001 f93f 	bl	8002870 <HAL_Delay>
	                  sprintf(record.id_usuario, "%02X%02X%02X%02X", UID[0], UID[1], UID[2], UID[3]);
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <main+0x19c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461c      	mov	r4, r3
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <main+0x19c>)
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	461d      	mov	r5, r3
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <main+0x19c>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	461a      	mov	r2, r3
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <main+0x19c>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	4619      	mov	r1, r3
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8001610:	9101      	str	r1, [sp, #4]
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	462b      	mov	r3, r5
 8001616:	4622      	mov	r2, r4
 8001618:	493b      	ldr	r1, [pc, #236]	; (8001708 <main+0x1a0>)
 800161a:	f007 fde3 	bl	80091e4 <siprintf>

	                  generateUniqueId(&my_rtc, record.id);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4834      	ldr	r0, [pc, #208]	; (80016f4 <main+0x18c>)
 8001624:	f7ff ff56 	bl	80014d4 <generateUniqueId>


	                  UpdateCSVDateTimeString();
 8001628:	f7ff fecc 	bl	80013c4 <UpdateCSVDateTimeString>
	                  strcpy(record.tiempo_inicial, datetime_csv_str);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	3336      	adds	r3, #54	; 0x36
 8001630:	4936      	ldr	r1, [pc, #216]	; (800170c <main+0x1a4>)
 8001632:	4618      	mov	r0, r3
 8001634:	f007 fee0 	bl	80093f8 <strcpy>
	                  strcpy(tiempo_inicial, time_str);  // Usado solo en pantalla
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <main+0x1a8>)
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <main+0x1ac>)
 800163c:	f007 fedc 	bl	80093f8 <strcpy>
	                  DisplayUser(UID, tiempo_inicial);
 8001640:	4934      	ldr	r1, [pc, #208]	; (8001714 <main+0x1ac>)
 8001642:	4830      	ldr	r0, [pc, #192]	; (8001704 <main+0x19c>)
 8001644:	f7ff fd86 	bl	8001154 <DisplayUser>
	                  current_state = STATE_WAIT_FOR_SECOND_READ;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <main+0x194>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
	              }
	              MFRC522_Halt();
 800164e:	f000 fb7d 	bl	8001d4c <MFRC522_Halt>
	          }
	          break;
 8001652:	e047      	b.n	80016e4 <main+0x17c>

	      case STATE_WAIT_FOR_SECOND_READ:
	          Display2Case(tiempo_inicial);
 8001654:	482f      	ldr	r0, [pc, #188]	; (8001714 <main+0x1ac>)
 8001656:	f7ff fde1 	bl	800121c <Display2Case>
	          if (MFRC522_IsCard(&TagType)) {
 800165a:	4829      	ldr	r0, [pc, #164]	; (8001700 <main+0x198>)
 800165c:	f000 fbd9 	bl	8001e12 <MFRC522_IsCard>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <main+0x180>
	              if (MFRC522_ReadCardSerial((uint8_t*)&UID)) {
 8001666:	4827      	ldr	r0, [pc, #156]	; (8001704 <main+0x19c>)
 8001668:	f000 fbe5 	bl	8001e36 <MFRC522_ReadCardSerial>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d035      	beq.n	80016de <main+0x176>
	                  HAL_Delay(500);
 8001672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001676:	f001 f8fb 	bl	8002870 <HAL_Delay>
	                  UpdateCSVDateTimeString();
 800167a:	f7ff fea3 	bl	80013c4 <UpdateCSVDateTimeString>
	                  strcpy(record.tiempo_final, datetime_csv_str);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	334a      	adds	r3, #74	; 0x4a
 8001682:	4922      	ldr	r1, [pc, #136]	; (800170c <main+0x1a4>)
 8001684:	4618      	mov	r0, r3
 8001686:	f007 feb7 	bl	80093f8 <strcpy>
	                  CalculateTimeDifference(&record);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fecf 	bl	8001430 <CalculateTimeDifference>
	                  Display2Case2(tiempo_inicial, time_str);
 8001692:	491f      	ldr	r1, [pc, #124]	; (8001710 <main+0x1a8>)
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <main+0x1ac>)
 8001696:	f7ff fe21 	bl	80012dc <Display2Case2>
	                  HAL_Delay(3000);
 800169a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800169e:	f001 f8e7 	bl	8002870 <HAL_Delay>
	                  DisplayMessage(record.tiempo_total);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	335e      	adds	r3, #94	; 0x5e
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe68 	bl	800137c <DisplayMessage>
	                  HAL_Delay(5000);
 80016ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80016b0:	f001 f8de 	bl	8002870 <HAL_Delay>
	                  SSD1306_Clear();
 80016b4:	f000 fe7b 	bl	80023ae <SSD1306_Clear>
	                  if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ) == FR_OK) {
 80016b8:	2213      	movs	r2, #19
 80016ba:	4917      	ldr	r1, [pc, #92]	; (8001718 <main+0x1b0>)
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <main+0x1b4>)
 80016be:	f006 fa2f 	bl	8007b20 <f_open>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <main+0x170>
	                      writeCSVRecord(&fil, &record);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4813      	ldr	r0, [pc, #76]	; (800171c <main+0x1b4>)
 80016ce:	f7fe fd45 	bl	800015c <writeCSVRecord>
	                      f_close(&fil);
 80016d2:	4812      	ldr	r0, [pc, #72]	; (800171c <main+0x1b4>)
 80016d4:	f007 f843 	bl	800875e <f_close>
	                  }
	                  current_state = STATE_IDLE;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <main+0x194>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	              }
	              MFRC522_Halt();
 80016de:	f000 fb35 	bl	8001d4c <MFRC522_Halt>
	          }
	          break;
 80016e2:	e001      	b.n	80016e8 <main+0x180>
	          break;
 80016e4:	bf00      	nop
 80016e6:	e76a      	b.n	80015be <main+0x56>
	          break;
 80016e8:	bf00      	nop
	  switch (current_state) {
 80016ea:	e768      	b.n	80015be <main+0x56>
 80016ec:	0800ae44 	.word	0x0800ae44
 80016f0:	2000015c 	.word	0x2000015c
 80016f4:	20002240 	.word	0x20002240
 80016f8:	0800ae48 	.word	0x0800ae48
 80016fc:	200021b8 	.word	0x200021b8
 8001700:	200021c4 	.word	0x200021c4
 8001704:	200021bc 	.word	0x200021bc
 8001708:	0800adbc 	.word	0x0800adbc
 800170c:	20002210 	.word	0x20002210
 8001710:	200021fc 	.word	0x200021fc
 8001714:	2000224c 	.word	0x2000224c
 8001718:	0800ae54 	.word	0x0800ae54
 800171c:	2000118c 	.word	0x2000118c

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b090      	sub	sp, #64	; 0x40
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	2228      	movs	r2, #40	; 0x28
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f007 fde7 	bl	8009302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001754:	2302      	movs	r3, #2
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800175e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fc9f 	bl	80040ac <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001774:	f000 f819 	bl	80017aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2302      	movs	r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f002 ff0c 	bl	80045b0 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800179e:	f000 f804 	bl	80017aa <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3740      	adds	r7, #64	; 0x40
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ae:	b672      	cpsid	i
}
 80017b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <Error_Handler+0x8>

080017b4 <MFRC522_Rd>:
#include "main.h"
#include "mfrc522.h"

uint8_t MFRC522_Rd(uint8_t address)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
    unsigned int i, ucAddr;
    unsigned int ucResult = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2120      	movs	r1, #32
 80017c6:	4831      	ldr	r0, [pc, #196]	; (800188c <MFRC522_Rd+0xd8>)
 80017c8:	f001 faf5 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2110      	movs	r1, #16
 80017d0:	482e      	ldr	r0, [pc, #184]	; (800188c <MFRC522_Rd+0xd8>)
 80017d2:	f001 faf0 	bl	8002db6 <HAL_GPIO_WritePin>
    ucAddr = ((address << 1) & 0x7E) | 0x80;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80017de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e2:	613b      	str	r3, [r7, #16]

    for(i=8; i>0; i--)
 80017e4:	2308      	movs	r3, #8
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e01c      	b.n	8001824 <MFRC522_Rd+0x70>
    {
    	HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((ucAddr & 0x80) == 0x80));
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	4823      	ldr	r0, [pc, #140]	; (800188c <MFRC522_Rd+0xd8>)
 8001800:	f001 fad9 	bl	8002db6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 8001804:	2201      	movs	r2, #1
 8001806:	2120      	movs	r1, #32
 8001808:	4820      	ldr	r0, [pc, #128]	; (800188c <MFRC522_Rd+0xd8>)
 800180a:	f001 fad4 	bl	8002db6 <HAL_GPIO_WritePin>
        ucAddr <<= 1;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2120      	movs	r1, #32
 8001818:	481c      	ldr	r0, [pc, #112]	; (800188c <MFRC522_Rd+0xd8>)
 800181a:	f001 facc 	bl	8002db6 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3b01      	subs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1df      	bne.n	80017ea <MFRC522_Rd+0x36>
    }
    for(i=8; i>0; i--)
 800182a:	2308      	movs	r3, #8
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e019      	b.n	8001864 <MFRC522_Rd+0xb0>
    {
    	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 8001830:	2201      	movs	r2, #1
 8001832:	2120      	movs	r1, #32
 8001834:	4815      	ldr	r0, [pc, #84]	; (800188c <MFRC522_Rd+0xd8>)
 8001836:	f001 fabe 	bl	8002db6 <HAL_GPIO_WritePin>
        ucResult <<= 1;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
        ucResult |= (short)HAL_GPIO_ReadPin(MFRC522_MISO_GPIO_Port, MFRC522_MISO_Pin);
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	4812      	ldr	r0, [pc, #72]	; (800188c <MFRC522_Rd+0xd8>)
 8001844:	f001 faa0 	bl	8002d88 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	b21b      	sxth	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2120      	movs	r1, #32
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MFRC522_Rd+0xd8>)
 800185a:	f001 faac 	bl	8002db6 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3b01      	subs	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e2      	bne.n	8001830 <MFRC522_Rd+0x7c>
    }
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	2110      	movs	r1, #16
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MFRC522_Rd+0xd8>)
 8001870:	f001 faa1 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	2120      	movs	r1, #32
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MFRC522_Rd+0xd8>)
 800187a:	f001 fa9c 	bl	8002db6 <HAL_GPIO_WritePin>
    return ucResult;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	b2db      	uxtb	r3, r3
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010800 	.word	0x40010800

08001890 <MFRC522_Wr>:

void MFRC522_Wr(uint8_t address, uint8_t value)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	uint8_t i, ucAddr;
	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2120      	movs	r1, #32
 80018a4:	482d      	ldr	r0, [pc, #180]	; (800195c <MFRC522_Wr+0xcc>)
 80018a6:	f001 fa86 	bl	8002db6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2110      	movs	r1, #16
 80018ae:	482b      	ldr	r0, [pc, #172]	; (800195c <MFRC522_Wr+0xcc>)
 80018b0:	f001 fa81 	bl	8002db6 <HAL_GPIO_WritePin>
    ucAddr = ((address << 1) & 0x7E);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80018be:	73bb      	strb	r3, [r7, #14]

    for(i=8; i>0; i--)
 80018c0:	2308      	movs	r3, #8
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e019      	b.n	80018fa <MFRC522_Wr+0x6a>
    {
        HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((ucAddr & 0x80) == 0x80));
 80018c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	09db      	lsrs	r3, r3, #7
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	4821      	ldr	r0, [pc, #132]	; (800195c <MFRC522_Wr+0xcc>)
 80018d6:	f001 fa6e 	bl	8002db6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	2120      	movs	r1, #32
 80018de:	481f      	ldr	r0, [pc, #124]	; (800195c <MFRC522_Wr+0xcc>)
 80018e0:	f001 fa69 	bl	8002db6 <HAL_GPIO_WritePin>
        ucAddr <<= 1;
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	73bb      	strb	r3, [r7, #14]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2120      	movs	r1, #32
 80018ee:	481b      	ldr	r0, [pc, #108]	; (800195c <MFRC522_Wr+0xcc>)
 80018f0:	f001 fa61 	bl	8002db6 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1e2      	bne.n	80018c6 <MFRC522_Wr+0x36>
    }
    for(i=8; i>0; i--)
 8001900:	2308      	movs	r3, #8
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e019      	b.n	800193a <MFRC522_Wr+0xaa>
    {
        HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, ((value & 0x80) == 0x80));
 8001906:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	09db      	lsrs	r3, r3, #7
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4811      	ldr	r0, [pc, #68]	; (800195c <MFRC522_Wr+0xcc>)
 8001916:	f001 fa4e 	bl	8002db6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	2120      	movs	r1, #32
 800191e:	480f      	ldr	r0, [pc, #60]	; (800195c <MFRC522_Wr+0xcc>)
 8001920:	f001 fa49 	bl	8002db6 <HAL_GPIO_WritePin>
        value <<= 1;
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	71bb      	strb	r3, [r7, #6]
        HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2120      	movs	r1, #32
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <MFRC522_Wr+0xcc>)
 8001930:	f001 fa41 	bl	8002db6 <HAL_GPIO_WritePin>
    for(i=8; i>0; i--)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	3b01      	subs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e2      	bne.n	8001906 <MFRC522_Wr+0x76>
    }
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	2110      	movs	r1, #16
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MFRC522_Wr+0xcc>)
 8001946:	f001 fa36 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	2120      	movs	r1, #32
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <MFRC522_Wr+0xcc>)
 8001950:	f001 fa31 	bl	8002db6 <HAL_GPIO_WritePin>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40010800 	.word	0x40010800

08001960 <MFRC522_Clear_Bit>:

static void MFRC522_Clear_Bit(uint8_t addr, uint8_t mask)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_Rd(addr) ;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff1c 	bl	80017b4 <MFRC522_Rd>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
    MFRC522_Wr(addr, tmp&~mask);
 8001980:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001984:	43db      	mvns	r3, r3
 8001986:	b25a      	sxtb	r2, r3
 8001988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198c:	4013      	ands	r3, r2
 800198e:	b25b      	sxtb	r3, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff7a 	bl	8001890 <MFRC522_Wr>
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <MFRC522_Set_Bit>:

static void MFRC522_Set_Bit(uint8_t addr, uint8_t mask)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_Rd(addr);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fefa 	bl	80017b4 <MFRC522_Rd>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
    MFRC522_Wr(addr, tmp | mask);
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <MFRC522_Wr>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <MFRC522_Reset>:

void MFRC522_Reset(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <MFRC522_Reset+0x48>)
 80019ea:	f001 f9e4 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f000 ff3e 	bl	8002870 <HAL_Delay>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2101      	movs	r1, #1
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MFRC522_Reset+0x48>)
 80019fa:	f001 f9dc 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 ff36 	bl	8002870 <HAL_Delay>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2101      	movs	r1, #1
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MFRC522_Reset+0x48>)
 8001a0a:	f001 f9d4 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f000 ff2e 	bl	8002870 <HAL_Delay>
    MFRC522_Wr(COMMANDREG, PCD_RESETPHASE);
 8001a14:	210f      	movs	r1, #15
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff ff3a 	bl	8001890 <MFRC522_Wr>
    HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f000 ff27 	bl	8002870 <HAL_Delay>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010c00 	.word	0x40010c00

08001a2c <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	uint8_t stt = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
    stt = MFRC522_Rd(TXCONTROLREG);
 8001a36:	2014      	movs	r0, #20
 8001a38:	f7ff febc 	bl	80017b4 <MFRC522_Rd>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
    MFRC522_Set_Bit(TXCONTROLREG, 0x03);
 8001a40:	2103      	movs	r1, #3
 8001a42:	2014      	movs	r0, #20
 8001a44:	f7ff ffae 	bl	80019a4 <MFRC522_Set_Bit>
    stt = stt;
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <MFRC522_AntennaOff>:

void MFRC522_AntennaOff(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    MFRC522_Clear_Bit(TXCONTROLREG, 0x03);
 8001a54:	2103      	movs	r1, #3
 8001a56:	2014      	movs	r0, #20
 8001a58:	f7ff ff82 	bl	8001960 <MFRC522_Clear_Bit>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <MFRC522_Init>:

void MFRC522_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_SCK_GPIO_Port, MFRC522_SCK_Pin, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2120      	movs	r1, #32
 8001a68:	4818      	ldr	r0, [pc, #96]	; (8001acc <MFRC522_Init+0x6c>)
 8001a6a:	f001 f9a4 	bl	8002db6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_MOSI_GPIO_Port, MFRC522_MOSI_Pin, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2140      	movs	r1, #64	; 0x40
 8001a72:	4816      	ldr	r0, [pc, #88]	; (8001acc <MFRC522_Init+0x6c>)
 8001a74:	f001 f99f 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	4813      	ldr	r0, [pc, #76]	; (8001acc <MFRC522_Init+0x6c>)
 8001a7e:	f001 f99a 	bl	8002db6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	2101      	movs	r1, #1
 8001a86:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <MFRC522_Init+0x70>)
 8001a88:	f001 f995 	bl	8002db6 <HAL_GPIO_WritePin>
    MFRC522_Reset();
 8001a8c:	f7ff ffa8 	bl	80019e0 <MFRC522_Reset>
    MFRC522_Wr(TMODEREG, 0x8D);
 8001a90:	218d      	movs	r1, #141	; 0x8d
 8001a92:	202a      	movs	r0, #42	; 0x2a
 8001a94:	f7ff fefc 	bl	8001890 <MFRC522_Wr>
    MFRC522_Wr(TPRESCALERREG, 0x3E);
 8001a98:	213e      	movs	r1, #62	; 0x3e
 8001a9a:	202b      	movs	r0, #43	; 0x2b
 8001a9c:	f7ff fef8 	bl	8001890 <MFRC522_Wr>
    MFRC522_Wr(TRELOADREGL, 30);
 8001aa0:	211e      	movs	r1, #30
 8001aa2:	202d      	movs	r0, #45	; 0x2d
 8001aa4:	f7ff fef4 	bl	8001890 <MFRC522_Wr>
    MFRC522_Wr(TRELOADREGH, 0);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	202c      	movs	r0, #44	; 0x2c
 8001aac:	f7ff fef0 	bl	8001890 <MFRC522_Wr>
    MFRC522_Wr(TXAUTOREG, 0x40);
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	2015      	movs	r0, #21
 8001ab4:	f7ff feec 	bl	8001890 <MFRC522_Wr>
    MFRC522_Wr(MODEREG, 0x3D);
 8001ab8:	213d      	movs	r1, #61	; 0x3d
 8001aba:	2011      	movs	r0, #17
 8001abc:	f7ff fee8 	bl	8001890 <MFRC522_Wr>
    MFRC522_AntennaOff();
 8001ac0:	f7ff ffc6 	bl	8001a50 <MFRC522_AntennaOff>
    MFRC522_AntennaOn();
 8001ac4:	f7ff ffb2 	bl	8001a2c <MFRC522_AntennaOn>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t cmd, uint8_t *dat, uint8_t len, uint8_t *back_dat, unsigned *back_len)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	73bb      	strb	r3, [r7, #14]
	uint8_t _status = MI_ERR;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8001aea:	2300      	movs	r3, #0
 8001aec:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
    uint8_t n;
    unsigned i;

    switch(cmd)
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d006      	beq.n	8001b06 <MFRC522_ToCard+0x32>
 8001af8:	2b0e      	cmp	r3, #14
 8001afa:	d109      	bne.n	8001b10 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:
            irqEn = 0x12;
 8001afc:	2312      	movs	r3, #18
 8001afe:	77bb      	strb	r3, [r7, #30]
            waitIRq = 0x10;
 8001b00:	2310      	movs	r3, #16
 8001b02:	777b      	strb	r3, [r7, #29]
            break;
 8001b04:	e005      	b.n	8001b12 <MFRC522_ToCard+0x3e>

        case PCD_TRANSCEIVE:
            irqEn = 0x77;
 8001b06:	2377      	movs	r3, #119	; 0x77
 8001b08:	77bb      	strb	r3, [r7, #30]
            waitIRq = 0x30;
 8001b0a:	2330      	movs	r3, #48	; 0x30
 8001b0c:	777b      	strb	r3, [r7, #29]
            break;
 8001b0e:	e000      	b.n	8001b12 <MFRC522_ToCard+0x3e>

        default:
            break;
 8001b10:	bf00      	nop
    }
    MFRC522_Wr(COMMIENREG, irqEn | 0x80);
 8001b12:	7fbb      	ldrb	r3, [r7, #30]
 8001b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff feb7 	bl	8001890 <MFRC522_Wr>
    MFRC522_Clear_Bit(COMMIRQREG, 0x80);
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	2004      	movs	r0, #4
 8001b26:	f7ff ff1b 	bl	8001960 <MFRC522_Clear_Bit>
    MFRC522_Set_Bit(FIFOLEVELREG, 0x80);
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f7ff ff39 	bl	80019a4 <MFRC522_Set_Bit>
    MFRC522_Wr(COMMANDREG, PCD_IDLE);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff feab 	bl	8001890 <MFRC522_Wr>

    for(i=0; i<len; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e00a      	b.n	8001b56 <MFRC522_ToCard+0x82>
    {
        MFRC522_Wr(FIFODATAREG, dat[i]);
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2009      	movs	r0, #9
 8001b4c:	f7ff fea0 	bl	8001890 <MFRC522_Wr>
    for(i=0; i<len; i++)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3f0      	bcc.n	8001b40 <MFRC522_ToCard+0x6c>
    }
    MFRC522_Wr(COMMANDREG, cmd);
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fe94 	bl	8001890 <MFRC522_Wr>
    if(cmd == PCD_TRANSCEIVE)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d103      	bne.n	8001b76 <MFRC522_ToCard+0xa2>
    {
        MFRC522_Set_Bit(BITFRAMINGREG, 0x80);
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	200d      	movs	r0, #13
 8001b72:	f7ff ff17 	bl	80019a4 <MFRC522_Set_Bit>
    }
    i = 0xFFFF;
 8001b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7a:	61bb      	str	r3, [r7, #24]
    do
    {
        n = MFRC522_Rd(COMMIRQREG);
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff fe19 	bl	80017b4 <MFRC522_Rd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	773b      	strb	r3, [r7, #28]
        i--;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
    }while(i && !(n & 0x01) && !(n & waitIRq));
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <MFRC522_ToCard+0xd4>
 8001b92:	7f3b      	ldrb	r3, [r7, #28]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <MFRC522_ToCard+0xd4>
 8001b9c:	7f3a      	ldrb	r2, [r7, #28]
 8001b9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0e9      	beq.n	8001b7c <MFRC522_ToCard+0xa8>

    MFRC522_Clear_Bit(BITFRAMINGREG, 0x80);
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	200d      	movs	r0, #13
 8001bac:	f7ff fed8 	bl	8001960 <MFRC522_Clear_Bit>
    if(i != 0)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d057      	beq.n	8001c66 <MFRC522_ToCard+0x192>
    {
        if(!(MFRC522_Rd(ERRORREG) & 0x1B))
 8001bb6:	2006      	movs	r0, #6
 8001bb8:	f7ff fdfc 	bl	80017b4 <MFRC522_Rd>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 031b 	and.w	r3, r3, #27
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d14d      	bne.n	8001c62 <MFRC522_ToCard+0x18e>
        {
            _status = MI_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	77fb      	strb	r3, [r7, #31]
            if(n & irqEn & 0x01)
 8001bca:	7f3a      	ldrb	r2, [r7, #28]
 8001bcc:	7fbb      	ldrb	r3, [r7, #30]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MFRC522_ToCard+0x10a>
            {
                _status = MI_NOTAGERR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
            }
            if(cmd == PCD_TRANSCEIVE)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d140      	bne.n	8001c66 <MFRC522_ToCard+0x192>
            {
                n = MFRC522_Rd(FIFOLEVELREG);
 8001be4:	200a      	movs	r0, #10
 8001be6:	f7ff fde5 	bl	80017b4 <MFRC522_Rd>
 8001bea:	4603      	mov	r3, r0
 8001bec:	773b      	strb	r3, [r7, #28]
                lastBits = MFRC522_Rd(CONTROLREG) & 0x07;
 8001bee:	200c      	movs	r0, #12
 8001bf0:	f7ff fde0 	bl	80017b4 <MFRC522_Rd>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	75fb      	strb	r3, [r7, #23]
                if(lastBits)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <MFRC522_ToCard+0x140>
                {
                    *back_len = (n-1) * 8 + lastBits;
 8001c02:	7f3b      	ldrb	r3, [r7, #28]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	00da      	lsls	r2, r3, #3
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e004      	b.n	8001c1e <MFRC522_ToCard+0x14a>
                }
                else
                {
                    *back_len = n * 8;
 8001c14:	7f3b      	ldrb	r3, [r7, #28]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	601a      	str	r2, [r3, #0]
                }
                if(n == 0)
 8001c1e:	7f3b      	ldrb	r3, [r7, #28]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <MFRC522_ToCard+0x154>
                {
                    n = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	773b      	strb	r3, [r7, #28]
                }
                if(n > 16)
 8001c28:	7f3b      	ldrb	r3, [r7, #28]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d901      	bls.n	8001c32 <MFRC522_ToCard+0x15e>
                {
                    n = 16;
 8001c2e:	2310      	movs	r3, #16
 8001c30:	773b      	strb	r3, [r7, #28]
                }
                for(i=0; i<n; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e00a      	b.n	8001c4e <MFRC522_ToCard+0x17a>
                {
                	back_dat[i] = MFRC522_Rd(FIFODATAREG);
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	18d4      	adds	r4, r2, r3
 8001c3e:	2009      	movs	r0, #9
 8001c40:	f7ff fdb8 	bl	80017b4 <MFRC522_Rd>
 8001c44:	4603      	mov	r3, r0
 8001c46:	7023      	strb	r3, [r4, #0]
                for(i=0; i<n; i++)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	7f3b      	ldrb	r3, [r7, #28]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3f0      	bcc.n	8001c38 <MFRC522_ToCard+0x164>
                }
                back_dat[i] = 0;
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e001      	b.n	8001c66 <MFRC522_ToCard+0x192>
            }
        }
        else
        {
            _status = MI_ERR;
 8001c62:	2302      	movs	r3, #2
 8001c64:	77fb      	strb	r3, [r7, #31]
        }
    }
    return _status;
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3724      	adds	r7, #36	; 0x24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
	uint8_t _status;
    unsigned backBits;
    MFRC522_Wr(BITFRAMINGREG, 0x07);
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	200d      	movs	r0, #13
 8001c80:	f7ff fe06 	bl	8001890 <MFRC522_Wr>
    TagType[0] = reqMode;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	701a      	strb	r2, [r3, #0]
    _status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	200c      	movs	r0, #12
 8001c98:	f7ff ff1c 	bl	8001ad4 <MFRC522_ToCard>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
    if((_status != MI_OK) || (backBits != 0x10))
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <MFRC522_Request+0x3c>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d001      	beq.n	8001cb0 <MFRC522_Request+0x40>
    {
        _status = MI_ERR;
 8001cac:	2302      	movs	r3, #2
 8001cae:	73fb      	strb	r3, [r7, #15]
    }
    return _status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <MFRC522_CRC>:

void MFRC522_CRC(uint8_t *dataIn, uint8_t length, uint8_t *dataOut)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;
    MFRC522_Clear_Bit(DIVIRQREG, 0x04);
 8001cc8:	2104      	movs	r1, #4
 8001cca:	2005      	movs	r0, #5
 8001ccc:	f7ff fe48 	bl	8001960 <MFRC522_Clear_Bit>
    MFRC522_Set_Bit(FIFOLEVELREG, 0x80);
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f7ff fe66 	bl	80019a4 <MFRC522_Set_Bit>
    for(i=0; i<length; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e00a      	b.n	8001cf4 <MFRC522_CRC+0x3a>
    {
        MFRC522_Wr(FIFODATAREG, *dataIn++);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60fa      	str	r2, [r7, #12]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2009      	movs	r0, #9
 8001cea:	f7ff fdd1 	bl	8001890 <MFRC522_Wr>
    for(i=0; i<length; i++)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
 8001cf4:	7dfa      	ldrb	r2, [r7, #23]
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3f0      	bcc.n	8001cde <MFRC522_CRC+0x24>
    }
    MFRC522_Wr(COMMANDREG, PCD_CALCCRC);
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff fdc6 	bl	8001890 <MFRC522_Wr>
    i = 0xFF;
 8001d04:	23ff      	movs	r3, #255	; 0xff
 8001d06:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = MFRC522_Rd(DIVIRQREG);
 8001d08:	2005      	movs	r0, #5
 8001d0a:	f7ff fd53 	bl	80017b4 <MFRC522_Rd>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75bb      	strb	r3, [r7, #22]
        i--;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
    }
    while(i && !(n & 0x04));
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <MFRC522_CRC+0x6e>
 8001d1e:	7dbb      	ldrb	r3, [r7, #22]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <MFRC522_CRC+0x4e>
    dataOut[0] = MFRC522_Rd(CRCRESULTREGL);
 8001d28:	2022      	movs	r0, #34	; 0x22
 8001d2a:	f7ff fd43 	bl	80017b4 <MFRC522_Rd>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	701a      	strb	r2, [r3, #0]
    dataOut[1] = MFRC522_Rd(CRCRESULTREGM);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	1c5c      	adds	r4, r3, #1
 8001d3a:	2021      	movs	r0, #33	; 0x21
 8001d3c:	f7ff fd3a 	bl	80017b4 <MFRC522_Rd>
 8001d40:	4603      	mov	r3, r0
 8001d42:	7023      	strb	r3, [r4, #0]
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}

08001d4c <MFRC522_Halt>:
    }
    return size;
}

void MFRC522_Halt(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af02      	add	r7, sp, #8
    unsigned unLen;
    uint8_t buff[4];
    buff[0] = PICC_HALT;
 8001d52:	2350      	movs	r3, #80	; 0x50
 8001d54:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	707b      	strb	r3, [r7, #1]
    MFRC522_CRC(buff, 2, &buff[2]);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2102      	movs	r1, #2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ffa9 	bl	8001cba <MFRC522_CRC>
    MFRC522_Clear_Bit(STATUS2REG, 0x80);
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	2008      	movs	r0, #8
 8001d6c:	f7ff fdf8 	bl	8001960 <MFRC522_Clear_Bit>
    MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001d70:	463a      	mov	r2, r7
 8001d72:	4639      	mov	r1, r7
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f7ff fea9 	bl	8001ad4 <MFRC522_ToCard>
    MFRC522_Clear_Bit(STATUS2REG, 0x08);
 8001d82:	2108      	movs	r1, #8
 8001d84:	2008      	movs	r0, #8
 8001d86:	f7ff fdeb 	bl	8001960 <MFRC522_Clear_Bit>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <MFRC522_AntiColl>:

uint8_t MFRC522_AntiColl(uint8_t *serNum)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	6078      	str	r0, [r7, #4]
	uint8_t _status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	737b      	strb	r3, [r7, #13]
    unsigned unLen;
    MFRC522_Wr(BITFRAMINGREG, 0x00);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200d      	movs	r0, #13
 8001da2:	f7ff fd75 	bl	8001890 <MFRC522_Wr>
    serNum[0] = PICC_ANTICOLL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2293      	movs	r2, #147	; 0x93
 8001daa:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	2220      	movs	r2, #32
 8001db2:	701a      	strb	r2, [r3, #0]
    MFRC522_Clear_Bit(STATUS2REG, 0x08);
 8001db4:	2108      	movs	r1, #8
 8001db6:	2008      	movs	r0, #8
 8001db8:	f7ff fdd2 	bl	8001960 <MFRC522_Clear_Bit>
    _status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	200c      	movs	r0, #12
 8001dca:	f7ff fe83 	bl	8001ad4 <MFRC522_ToCard>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
    if(_status == MI_OK)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d117      	bne.n	8001e08 <MFRC522_AntiColl+0x76>
    {
        for(i=0; i<4; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73bb      	strb	r3, [r7, #14]
 8001ddc:	e009      	b.n	8001df2 <MFRC522_AntiColl+0x60>
        {
            serNumCheck ^= serNum[i];
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
 8001de8:	4053      	eors	r3, r2
 8001dea:	737b      	strb	r3, [r7, #13]
        for(i=0; i<4; i++)
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73bb      	strb	r3, [r7, #14]
 8001df2:	7bbb      	ldrb	r3, [r7, #14]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d9f2      	bls.n	8001dde <MFRC522_AntiColl+0x4c>
        }
        if(serNumCheck != serNum[4])
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	7b7a      	ldrb	r2, [r7, #13]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <MFRC522_AntiColl+0x76>
        {
            _status = MI_ERR;
 8001e04:	2302      	movs	r3, #2
 8001e06:	73fb      	strb	r3, [r7, #15]
        }
    }
    return _status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <MFRC522_IsCard>:

uint8_t MFRC522_IsCard(uint8_t *TagType)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
    if(MFRC522_Request(PICC_REQIDL, TagType) == MI_OK)
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	2026      	movs	r0, #38	; 0x26
 8001e1e:	f7ff ff27 	bl	8001c70 <MFRC522_Request>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <MFRC522_IsCard+0x1a>
        return 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <MFRC522_IsCard+0x1c>
    else
        return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <MFRC522_ReadCardSerial>:

uint8_t MFRC522_ReadCardSerial(uint8_t *str)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	uint8_t _status;
    _status = MFRC522_AntiColl(str);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa7 	bl	8001d92 <MFRC522_AntiColl>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
    str[4] = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    if(_status == MI_OK)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <MFRC522_ReadCardSerial+0x24>
        return 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <MFRC522_ReadCardSerial+0x26>
    else
        return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <MX_SPI2_Init+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eb0:	220a      	movs	r2, #10
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eb6:	f002 fcf5 	bl	80048a4 <HAL_SPI_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ec0:	f7ff fc73 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20002260 	.word	0x20002260
 8001ecc:	40003800 	.word	0x40003800

08001ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_SPI_MspInit+0x8c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d131      	bne.n	8001f54 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efa:	61d3      	str	r3, [r2, #28]
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_SPI_MspInit+0x90>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f20:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4619      	mov	r1, r3
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <HAL_SPI_MspInit+0x94>)
 8001f36:	f000 fda3 	bl	8002a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_SPI_MspInit+0x94>)
 8001f50:	f000 fd96 	bl	8002a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40003800 	.word	0x40003800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010c00 	.word	0x40010c00

08001f68 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8001f6e:	f000 fa27 	bl	80023c0 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 10, 20000) != HAL_OK){
 8001f72:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f76:	220a      	movs	r2, #10
 8001f78:	2178      	movs	r1, #120	; 0x78
 8001f7a:	485b      	ldr	r0, [pc, #364]	; (80020e8 <SSD1306_Init+0x180>)
 8001f7c:	f001 fbe2 	bl	8003744 <HAL_I2C_IsDeviceReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SSD1306_Init+0x22>
		return 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e0a9      	b.n	80020de <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8001f8a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f8e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f90:	e002      	b.n	8001f98 <SSD1306_Init+0x30>
		p--;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8001f9e:	22ae      	movs	r2, #174	; 0xae
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2078      	movs	r0, #120	; 0x78
 8001fa4:	f000 fa86 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001fa8:	2220      	movs	r2, #32
 8001faa:	2100      	movs	r1, #0
 8001fac:	2078      	movs	r0, #120	; 0x78
 8001fae:	f000 fa81 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2078      	movs	r0, #120	; 0x78
 8001fb8:	f000 fa7c 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001fbc:	22b0      	movs	r2, #176	; 0xb0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2078      	movs	r0, #120	; 0x78
 8001fc2:	f000 fa77 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001fc6:	22c8      	movs	r2, #200	; 0xc8
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2078      	movs	r0, #120	; 0x78
 8001fcc:	f000 fa72 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2078      	movs	r0, #120	; 0x78
 8001fd6:	f000 fa6d 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2078      	movs	r0, #120	; 0x78
 8001fe0:	f000 fa68 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2078      	movs	r0, #120	; 0x78
 8001fea:	f000 fa63 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001fee:	2281      	movs	r2, #129	; 0x81
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2078      	movs	r0, #120	; 0x78
 8001ff4:	f000 fa5e 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2078      	movs	r0, #120	; 0x78
 8001ffe:	f000 fa59 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8002002:	22a1      	movs	r2, #161	; 0xa1
 8002004:	2100      	movs	r1, #0
 8002006:	2078      	movs	r0, #120	; 0x78
 8002008:	f000 fa54 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 800200c:	22a6      	movs	r2, #166	; 0xa6
 800200e:	2100      	movs	r1, #0
 8002010:	2078      	movs	r0, #120	; 0x78
 8002012:	f000 fa4f 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8002016:	22a8      	movs	r2, #168	; 0xa8
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	; 0x78
 800201c:	f000 fa4a 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8002020:	223f      	movs	r2, #63	; 0x3f
 8002022:	2100      	movs	r1, #0
 8002024:	2078      	movs	r0, #120	; 0x78
 8002026:	f000 fa45 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 800202a:	22a4      	movs	r2, #164	; 0xa4
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 fa40 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8002034:	22d3      	movs	r2, #211	; 0xd3
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f000 fa3b 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	; 0x78
 8002044:	f000 fa36 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8002048:	22d5      	movs	r2, #213	; 0xd5
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	; 0x78
 800204e:	f000 fa31 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8002052:	22f0      	movs	r2, #240	; 0xf0
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	; 0x78
 8002058:	f000 fa2c 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800205c:	22d9      	movs	r2, #217	; 0xd9
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 fa27 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8002066:	2222      	movs	r2, #34	; 0x22
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa22 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8002070:	22da      	movs	r2, #218	; 0xda
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	; 0x78
 8002076:	f000 fa1d 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800207a:	2212      	movs	r2, #18
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	; 0x78
 8002080:	f000 fa18 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002084:	22db      	movs	r2, #219	; 0xdb
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa13 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800208e:	2220      	movs	r2, #32
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	; 0x78
 8002094:	f000 fa0e 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8002098:	228d      	movs	r2, #141	; 0x8d
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	; 0x78
 800209e:	f000 fa09 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 80020a2:	2214      	movs	r2, #20
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 fa04 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80020ac:	22af      	movs	r2, #175	; 0xaf
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 f9ff 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020b6:	222e      	movs	r2, #46	; 0x2e
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 f9fa 	bl	80024b4 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f843 	bl	800214c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80020c6:	f000 f813 	bl	80020f0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <SSD1306_Init+0x184>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <SSD1306_Init+0x184>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SSD1306_Init+0x184>)
 80020d8:	2201      	movs	r2, #1
 80020da:	715a      	strb	r2, [r3, #5]
	return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200000b4 	.word	0x200000b4
 80020ec:	200026b8 	.word	0x200026b8

080020f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e01d      	b.n	8002138 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	3b50      	subs	r3, #80	; 0x50
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	2100      	movs	r1, #0
 8002106:	2078      	movs	r0, #120	; 0x78
 8002108:	f000 f9d4 	bl	80024b4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2078      	movs	r0, #120	; 0x78
 8002112:	f000 f9cf 	bl	80024b4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002116:	2210      	movs	r2, #16
 8002118:	2100      	movs	r1, #0
 800211a:	2078      	movs	r0, #120	; 0x78
 800211c:	f000 f9ca 	bl	80024b4 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	01db      	lsls	r3, r3, #7
 8002124:	4a08      	ldr	r2, [pc, #32]	; (8002148 <SSD1306_UpdateScreen+0x58>)
 8002126:	441a      	add	r2, r3
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	2078      	movs	r0, #120	; 0x78
 800212e:	f000 f95b 	bl	80023e8 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	3301      	adds	r3, #1
 8002136:	71fb      	strb	r3, [r7, #7]
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b07      	cmp	r3, #7
 800213c:	d9de      	bls.n	80020fc <SSD1306_UpdateScreen+0xc>
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200022b8 	.word	0x200022b8

0800214c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <SSD1306_Fill+0x14>
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <SSD1306_Fill+0x16>
 8002160:	23ff      	movs	r3, #255	; 0xff
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	4619      	mov	r1, r3
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <SSD1306_Fill+0x2c>)
 800216a:	f007 f8ca 	bl	8009302 <memset>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200022b8 	.word	0x200022b8

0800217c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	460b      	mov	r3, r1
 8002188:	80bb      	strh	r3, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	2b7f      	cmp	r3, #127	; 0x7f
 8002192:	d848      	bhi.n	8002226 <SSD1306_DrawPixel+0xaa>
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	2b3f      	cmp	r3, #63	; 0x3f
 8002198:	d845      	bhi.n	8002226 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <SSD1306_DrawPixel+0xb4>)
 800219c:	791b      	ldrb	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d11a      	bne.n	80021ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	08db      	lsrs	r3, r3, #3
 80021bc:	b298      	uxth	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4413      	add	r3, r2
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <SSD1306_DrawPixel+0xb8>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	b25a      	sxtb	r2, r3
 80021ca:	88bb      	ldrh	r3, [r7, #4]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	b25b      	sxtb	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b259      	sxtb	r1, r3
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	4603      	mov	r3, r0
 80021e0:	01db      	lsls	r3, r3, #7
 80021e2:	4413      	add	r3, r2
 80021e4:	b2c9      	uxtb	r1, r1
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <SSD1306_DrawPixel+0xb8>)
 80021e8:	54d1      	strb	r1, [r2, r3]
 80021ea:	e01d      	b.n	8002228 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021ec:	88fa      	ldrh	r2, [r7, #6]
 80021ee:	88bb      	ldrh	r3, [r7, #4]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	b298      	uxth	r0, r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	4413      	add	r3, r2
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <SSD1306_DrawPixel+0xb8>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	b25a      	sxtb	r2, r3
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	b25b      	sxtb	r3, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	b25b      	sxtb	r3, r3
 8002212:	4013      	ands	r3, r2
 8002214:	b259      	sxtb	r1, r3
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	4603      	mov	r3, r0
 800221a:	01db      	lsls	r3, r3, #7
 800221c:	4413      	add	r3, r2
 800221e:	b2c9      	uxtb	r1, r1
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <SSD1306_DrawPixel+0xb8>)
 8002222:	54d1      	strb	r1, [r2, r3]
 8002224:	e000      	b.n	8002228 <SSD1306_DrawPixel+0xac>
		return;
 8002226:	bf00      	nop
	}
}
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	200026b8 	.word	0x200026b8
 8002234:	200022b8 	.word	0x200022b8

08002238 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	80fb      	strh	r3, [r7, #6]
 8002244:	4613      	mov	r3, r2
 8002246:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SSD1306_GotoXY+0x28>)
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <SSD1306_GotoXY+0x28>)
 8002250:	88bb      	ldrh	r3, [r7, #4]
 8002252:	8053      	strh	r3, [r2, #2]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200026b8 	.word	0x200026b8

08002264 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <SSD1306_Putc+0xfc>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	2b7f      	cmp	r3, #127	; 0x7f
 8002282:	dc07      	bgt.n	8002294 <SSD1306_Putc+0x30>
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <SSD1306_Putc+0xfc>)
 8002286:	885b      	ldrh	r3, [r3, #2]
 8002288:	461a      	mov	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	4413      	add	r3, r2
 8002290:	2b3f      	cmp	r3, #63	; 0x3f
 8002292:	dd01      	ble.n	8002298 <SSD1306_Putc+0x34>
		return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e05e      	b.n	8002356 <SSD1306_Putc+0xf2>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e04b      	b.n	8002336 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3b20      	subs	r3, #32
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	7849      	ldrb	r1, [r1, #1]
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	440b      	add	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	e030      	b.n	8002324 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <SSD1306_Putc+0xfc>)
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b298      	uxth	r0, r3
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <SSD1306_Putc+0xfc>)
 80022e0:	885a      	ldrh	r2, [r3, #2]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	79ba      	ldrb	r2, [r7, #6]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7ff ff45 	bl	800217c <SSD1306_DrawPixel>
 80022f2:	e014      	b.n	800231e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <SSD1306_Putc+0xfc>)
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b298      	uxth	r0, r3
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <SSD1306_Putc+0xfc>)
 8002302:	885a      	ldrh	r2, [r3, #2]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b299      	uxth	r1, r3
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff ff2f 	bl	800217c <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	3301      	adds	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4293      	cmp	r3, r2
 800232e:	d3c8      	bcc.n	80022c2 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	461a      	mov	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4293      	cmp	r3, r2
 8002340:	d3ad      	bcc.n	800229e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <SSD1306_Putc+0xfc>)
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <SSD1306_Putc+0xfc>)
 8002352:	801a      	strh	r2, [r3, #0]
	return ch;
 8002354:	79fb      	ldrb	r3, [r7, #7]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200026b8 	.word	0x200026b8

08002364 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002372:	e012      	b.n	800239a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff71 	bl	8002264 <SSD1306_Putc>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d002      	beq.n	8002394 <SSD1306_Puts+0x30>
			return *str;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	e008      	b.n	80023a6 <SSD1306_Puts+0x42>
		}
		str++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
	while(*str)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e8      	bne.n	8002374 <SSD1306_Puts+0x10>
	}
	return *str;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff feca 	bl	800214c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80023b8:	f7ff fe9a 	bl	80020f0 <SSD1306_UpdateScreen>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <SSD1306_I2C_Init+0x24>)
 80023c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023ca:	e002      	b.n	80023d2 <SSD1306_I2C_Init+0x12>
		p--;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <SSD1306_I2C_Init+0xc>
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	0003d090 	.word	0x0003d090

080023e8 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b0c7      	sub	sp, #284	; 0x11c
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80023f6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80023fa:	600a      	str	r2, [r1, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002402:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002406:	4622      	mov	r2, r4
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800240e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002412:	4602      	mov	r2, r0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800241a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800241e:	460a      	mov	r2, r1
 8002420:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800242a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800242e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800243c:	e015      	b.n	800246a <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800243e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002442:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002446:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	441a      	add	r2, r3
 800244e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002452:	3301      	adds	r3, #1
 8002454:	7811      	ldrb	r1, [r2, #0]
 8002456:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800245a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800245e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002460:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002464:	3301      	adds	r3, #1
 8002466:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800246a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800246e:	b29b      	uxth	r3, r3
 8002470:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002474:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002478:	8812      	ldrh	r2, [r2, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d8df      	bhi.n	800243e <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800247e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002482:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b299      	uxth	r1, r3
 800248a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800248e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	f107 020c 	add.w	r2, r7, #12
 800249c:	200a      	movs	r0, #10
 800249e:	9000      	str	r0, [sp, #0]
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <SSD1306_I2C_WriteMulti+0xc8>)
 80024a2:	f000 fde5 	bl	8003070 <HAL_I2C_Master_Transmit>
}
 80024a6:	bf00      	nop
 80024a8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	200000b4 	.word	0x200000b4

080024b4 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	460b      	mov	r3, r1
 80024c0:	71bb      	strb	r3, [r7, #6]
 80024c2:	4613      	mov	r3, r2
 80024c4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80024ca:	797b      	ldrb	r3, [r7, #5]
 80024cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	b299      	uxth	r1, r3
 80024d2:	f107 020c 	add.w	r2, r7, #12
 80024d6:	230a      	movs	r3, #10
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2302      	movs	r3, #2
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <SSD1306_I2C_Write+0x38>)
 80024de:	f000 fdc7 	bl	8003070 <HAL_I2C_Master_Transmit>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200000b4 	.word	0x200000b4

080024f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_MspInit+0x5c>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_MspInit+0x5c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6193      	str	r3, [r2, #24]
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_MspInit+0x5c>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_MspInit+0x5c>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a0e      	ldr	r2, [pc, #56]	; (800254c <HAL_MspInit+0x5c>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_MspInit+0x5c>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_MspInit+0x60>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_MspInit+0x60>)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <SysTick_Handler+0x34>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <SysTick_Handler+0x18>
		Timer1--;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <SysTick_Handler+0x34>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <SysTick_Handler+0x34>)
 80025ae:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <SysTick_Handler+0x38>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <SysTick_Handler+0x2c>
		Timer2--;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Handler+0x38>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <SysTick_Handler+0x38>)
 80025c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f000 f938 	bl	8002838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200000ac 	.word	0x200000ac
 80025d0:	200000ae 	.word	0x200000ae

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <_kill>:

int _kill(int pid, int sig)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ec:	f006 fed8 	bl	80093a0 <__errno>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2216      	movs	r2, #22
 80025f4:	601a      	str	r2, [r3, #0]
  return -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_exit>:

void _exit (int status)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260a:	f04f 31ff 	mov.w	r1, #4294967295
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffe7 	bl	80025e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002614:	e7fe      	b.n	8002614 <_exit+0x12>

08002616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e00a      	b.n	800263e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002628:	f3af 8000 	nop.w
 800262c:	4601      	mov	r1, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	60ba      	str	r2, [r7, #8]
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbf0      	blt.n	8002628 <_read+0x12>
  }

  return len;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e009      	b.n	8002676 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf1      	blt.n	8002662 <_write+0x12>
  }
  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_close>:

int _close(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ae:	605a      	str	r2, [r3, #4]
  return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_isatty>:

int _isatty(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <_sbrk+0x5c>)
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <_sbrk+0x60>)
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002718:	f006 fe42 	bl	80093a0 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20005000 	.word	0x20005000
 8002748:	00000400 	.word	0x00000400
 800274c:	200026c0 	.word	0x200026c0
 8002750:	20002a48 	.word	0x20002a48

08002754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002760:	f7ff fff8 	bl	8002754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002766:	490c      	ldr	r1, [pc, #48]	; (8002798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <LoopFillZerobss+0x16>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800277c:	4c09      	ldr	r4, [pc, #36]	; (80027a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278a:	f006 fe0f 	bl	80093ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7fe feeb 	bl	8001568 <main>
  bx lr
 8002792:	4770      	bx	lr
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800279c:	0800cafc 	.word	0x0800cafc
  ldr r2, =_sbss
 80027a0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80027a4:	20002a48 	.word	0x20002a48

080027a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_2_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_Init+0x28>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_Init+0x28>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 f92b 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f000 f808 	bl	80027d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7ff fe92 	bl	80024f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x54>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_InitTick+0x58>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f935 	bl	8002a66 <HAL_SYSTICK_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00e      	b.n	8002824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d80a      	bhi.n	8002822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280c:	2200      	movs	r2, #0
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f000 f90b 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_InitTick+0x5c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000014 	.word	0x20000014
 8002830:	2000001c 	.word	0x2000001c
 8002834:	20000018 	.word	0x20000018

08002838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x1c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_IncTick+0x20>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_IncTick+0x20>)
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	2000001c 	.word	0x2000001c
 8002858:	200026c4 	.word	0x200026c4

0800285c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <HAL_GetTick+0x10>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	200026c4 	.word	0x200026c4

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff fff0 	bl	800285c <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffe0 	bl	800285c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000001c 	.word	0x2000001c

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff90 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff49 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff5e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff90 	bl	8002970 <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5f 	bl	800291c <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffb0 	bl	80029d4 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	e169      	b.n	8002d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a94:	2201      	movs	r2, #1
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8158 	bne.w	8002d62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a9a      	ldr	r2, [pc, #616]	; (8002d20 <HAL_GPIO_Init+0x2a0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d05e      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
 8002abc:	4a98      	ldr	r2, [pc, #608]	; (8002d20 <HAL_GPIO_Init+0x2a0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d875      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002ac2:	4a98      	ldr	r2, [pc, #608]	; (8002d24 <HAL_GPIO_Init+0x2a4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d058      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
 8002ac8:	4a96      	ldr	r2, [pc, #600]	; (8002d24 <HAL_GPIO_Init+0x2a4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d86f      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002ace:	4a96      	ldr	r2, [pc, #600]	; (8002d28 <HAL_GPIO_Init+0x2a8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d052      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
 8002ad4:	4a94      	ldr	r2, [pc, #592]	; (8002d28 <HAL_GPIO_Init+0x2a8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d869      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002ada:	4a94      	ldr	r2, [pc, #592]	; (8002d2c <HAL_GPIO_Init+0x2ac>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d04c      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
 8002ae0:	4a92      	ldr	r2, [pc, #584]	; (8002d2c <HAL_GPIO_Init+0x2ac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d863      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002ae6:	4a92      	ldr	r2, [pc, #584]	; (8002d30 <HAL_GPIO_Init+0x2b0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d046      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
 8002aec:	4a90      	ldr	r2, [pc, #576]	; (8002d30 <HAL_GPIO_Init+0x2b0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d85d      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d82a      	bhi.n	8002b4c <HAL_GPIO_Init+0xcc>
 8002af6:	2b12      	cmp	r3, #18
 8002af8:	d859      	bhi.n	8002bae <HAL_GPIO_Init+0x12e>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <HAL_GPIO_Init+0x80>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002b67 	.word	0x08002b67
 8002b0c:	08002ba9 	.word	0x08002ba9
 8002b10:	08002baf 	.word	0x08002baf
 8002b14:	08002baf 	.word	0x08002baf
 8002b18:	08002baf 	.word	0x08002baf
 8002b1c:	08002baf 	.word	0x08002baf
 8002b20:	08002baf 	.word	0x08002baf
 8002b24:	08002baf 	.word	0x08002baf
 8002b28:	08002baf 	.word	0x08002baf
 8002b2c:	08002baf 	.word	0x08002baf
 8002b30:	08002baf 	.word	0x08002baf
 8002b34:	08002baf 	.word	0x08002baf
 8002b38:	08002baf 	.word	0x08002baf
 8002b3c:	08002baf 	.word	0x08002baf
 8002b40:	08002baf 	.word	0x08002baf
 8002b44:	08002b5d 	.word	0x08002b5d
 8002b48:	08002b71 	.word	0x08002b71
 8002b4c:	4a79      	ldr	r2, [pc, #484]	; (8002d34 <HAL_GPIO_Init+0x2b4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b52:	e02c      	b.n	8002bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	623b      	str	r3, [r7, #32]
          break;
 8002b5a:	e029      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	3304      	adds	r3, #4
 8002b62:	623b      	str	r3, [r7, #32]
          break;
 8002b64:	e024      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e01f      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	330c      	adds	r3, #12
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e01a      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b82:	2304      	movs	r3, #4
 8002b84:	623b      	str	r3, [r7, #32]
          break;
 8002b86:	e013      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b90:	2308      	movs	r3, #8
 8002b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	611a      	str	r2, [r3, #16]
          break;
 8002b9a:	e009      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	615a      	str	r2, [r3, #20]
          break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x130>
          break;
 8002bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2bff      	cmp	r3, #255	; 0xff
 8002bb4:	d801      	bhi.n	8002bba <HAL_GPIO_Init+0x13a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	e001      	b.n	8002bbe <HAL_GPIO_Init+0x13e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2bff      	cmp	r3, #255	; 0xff
 8002bc4:	d802      	bhi.n	8002bcc <HAL_GPIO_Init+0x14c>
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	e002      	b.n	8002bd2 <HAL_GPIO_Init+0x152>
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	3b08      	subs	r3, #8
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	210f      	movs	r1, #15
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	6a39      	ldr	r1, [r7, #32]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80b1 	beq.w	8002d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_GPIO_Init+0x2b8>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <HAL_GPIO_Init+0x2b8>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_GPIO_Init+0x2b8>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c18:	4a48      	ldr	r2, [pc, #288]	; (8002d3c <HAL_GPIO_Init+0x2bc>)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a40      	ldr	r2, [pc, #256]	; (8002d40 <HAL_GPIO_Init+0x2c0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d013      	beq.n	8002c6c <HAL_GPIO_Init+0x1ec>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3f      	ldr	r2, [pc, #252]	; (8002d44 <HAL_GPIO_Init+0x2c4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00d      	beq.n	8002c68 <HAL_GPIO_Init+0x1e8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a3e      	ldr	r2, [pc, #248]	; (8002d48 <HAL_GPIO_Init+0x2c8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <HAL_GPIO_Init+0x1e4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <HAL_GPIO_Init+0x2cc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d101      	bne.n	8002c60 <HAL_GPIO_Init+0x1e0>
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e006      	b.n	8002c6e <HAL_GPIO_Init+0x1ee>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e004      	b.n	8002c6e <HAL_GPIO_Init+0x1ee>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e002      	b.n	8002c6e <HAL_GPIO_Init+0x1ee>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_GPIO_Init+0x1ee>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	f002 0203 	and.w	r2, r2, #3
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	4093      	lsls	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c7e:	492f      	ldr	r1, [pc, #188]	; (8002d3c <HAL_GPIO_Init+0x2bc>)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	492c      	ldr	r1, [pc, #176]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4928      	ldr	r1, [pc, #160]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4922      	ldr	r1, [pc, #136]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60cb      	str	r3, [r1, #12]
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	491e      	ldr	r1, [pc, #120]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4918      	ldr	r1, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	4914      	ldr	r1, [pc, #80]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d021      	beq.n	8002d54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e021      	b.n	8002d62 <HAL_GPIO_Init+0x2e2>
 8002d1e:	bf00      	nop
 8002d20:	10320000 	.word	0x10320000
 8002d24:	10310000 	.word	0x10310000
 8002d28:	10220000 	.word	0x10220000
 8002d2c:	10210000 	.word	0x10210000
 8002d30:	10120000 	.word	0x10120000
 8002d34:	10110000 	.word	0x10110000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40010c00 	.word	0x40010c00
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4909      	ldr	r1, [pc, #36]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	3301      	adds	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f47f ae8e 	bne.w	8002a94 <HAL_GPIO_Init+0x14>
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	372c      	adds	r7, #44	; 0x2c
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40010400 	.word	0x40010400

08002d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
 8002da4:	e001      	b.n	8002daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	807b      	strh	r3, [r7, #2]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc6:	787b      	ldrb	r3, [r7, #1]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dd2:	e003      	b.n	8002ddc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	041a      	lsls	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	611a      	str	r2, [r3, #16]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e12b      	b.n	8003052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe f8be 	bl	8000f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f001 fcf8 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a81      	ldr	r2, [pc, #516]	; (800305c <HAL_I2C_Init+0x274>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d807      	bhi.n	8002e6c <HAL_I2C_Init+0x84>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a80      	ldr	r2, [pc, #512]	; (8003060 <HAL_I2C_Init+0x278>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e006      	b.n	8002e7a <HAL_I2C_Init+0x92>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a7d      	ldr	r2, [pc, #500]	; (8003064 <HAL_I2C_Init+0x27c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bf94      	ite	ls
 8002e74:	2301      	movls	r3, #1
 8002e76:	2300      	movhi	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0e7      	b.n	8003052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4a78      	ldr	r2, [pc, #480]	; (8003068 <HAL_I2C_Init+0x280>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9b      	lsrs	r3, r3, #18
 8002e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	; (800305c <HAL_I2C_Init+0x274>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d802      	bhi.n	8002ebc <HAL_I2C_Init+0xd4>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	e009      	b.n	8002ed0 <HAL_I2C_Init+0xe8>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	4a69      	ldr	r2, [pc, #420]	; (800306c <HAL_I2C_Init+0x284>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	3301      	adds	r3, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	495c      	ldr	r1, [pc, #368]	; (800305c <HAL_I2C_Init+0x274>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d819      	bhi.n	8002f24 <HAL_I2C_Init+0x13c>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e59      	subs	r1, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f04:	400b      	ands	r3, r1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_I2C_Init+0x138>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e59      	subs	r1, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	e051      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f20:	2304      	movs	r3, #4
 8002f22:	e04f      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <HAL_I2C_Init+0x168>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e012      	b.n	8002f76 <HAL_I2C_Init+0x18e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Init+0x196>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e022      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <HAL_I2C_Init+0x1bc>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e58      	subs	r0, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	440b      	add	r3, r1
 8002f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	0099      	lsls	r1, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	6809      	ldr	r1, [r1, #0]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6911      	ldr	r1, [r2, #16]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68d2      	ldr	r2, [r2, #12]
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	000186a0 	.word	0x000186a0
 8003060:	001e847f 	.word	0x001e847f
 8003064:	003d08ff 	.word	0x003d08ff
 8003068:	431bde83 	.word	0x431bde83
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
 8003080:	4613      	mov	r3, r2
 8003082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff fbea 	bl	800285c <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	f040 80e0 	bne.w	8003258 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2319      	movs	r3, #25
 800309e:	2201      	movs	r2, #1
 80030a0:	4970      	ldr	r1, [pc, #448]	; (8003264 <HAL_I2C_Master_Transmit+0x1f4>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fdcc 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0d3      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_I2C_Master_Transmit+0x50>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0cc      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d007      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2221      	movs	r2, #33	; 0x21
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2210      	movs	r2, #16
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	893a      	ldrh	r2, [r7, #8]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a50      	ldr	r2, [pc, #320]	; (8003268 <HAL_I2C_Master_Transmit+0x1f8>)
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003128:	8979      	ldrh	r1, [r7, #10]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fc36 	bl	80039a0 <I2C_MasterRequestWrite>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e08d      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003154:	e066      	b.n	8003224 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fe8a 	bl	8003e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11b      	bne.n	80031f8 <HAL_I2C_Master_Transmit+0x188>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	6a39      	ldr	r1, [r7, #32]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fe81 	bl	8003f04 <I2C_WaitOnBTFFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e01a      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d194      	bne.n	8003156 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	00100002 	.word	0x00100002
 8003268:	ffff0000 	.word	0xffff0000

0800326c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	817b      	strh	r3, [r7, #10]
 800327c:	4613      	mov	r3, r2
 800327e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff faea 	bl	800285c <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	f040 824b 	bne.w	800372e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2319      	movs	r3, #25
 800329e:	2201      	movs	r2, #1
 80032a0:	497f      	ldr	r1, [pc, #508]	; (80034a0 <HAL_I2C_Master_Receive+0x234>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fccc 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e23e      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2C_Master_Receive+0x54>
 80032bc:	2302      	movs	r3, #2
 80032be:	e237      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d007      	beq.n	80032e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2222      	movs	r2, #34	; 0x22
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2210      	movs	r2, #16
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	893a      	ldrh	r2, [r7, #8]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <HAL_I2C_Master_Receive+0x238>)
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fbb8 	bl	8003aa4 <I2C_MasterRequestRead>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1f8      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e1cc      	b.n	8003708 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11e      	bne.n	80033b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003386:	b672      	cpsid	i
}
 8003388:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033b0:	b662      	cpsie	i
}
 80033b2:	e035      	b.n	8003420 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11e      	bne.n	80033fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033cc:	b672      	cpsid	i
}
 80033ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033f6:	b662      	cpsie	i
}
 80033f8:	e012      	b.n	8003420 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003420:	e172      	b.n	8003708 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b03      	cmp	r3, #3
 8003428:	f200 811f 	bhi.w	800366a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b01      	cmp	r3, #1
 8003432:	d123      	bne.n	800347c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fdab 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e173      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800347a:	e145      	b.n	8003708 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b02      	cmp	r3, #2
 8003482:	d152      	bne.n	800352a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	4906      	ldr	r1, [pc, #24]	; (80034a8 <HAL_I2C_Master_Receive+0x23c>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fbd6 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e148      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
 800349e:	bf00      	nop
 80034a0:	00100002 	.word	0x00100002
 80034a4:	ffff0000 	.word	0xffff0000
 80034a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034ac:	b672      	cpsid	i
}
 80034ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034f2:	b662      	cpsie	i
}
 80034f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003528:	e0ee      	b.n	8003708 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2200      	movs	r2, #0
 8003532:	4981      	ldr	r1, [pc, #516]	; (8003738 <HAL_I2C_Master_Receive+0x4cc>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fb83 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0f5      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800358a:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_I2C_Master_Receive+0x4d0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	08db      	lsrs	r3, r3, #3
 8003590:	4a6b      	ldr	r2, [pc, #428]	; (8003740 <HAL_I2C_Master_Receive+0x4d4>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0a1a      	lsrs	r2, r3, #8
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00da      	lsls	r2, r3, #3
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d118      	bne.n	80035e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035d2:	b662      	cpsie	i
}
 80035d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0a6      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d1d9      	bne.n	80035a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003632:	b662      	cpsie	i
}
 8003634:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003668:	e04e      	b.n	8003708 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fc90 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e058      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d124      	bne.n	8003708 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f ae88 	bne.w	8003422 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3728      	adds	r7, #40	; 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	00010004 	.word	0x00010004
 800373c:	20000014 	.word	0x20000014
 8003740:	14f8b589 	.word	0x14f8b589

08003744 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff f882 	bl	800285c <HAL_GetTick>
 8003758:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	f040 8111 	bne.w	800398e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2319      	movs	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	4988      	ldr	r1, [pc, #544]	; (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa62 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	e104      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2C_IsDeviceReady+0x50>
 8003790:	2302      	movs	r3, #2
 8003792:	e0fd      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d007      	beq.n	80037ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2224      	movs	r2, #36	; 0x24
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a70      	ldr	r2, [pc, #448]	; (800399c <HAL_I2C_IsDeviceReady+0x258>)
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa20 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003814:	d103      	bne.n	800381e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0b6      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003830:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003832:	f7ff f813 	bl	800285c <HAL_GetTick>
 8003836:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003866:	e025      	b.n	80038b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fe fff8 	bl	800285c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <HAL_I2C_IsDeviceReady+0x13a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22a0      	movs	r2, #160	; 0xa0
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2ba0      	cmp	r3, #160	; 0xa0
 80038be:	d005      	beq.n	80038cc <HAL_I2C_IsDeviceReady+0x188>
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_I2C_IsDeviceReady+0x188>
 80038c6:	7dbb      	ldrb	r3, [r7, #22]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0cd      	beq.n	8003868 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d129      	bne.n	8003936 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2319      	movs	r3, #25
 800390e:	2201      	movs	r2, #1
 8003910:	4921      	ldr	r1, [pc, #132]	; (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f994 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e036      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e02c      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003944:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800394e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	490f      	ldr	r1, [pc, #60]	; (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f970 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e012      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3301      	adds	r3, #1
 800396e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	f4ff af32 	bcc.w	80037de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00100002 	.word	0x00100002
 800399c:	ffff0000 	.word	0xffff0000

080039a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	460b      	mov	r3, r1
 80039ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d006      	beq.n	80039ca <I2C_MasterRequestWrite+0x2a>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d003      	beq.n	80039ca <I2C_MasterRequestWrite+0x2a>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039c8:	d108      	bne.n	80039dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00b      	b.n	80039f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b12      	cmp	r3, #18
 80039e2:	d107      	bne.n	80039f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f91d 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00d      	beq.n	8003a28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1a:	d103      	bne.n	8003a24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e035      	b.n	8003a94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a30:	d108      	bne.n	8003a44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	e01b      	b.n	8003a7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	11db      	asrs	r3, r3, #7
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 0306 	and.w	r3, r3, #6
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f063 030f 	orn	r3, r3, #15
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <I2C_MasterRequestWrite+0xfc>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f966 	bl	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e010      	b.n	8003a94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4907      	ldr	r1, [pc, #28]	; (8003aa0 <I2C_MasterRequestWrite+0x100>)
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f956 	bl	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	00010008 	.word	0x00010008
 8003aa0:	00010002 	.word	0x00010002

08003aa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d006      	beq.n	8003ade <I2C_MasterRequestRead+0x3a>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d003      	beq.n	8003ade <I2C_MasterRequestRead+0x3a>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003adc:	d108      	bne.n	8003af0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e00b      	b.n	8003b08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	2b11      	cmp	r3, #17
 8003af6:	d107      	bne.n	8003b08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f893 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2e:	d103      	bne.n	8003b38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e079      	b.n	8003c30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	611a      	str	r2, [r3, #16]
 8003b56:	e05f      	b.n	8003c18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b58:	897b      	ldrh	r3, [r7, #10]
 8003b5a:	11db      	asrs	r3, r3, #7
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0306 	and.w	r3, r3, #6
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f063 030f 	orn	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4930      	ldr	r1, [pc, #192]	; (8003c38 <I2C_MasterRequestRead+0x194>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f8dc 	bl	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e054      	b.n	8003c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4929      	ldr	r1, [pc, #164]	; (8003c3c <I2C_MasterRequestRead+0x198>)
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f8cc 	bl	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e044      	b.n	8003c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f831 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d103      	bne.n	8003bfc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e017      	b.n	8003c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c00:	897b      	ldrh	r3, [r7, #10]
 8003c02:	11db      	asrs	r3, r3, #7
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 0306 	and.w	r3, r3, #6
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f063 030e 	orn	r3, r3, #14
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <I2C_MasterRequestRead+0x198>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f888 	bl	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010008 	.word	0x00010008
 8003c3c:	00010002 	.word	0x00010002

08003c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c50:	e048      	b.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d044      	beq.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fe fdff 	bl	800285c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d139      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10d      	bne.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	43da      	mvns	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	e00c      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d116      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e023      	b.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10d      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	e00c      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d093      	beq.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d42:	e071      	b.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d123      	bne.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e067      	b.n	8003e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d041      	beq.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fe fd5a 	bl	800285c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d136      	bne.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10c      	bne.n	8003dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e00b      	b.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e021      	b.n	8003e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d10c      	bne.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e00b      	b.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f47f af6d 	bne.w	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e80:	e034      	b.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f8e3 	bl	800404e <I2C_IsAcknowledgeFailed>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e034      	b.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d028      	beq.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fcdf 	bl	800285c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11d      	bne.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d016      	beq.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d1c3      	bne.n	8003e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f10:	e034      	b.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f89b 	bl	800404e <I2C_IsAcknowledgeFailed>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e034      	b.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d028      	beq.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe fc97 	bl	800285c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11d      	bne.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d016      	beq.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d1c3      	bne.n	8003f12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa0:	e049      	b.n	8004036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d119      	bne.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0210 	mvn.w	r2, #16
 8003fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e030      	b.n	8004046 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fe fc3a 	bl	800285c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11d      	bne.n	8004036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d016      	beq.n	8004036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e007      	b.n	8004046 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d1ae      	bne.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d11b      	bne.n	800409e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0204 	orr.w	r2, r3, #4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e272      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8087 	beq.w	80041da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040cc:	4b92      	ldr	r3, [pc, #584]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d8:	4b8f      	ldr	r3, [pc, #572]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d112      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
 80040e4:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d10b      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	4b89      	ldr	r3, [pc, #548]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d06c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x12c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d168      	bne.n	80041d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e24c      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x76>
 8004114:	4b80      	ldr	r3, [pc, #512]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a7f      	ldr	r2, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e02e      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b7b      	ldr	r3, [pc, #492]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7a      	ldr	r2, [pc, #488]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b78      	ldr	r3, [pc, #480]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800413c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0xbc>
 800414e:	4b72      	ldr	r3, [pc, #456]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a71      	ldr	r2, [pc, #452]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6e      	ldr	r2, [pc, #440]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004168:	4b6b      	ldr	r3, [pc, #428]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6a      	ldr	r2, [pc, #424]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a67      	ldr	r2, [pc, #412]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe fb68 	bl	800285c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe fb64 	bl	800285c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e200      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5d      	ldr	r3, [pc, #372]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xe4>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fb54 	bl	800285c <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fb50 	bl	800285c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1ec      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x10c>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041e6:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041f2:	4b49      	ldr	r3, [pc, #292]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x18c>
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x176>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c0      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4939      	ldr	r1, [pc, #228]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fe fb09 	bl	800285c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fe fb05 	bl	800285c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a1      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4927      	ldr	r1, [pc, #156]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe fae8 	bl	800285c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004290:	f7fe fae4 	bl	800285c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e180      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d03a      	beq.n	8004330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d019      	beq.n	80042f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe fac8 	bl	800285c <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe fac4 	bl	800285c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e160      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f000 faba 	bl	8004868 <RCC_Delay>
 80042f4:	e01c      	b.n	8004330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fc:	f7fe faae 	bl	800285c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004302:	e00f      	b.n	8004324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004304:	f7fe faaa 	bl	800285c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d908      	bls.n	8004324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e146      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	42420000 	.word	0x42420000
 8004320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e9      	bne.n	8004304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a6 	beq.w	800448a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a87      	ldr	r2, [pc, #540]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	61d3      	str	r3, [r2, #28]
 800435a:	4b85      	ldr	r3, [pc, #532]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b82      	ldr	r3, [pc, #520]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7e      	ldr	r2, [pc, #504]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004382:	f7fe fa6b 	bl	800285c <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fe fa67 	bl	800285c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e103      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	4b75      	ldr	r3, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x312>
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6213      	str	r3, [r2, #32]
 80043bc:	e02d      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x334>
 80043c6:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a69      	ldr	r2, [pc, #420]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6213      	str	r3, [r2, #32]
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4a66      	ldr	r2, [pc, #408]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6213      	str	r3, [r2, #32]
 80043de:	e01c      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d10c      	bne.n	8004402 <HAL_RCC_OscConfig+0x356>
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4a60      	ldr	r2, [pc, #384]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6213      	str	r3, [r2, #32]
 80043f4:	4b5e      	ldr	r3, [pc, #376]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6213      	str	r3, [r2, #32]
 8004400:	e00b      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 8004402:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a5a      	ldr	r2, [pc, #360]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	6213      	str	r3, [r2, #32]
 800440e:	4b58      	ldr	r3, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4a57      	ldr	r2, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d015      	beq.n	800444e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fe fa1b 	bl	800285c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fe fa17 	bl	800285c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0b1      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCC_OscConfig+0x37e>
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444e:	f7fe fa05 	bl	800285c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fa01 	bl	800285c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e09b      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446c:	4b40      	ldr	r3, [pc, #256]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ee      	bne.n	8004456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447e:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d061      	beq.n	8004564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d146      	bne.n	8004536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe f9d5 	bl	800285c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fe f9d1 	bl	800285c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e06d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d108      	bne.n	80044f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	4921      	ldr	r1, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a19      	ldr	r1, [r3, #32]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	430b      	orrs	r3, r1
 8004502:	491b      	ldr	r1, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fe f9a5 	bl	800285c <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fe f9a1 	bl	800285c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e03d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x46a>
 8004534:	e035      	b.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe f98e 	bl	800285c <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe f98a 	bl	800285c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e026      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x498>
 8004562:	e01e      	b.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e019      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
 8004578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x500>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0d0      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d910      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 0207 	bic.w	r2, r3, #7
 80045da:	4965      	ldr	r1, [pc, #404]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b8      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800462e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	494d      	ldr	r1, [pc, #308]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d040      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d115      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b41      	ldr	r3, [pc, #260]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e073      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06b      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4936      	ldr	r1, [pc, #216]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fe f8dc 	bl	800285c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fe f8d8 	bl	800285c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e053      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d210      	bcs.n	8004700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4922      	ldr	r1, [pc, #136]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e032      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4916      	ldr	r1, [pc, #88]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	490e      	ldr	r1, [pc, #56]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473e:	f000 f821 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004742:	4602      	mov	r2, r0
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	490a      	ldr	r1, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	5ccb      	ldrb	r3, [r1, r3]
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1cc>)
 8004758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1d0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe f83a 	bl	80027d8 <HAL_InitTick>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40022000 	.word	0x40022000
 8004774:	40021000 	.word	0x40021000
 8004778:	0800c37c 	.word	0x0800c37c
 800477c:	20000014 	.word	0x20000014
 8004780:	20000018 	.word	0x20000018

08004784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_GetSysClockFreq+0x94>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x30>
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x36>
 80047b2:	e027      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 80047b6:	613b      	str	r3, [r7, #16]
      break;
 80047b8:	e027      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	0c9b      	lsrs	r3, r3, #18
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d010      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_GetSysClockFreq+0x94>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	0c5b      	lsrs	r3, r3, #17
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	4a11      	ldr	r2, [pc, #68]	; (8004824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 80047e6:	fb03 f202 	mul.w	r2, r3, r2
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e004      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	613b      	str	r3, [r7, #16]
      break;
 8004802:	e002      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 8004806:	613b      	str	r3, [r7, #16]
      break;
 8004808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480a:	693b      	ldr	r3, [r7, #16]
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	007a1200 	.word	0x007a1200
 8004820:	0800c394 	.word	0x0800c394
 8004824:	0800c3a4 	.word	0x0800c3a4
 8004828:	003d0900 	.word	0x003d0900

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <HAL_RCC_GetHCLKFreq+0x10>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	20000014 	.word	0x20000014

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff2 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	0800c38c 	.word	0x0800c38c

08004868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <RCC_Delay+0x34>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <RCC_Delay+0x38>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004884:	bf00      	nop
  }
  while (Delay --);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1e5a      	subs	r2, r3, #1
 800488a:	60fa      	str	r2, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f9      	bne.n	8004884 <RCC_Delay+0x1c>
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	20000014 	.word	0x20000014
 80048a0:	10624dd3 	.word	0x10624dd3

080048a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e076      	b.n	80049a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d009      	beq.n	80048dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e005      	b.n	80048dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd faea 	bl	8001ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0c1a      	lsrs	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f002 0204 	and.w	r2, r2, #4
 8004982:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004992:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Transmit+0x22>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e12d      	b.n	8004c2a <HAL_SPI_Transmit+0x27e>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d6:	f7fd ff41 	bl	800285c <HAL_GetTick>
 80049da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049f0:	e116      	b.n	8004c20 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit+0x52>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a02:	e10d      	b.n	8004c20 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d10f      	bne.n	8004a6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d007      	beq.n	8004a8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a92:	d14f      	bne.n	8004b34 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Transmit+0xf6>
 8004a9c:	8afb      	ldrh	r3, [r7, #22]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d142      	bne.n	8004b28 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac6:	e02f      	b.n	8004b28 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d112      	bne.n	8004afc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004afa:	e015      	b.n	8004b28 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afc:	f7fd feae 	bl	800285c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d803      	bhi.n	8004b14 <HAL_SPI_Transmit+0x168>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_Transmit+0x16e>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b26:	e07b      	b.n	8004c20 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ca      	bne.n	8004ac8 <HAL_SPI_Transmit+0x11c>
 8004b32:	e050      	b.n	8004bd6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Transmit+0x196>
 8004b3c:	8afb      	ldrh	r3, [r7, #22]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d144      	bne.n	8004bcc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b68:	e030      	b.n	8004bcc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d113      	bne.n	8004ba0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b9e:	e015      	b.n	8004bcc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba0:	f7fd fe5c 	bl	800285c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d803      	bhi.n	8004bb8 <HAL_SPI_Transmit+0x20c>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d102      	bne.n	8004bbe <HAL_SPI_Transmit+0x212>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bca:	e029      	b.n	8004c20 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1c9      	bne.n	8004b6a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa62 	bl	80050a4 <SPI_EndRxTxTransaction>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e003      	b.n	8004c20 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08c      	sub	sp, #48	; 0x30
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x26>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e198      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x358>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c60:	f7fd fdfc 	bl	800285c <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00f      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x70>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c88:	d107      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x68>
 8004c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ca0:	e16d      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x82>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x82>
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cba:	e160      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d003      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2205      	movs	r2, #5
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	887a      	ldrh	r2, [r7, #2]
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d007      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d17c      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x10a>
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d16a      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d60:	e057      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d11b      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d113      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	881a      	ldrh	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d119      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x1b8>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d014      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	1c9a      	adds	r2, r3, #2
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de6:	2301      	movs	r3, #1
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dea:	f7fd fd37 	bl	800285c <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d80b      	bhi.n	8004e12 <HAL_SPI_TransmitReceive+0x1e0>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d007      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e10:	e0b5      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1a2      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x130>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d19d      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x130>
 8004e26:	e080      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_TransmitReceive+0x204>
 8004e30:	8b7b      	ldrh	r3, [r7, #26]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d16f      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5c:	e05b      	b.n	8004f16 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d11c      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x274>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x274>
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d114      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d119      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x2b6>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ee8:	f7fd fcb8 	bl	800285c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d803      	bhi.n	8004f00 <HAL_SPI_TransmitReceive+0x2ce>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x2d4>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f14:	e033      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d19e      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x22c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d199      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f8b8 	bl	80050a4 <SPI_EndRxTxTransaction>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d006      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f46:	e01a      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f74:	e003      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fa4:	f7fd fc5a 	bl	800285c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fb4:	f7fd fc52 	bl	800285c <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fba:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	0d1b      	lsrs	r3, r3, #20
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	fb02 f303 	mul.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	e054      	b.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d050      	beq.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fd4:	f7fd fc42 	bl	800285c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d902      	bls.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d13d      	bne.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d111      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500c:	d004      	beq.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d107      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005030:	d10f      	bne.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e017      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3b01      	subs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d19b      	bne.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000014 	.word	0x20000014

080050a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff6a 	bl	8004f94 <SPI_WaitFlagStateUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e000      	b.n	80050d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80050e4:	4904      	ldr	r1, [pc, #16]	; (80050f8 <MX_FATFS_Init+0x18>)
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <MX_FATFS_Init+0x1c>)
 80050e8:	f003 ff16 	bl	8008f18 <FATFS_LinkDriver>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b03      	ldr	r3, [pc, #12]	; (8005100 <MX_FATFS_Init+0x20>)
 80050f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050f4:	bf00      	nop
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	200026cc 	.word	0x200026cc
 80050fc:	20000020 	.word	0x20000020
 8005100:	200026c8 	.word	0x200026c8

08005104 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005108:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fb5a 	bl	80007d8 <SD_disk_initialize>
 8005124:	4603      	mov	r3, r0
 8005126:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4618      	mov	r0, r3
 800513e:	f7fb fc31 	bl	80009a4 <SD_disk_status>
 8005142:	4603      	mov	r3, r0
 8005144:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4603      	mov	r3, r0
 800515c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800515e:	7bf8      	ldrb	r0, [r7, #15]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	f7fb fc31 	bl	80009cc <SD_disk_read>
 800516a:	4603      	mov	r3, r0
 800516c:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005186:	7bf8      	ldrb	r0, [r7, #15]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	f7fb fc87 	bl	8000aa0 <SD_disk_write>
 8005192:	4603      	mov	r3, r0
 8005194:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	603a      	str	r2, [r7, #0]
 80051a8:	71fb      	strb	r3, [r7, #7]
 80051aa:	460b      	mov	r3, r1
 80051ac:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	79b9      	ldrb	r1, [r7, #6]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fcf7 	bl	8000ba8 <SD_disk_ioctl>
 80051ba:	4603      	mov	r3, r0
 80051bc:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <disk_status+0x30>)
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	79fa      	ldrb	r2, [r7, #7]
 80051e0:	4905      	ldr	r1, [pc, #20]	; (80051f8 <disk_status+0x30>)
 80051e2:	440a      	add	r2, r1
 80051e4:	7a12      	ldrb	r2, [r2, #8]
 80051e6:	4610      	mov	r0, r2
 80051e8:	4798      	blx	r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200028f0 	.word	0x200028f0

080051fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <disk_initialize+0x48>)
 800520e:	5cd3      	ldrb	r3, [r2, r3]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d111      	bne.n	8005238 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <disk_initialize+0x48>)
 8005218:	2101      	movs	r1, #1
 800521a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	4a09      	ldr	r2, [pc, #36]	; (8005244 <disk_initialize+0x48>)
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	79fa      	ldrb	r2, [r7, #7]
 800522a:	4906      	ldr	r1, [pc, #24]	; (8005244 <disk_initialize+0x48>)
 800522c:	440a      	add	r2, r1
 800522e:	7a12      	ldrb	r2, [r2, #8]
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200028f0 	.word	0x200028f0

08005248 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <disk_read+0x3c>)
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	689c      	ldr	r4, [r3, #8]
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	4a07      	ldr	r2, [pc, #28]	; (8005284 <disk_read+0x3c>)
 8005268:	4413      	add	r3, r2
 800526a:	7a18      	ldrb	r0, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	47a0      	blx	r4
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
  return res;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	bf00      	nop
 8005284:	200028f0 	.word	0x200028f0

08005288 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <disk_write+0x3c>)
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68dc      	ldr	r4, [r3, #12]
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <disk_write+0x3c>)
 80052a8:	4413      	add	r3, r2
 80052aa:	7a18      	ldrb	r0, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	47a0      	blx	r4
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200028f0 	.word	0x200028f0

080052c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	603a      	str	r2, [r7, #0]
 80052d2:	71fb      	strb	r3, [r7, #7]
 80052d4:	460b      	mov	r3, r1
 80052d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	4a09      	ldr	r2, [pc, #36]	; (8005300 <disk_ioctl+0x38>)
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	79fa      	ldrb	r2, [r7, #7]
 80052e6:	4906      	ldr	r1, [pc, #24]	; (8005300 <disk_ioctl+0x38>)
 80052e8:	440a      	add	r2, r1
 80052ea:	7a10      	ldrb	r0, [r2, #8]
 80052ec:	79b9      	ldrb	r1, [r7, #6]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	4798      	blx	r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200028f0 	.word	0x200028f0

08005304 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005318:	e007      	b.n	800532a <mem_cpy+0x26>
		*d++ = *s++;
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	1c53      	adds	r3, r2, #1
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	6179      	str	r1, [r7, #20]
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f2      	bne.n	800531a <mem_cpy+0x16>
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005350:	e005      	b.n	800535e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	617a      	str	r2, [r7, #20]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f4      	bne.n	8005352 <mem_set+0x12>
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800538c:	bf00      	nop
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <mem_cmp+0x40>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	61fa      	str	r2, [r7, #28]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	61ba      	str	r2, [r7, #24]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	1acb      	subs	r3, r1, r3
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ec      	beq.n	800538e <mem_cmp+0x1a>
	return r;
 80053b4:	697b      	ldr	r3, [r7, #20]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053ca:	e002      	b.n	80053d2 <chk_chr+0x12>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <chk_chr+0x26>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d1f2      	bne.n	80053cc <chk_chr+0xc>
	return *str;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	781b      	ldrb	r3, [r3, #0]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e03b      	b.n	8005480 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005408:	4931      	ldr	r1, [pc, #196]	; (80054d0 <chk_lock+0xdc>)
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02c      	beq.n	8005476 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800541c:	492c      	ldr	r1, [pc, #176]	; (80054d0 <chk_lock+0xdc>)
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d120      	bne.n	800547a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005438:	4925      	ldr	r1, [pc, #148]	; (80054d0 <chk_lock+0xdc>)
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4613      	mov	r3, r2
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	3304      	adds	r3, #4
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005450:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005452:	429a      	cmp	r2, r3
 8005454:	d111      	bne.n	800547a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005456:	491e      	ldr	r1, [pc, #120]	; (80054d0 <chk_lock+0xdc>)
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	3308      	adds	r3, #8
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005470:	429a      	cmp	r2, r3
 8005472:	d102      	bne.n	800547a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005474:	e007      	b.n	8005486 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d9c0      	bls.n	8005408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d109      	bne.n	80054a0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <chk_lock+0xa4>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d101      	bne.n	800549c <chk_lock+0xa8>
 8005498:	2300      	movs	r3, #0
 800549a:	e013      	b.n	80054c4 <chk_lock+0xd0>
 800549c:	2312      	movs	r3, #18
 800549e:	e011      	b.n	80054c4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <chk_lock+0xca>
 80054a6:	490a      	ldr	r1, [pc, #40]	; (80054d0 <chk_lock+0xdc>)
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4613      	mov	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	330a      	adds	r3, #10
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054bc:	d101      	bne.n	80054c2 <chk_lock+0xce>
 80054be:	2310      	movs	r3, #16
 80054c0:	e000      	b.n	80054c4 <chk_lock+0xd0>
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	200026d8 	.word	0x200026d8

080054d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e002      	b.n	80054e6 <enq_lock+0x12>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3301      	adds	r3, #1
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d809      	bhi.n	8005500 <enq_lock+0x2c>
 80054ec:	490a      	ldr	r1, [pc, #40]	; (8005518 <enq_lock+0x44>)
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ef      	bne.n	80054e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	200026d8 	.word	0x200026d8

0800551c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e02e      	b.n	800558a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800552c:	4958      	ldr	r1, [pc, #352]	; (8005690 <inc_lock+0x174>)
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d11d      	bne.n	8005584 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005548:	4951      	ldr	r1, [pc, #324]	; (8005690 <inc_lock+0x174>)
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3304      	adds	r3, #4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005560:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005562:	429a      	cmp	r2, r3
 8005564:	d10e      	bne.n	8005584 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005566:	494a      	ldr	r1, [pc, #296]	; (8005690 <inc_lock+0x174>)
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3308      	adds	r3, #8
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005580:	429a      	cmp	r2, r3
 8005582:	d006      	beq.n	8005592 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d9cd      	bls.n	800552c <inc_lock+0x10>
 8005590:	e000      	b.n	8005594 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005592:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d148      	bne.n	800562c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e002      	b.n	80055a6 <inc_lock+0x8a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d809      	bhi.n	80055c0 <inc_lock+0xa4>
 80055ac:	4938      	ldr	r1, [pc, #224]	; (8005690 <inc_lock+0x174>)
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ef      	bne.n	80055a0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d101      	bne.n	80055ca <inc_lock+0xae>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e05d      	b.n	8005686 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	482f      	ldr	r0, [pc, #188]	; (8005690 <inc_lock+0x174>)
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4403      	add	r3, r0
 80055e0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e8:	6899      	ldr	r1, [r3, #8]
 80055ea:	4829      	ldr	r0, [pc, #164]	; (8005690 <inc_lock+0x174>)
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4403      	add	r3, r0
 80055f8:	3304      	adds	r3, #4
 80055fa:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	88d8      	ldrh	r0, [r3, #6]
 8005604:	4922      	ldr	r1, [pc, #136]	; (8005690 <inc_lock+0x174>)
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	3308      	adds	r3, #8
 8005614:	4602      	mov	r2, r0
 8005616:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005618:	491d      	ldr	r1, [pc, #116]	; (8005690 <inc_lock+0x174>)
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	330a      	adds	r3, #10
 8005628:	2200      	movs	r2, #0
 800562a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <inc_lock+0x130>
 8005632:	4917      	ldr	r1, [pc, #92]	; (8005690 <inc_lock+0x174>)
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	330a      	adds	r3, #10
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <inc_lock+0x130>
 8005648:	2300      	movs	r3, #0
 800564a:	e01c      	b.n	8005686 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <inc_lock+0x14e>
 8005652:	490f      	ldr	r1, [pc, #60]	; (8005690 <inc_lock+0x174>)
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	330a      	adds	r3, #10
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	b299      	uxth	r1, r3
 8005668:	e001      	b.n	800566e <inc_lock+0x152>
 800566a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800566e:	4808      	ldr	r0, [pc, #32]	; (8005690 <inc_lock+0x174>)
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	330a      	adds	r3, #10
 800567e:	460a      	mov	r2, r1
 8005680:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	200026d8 	.word	0x200026d8

08005694 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d82e      	bhi.n	8005706 <dec_lock+0x72>
		n = Files[i].ctr;
 80056a8:	491b      	ldr	r1, [pc, #108]	; (8005718 <dec_lock+0x84>)
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	330a      	adds	r3, #10
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056bc:	89fb      	ldrh	r3, [r7, #14]
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	d101      	bne.n	80056c8 <dec_lock+0x34>
 80056c4:	2300      	movs	r3, #0
 80056c6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80056c8:	89fb      	ldrh	r3, [r7, #14]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <dec_lock+0x40>
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056d4:	4910      	ldr	r1, [pc, #64]	; (8005718 <dec_lock+0x84>)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	330a      	adds	r3, #10
 80056e4:	89fa      	ldrh	r2, [r7, #14]
 80056e6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <dec_lock+0x6c>
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <dec_lock+0x84>)
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	737b      	strb	r3, [r7, #13]
 8005704:	e001      	b.n	800570a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005706:	2302      	movs	r3, #2
 8005708:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800570a:	7b7b      	ldrb	r3, [r7, #13]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	200026d8 	.word	0x200026d8

0800571c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e016      	b.n	8005758 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800572a:	4910      	ldr	r1, [pc, #64]	; (800576c <clear_lock+0x50>)
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d108      	bne.n	8005752 <clear_lock+0x36>
 8005740:	490a      	ldr	r1, [pc, #40]	; (800576c <clear_lock+0x50>)
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4613      	mov	r3, r2
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3301      	adds	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d9e5      	bls.n	800572a <clear_lock+0xe>
	}
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200026d8 	.word	0x200026d8

08005770 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d040      	beq.n	800580a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	7858      	ldrb	r0, [r3, #1]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	2301      	movs	r3, #1
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	f7ff fd72 	bl	8005288 <disk_write>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <sync_window+0x40>
			res = FR_DISK_ERR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
 80057ae:	e02c      	b.n	800580a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	2200      	movs	r2, #0
 80057b8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d21b      	bcs.n	800580a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e012      	b.n	8005804 <sync_window+0x94>
					wsect += fs->fsize;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4413      	add	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f2:	7858      	ldrb	r0, [r3, #1]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	2301      	movs	r3, #1
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	f7ff fd45 	bl	8005288 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3b01      	subs	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d8e9      	bhi.n	80057de <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d01e      	beq.n	800586e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff9d 	bl	8005770 <sync_window>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d116      	bne.n	800586e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005846:	7858      	ldrb	r0, [r3, #1]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	2301      	movs	r3, #1
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	f7ff fcfb 	bl	8005248 <disk_read>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005868:	461a      	mov	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ff75 	bl	8005770 <sync_window>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f040 80ad 	bne.w	80059ec <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b03      	cmp	r3, #3
 800589c:	f040 8098 	bne.w	80059d0 <sync_fs+0x158>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a6:	795b      	ldrb	r3, [r3, #5]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	f040 8091 	bne.w	80059d0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b6:	895b      	ldrh	r3, [r3, #10]
 80058b8:	461a      	mov	r2, r3
 80058ba:	2100      	movs	r1, #0
 80058bc:	f7ff fd40 	bl	8005340 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2255      	movs	r2, #85	; 0x55
 80058c4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	22aa      	movs	r2, #170	; 0xaa
 80058cc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2252      	movs	r2, #82	; 0x52
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2252      	movs	r2, #82	; 0x52
 80058da:	705a      	strb	r2, [r3, #1]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2261      	movs	r2, #97	; 0x61
 80058e0:	709a      	strb	r2, [r3, #2]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2241      	movs	r2, #65	; 0x41
 80058e6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2272      	movs	r2, #114	; 0x72
 80058ec:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2272      	movs	r2, #114	; 0x72
 80058f4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2241      	movs	r2, #65	; 0x41
 80058fc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2261      	movs	r2, #97	; 0x61
 8005904:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	b29b      	uxth	r3, r3
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b29b      	uxth	r3, r3
 8005926:	b2da      	uxtb	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2da      	uxtb	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	0e1b      	lsrs	r3, r3, #24
 800594a:	b2da      	uxtb	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	b29b      	uxth	r3, r3
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	b29b      	uxth	r3, r3
 8005970:	b2da      	uxtb	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	b2da      	uxtb	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	0e1b      	lsrs	r3, r3, #24
 8005994:	b2da      	uxtb	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059ac:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b4:	7858      	ldrb	r0, [r3, #1]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	2301      	movs	r3, #1
 80059c2:	f7ff fc61 	bl	8005288 <disk_write>
			fs->fsi_flag = 0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059cc:	2200      	movs	r2, #0
 80059ce:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2200      	movs	r2, #0
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fc73 	bl	80052c8 <disk_ioctl>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <sync_fs+0x174>
			res = FR_DISK_ERR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3b02      	subs	r3, #2
 8005a04:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	3b02      	subs	r3, #2
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d301      	bcc.n	8005a1a <clust2sect+0x24>
 8005a16:	2300      	movs	r3, #0
 8005a18:	e00c      	b.n	8005a34 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	461a      	mov	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	fb03 f202 	mul.w	r2, r3, r2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	4413      	add	r3, r2
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d906      	bls.n	8005a5c <get_fat+0x1e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e0e4      	b.n	8005c2c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	f000 8098 	beq.w	8005ba6 <get_fat+0x168>
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	f300 80ce 	bgt.w	8005c18 <get_fat+0x1da>
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d002      	beq.n	8005a86 <get_fat+0x48>
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d05f      	beq.n	8005b44 <get_fat+0x106>
 8005a84:	e0c8      	b.n	8005c18 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa2:	895b      	ldrh	r3, [r3, #10]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aac:	4413      	add	r3, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff feaf 	bl	8005814 <move_window>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 80b0 	bne.w	8005c1e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aca:	8952      	ldrh	r2, [r2, #10]
 8005acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ad0:	fb01 f202 	mul.w	r2, r1, r2
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aea:	895b      	ldrh	r3, [r3, #10]
 8005aec:	4619      	mov	r1, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005af4:	4413      	add	r3, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fe8b 	bl	8005814 <move_window>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 808e 	bne.w	8005c22 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0c:	895b      	ldrh	r3, [r3, #10]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b16:	fb01 f202 	mul.w	r2, r1, r2
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <get_fat+0xfc>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	e002      	b.n	8005b40 <get_fat+0x102>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	617b      	str	r3, [r7, #20]
			break;
 8005b42:	e073      	b.n	8005c2c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b52:	895b      	ldrh	r3, [r3, #10]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b60:	4413      	add	r3, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fe55 	bl	8005814 <move_window>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d15a      	bne.n	8005c26 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b7a:	8952      	ldrh	r2, [r2, #10]
 8005b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b80:	fb01 f202 	mul.w	r2, r1, r2
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	b21a      	sxth	r2, r3
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	617b      	str	r3, [r7, #20]
			break;
 8005ba4:	e042      	b.n	8005c2c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	895b      	ldrh	r3, [r3, #10]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fe24 	bl	8005814 <move_window>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d12b      	bne.n	8005c2a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bdc:	8952      	ldrh	r2, [r2, #10]
 8005bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be2:	fb01 f202 	mul.w	r2, r1, r2
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3303      	adds	r3, #3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	061a      	lsls	r2, r3, #24
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	3201      	adds	r2, #1
 8005c04:	7812      	ldrb	r2, [r2, #0]
 8005c06:	0212      	lsls	r2, r2, #8
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c14:	617b      	str	r3, [r7, #20]
			break;
 8005c16:	e009      	b.n	8005c2c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e006      	b.n	8005c2c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c1e:	bf00      	nop
 8005c20:	e004      	b.n	8005c2c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c2a:	bf00      	nop
		}
	}

	return val;
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b088      	sub	sp, #32
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d906      	bls.n	8005c56 <put_fat+0x20>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <put_fat+0x26>
		res = FR_INT_ERR;
 8005c56:	2302      	movs	r3, #2
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e13a      	b.n	8005ed2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	f000 80d0 	beq.w	8005e0a <put_fat+0x1d4>
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	f300 8127 	bgt.w	8005ebe <put_fat+0x288>
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d003      	beq.n	8005c7c <put_fat+0x46>
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f000 808f 	beq.w	8005d98 <put_fat+0x162>
 8005c7a:	e120      	b.n	8005ebe <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c98:	895b      	ldrh	r3, [r3, #10]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fdb4 	bl	8005814 <move_window>
 8005cac:	4603      	mov	r3, r0
 8005cae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 8106 	bne.w	8005ec4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	617a      	str	r2, [r7, #20]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cc4:	8952      	ldrh	r2, [r2, #10]
 8005cc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cca:	fb01 f202 	mul.w	r2, r1, r2
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <put_fat+0xc6>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b25b      	sxtb	r3, r3
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	b25a      	sxtb	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e001      	b.n	8005d00 <put_fat+0xca>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	895b      	ldrh	r3, [r3, #10]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d26:	4413      	add	r3, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff fd72 	bl	8005814 <move_window>
 8005d30:	4603      	mov	r3, r0
 8005d32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d34:	7ffb      	ldrb	r3, [r7, #31]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 80c6 	bne.w	8005ec8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d42:	895b      	ldrh	r3, [r3, #10]
 8005d44:	461a      	mov	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d4c:	fb01 f202 	mul.w	r2, r1, r2
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <put_fat+0x134>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	e00e      	b.n	8005d88 <put_fat+0x152>
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f023 030f 	bic.w	r3, r3, #15
 8005d74:	b25a      	sxtb	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0a1b      	lsrs	r3, r3, #8
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d92:	2201      	movs	r2, #1
 8005d94:	711a      	strb	r2, [r3, #4]
			break;
 8005d96:	e09c      	b.n	8005ed2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	895b      	ldrh	r3, [r3, #10]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005db4:	4413      	add	r3, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff fd2b 	bl	8005814 <move_window>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dc2:	7ffb      	ldrb	r3, [r7, #31]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 8081 	bne.w	8005ecc <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dd4:	8952      	ldrh	r2, [r2, #10]
 8005dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dda:	fb01 f202 	mul.w	r2, r1, r2
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e04:	2201      	movs	r2, #1
 8005e06:	711a      	strb	r2, [r3, #4]
			break;
 8005e08:	e063      	b.n	8005ed2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	895b      	ldrh	r3, [r3, #10]
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fcf2 	bl	8005814 <move_window>
 8005e30:	4603      	mov	r3, r0
 8005e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e34:	7ffb      	ldrb	r3, [r7, #31]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d14a      	bne.n	8005ed0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e44:	8952      	ldrh	r2, [r2, #10]
 8005e46:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e4a:	fb01 f202 	mul.w	r2, r1, r2
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	061a      	lsls	r2, r3, #24
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3302      	adds	r3, #2
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	041b      	lsls	r3, r3, #16
 8005e66:	4313      	orrs	r3, r2
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	3201      	adds	r2, #1
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	0212      	lsls	r2, r2, #8
 8005e70:	4313      	orrs	r3, r2
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3301      	adds	r3, #1
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0c1a      	lsrs	r2, r3, #16
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0e1a      	lsrs	r2, r3, #24
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	3303      	adds	r3, #3
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb8:	2201      	movs	r2, #1
 8005eba:	711a      	strb	r2, [r3, #4]
			break;
 8005ebc:	e009      	b.n	8005ed2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e006      	b.n	8005ed2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005ec4:	bf00      	nop
 8005ec6:	e004      	b.n	8005ed2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005ec8:	bf00      	nop
 8005eca:	e002      	b.n	8005ed2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005ed0:	bf00      	nop
		}
	}

	return res;
 8005ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d906      	bls.n	8005efa <remove_chain+0x1e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005efa:	2302      	movs	r3, #2
 8005efc:	73fb      	strb	r3, [r7, #15]
 8005efe:	e049      	b.n	8005f94 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005f04:	e03b      	b.n	8005f7e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fd98 	bl	8005a3e <get_fat>
 8005f0e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d03b      	beq.n	8005f8e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d102      	bne.n	8005f22 <remove_chain+0x46>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e038      	b.n	8005f94 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <remove_chain+0x54>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e031      	b.n	8005f94 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005f30:	2200      	movs	r2, #0
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fe7e 	bl	8005c36 <put_fat>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d126      	bne.n	8005f92 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d013      	beq.n	8005f7a <remove_chain+0x9e>
				fs->free_clust++;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f62:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6a:	795b      	ldrb	r3, [r3, #5]
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f78:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d3bc      	bcc.n	8005f06 <remove_chain+0x2a>
 8005f8c:	e002      	b.n	8005f94 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005f92:	bf00      	nop
		}
	}

	return res;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b086      	sub	sp, #24
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d111      	bne.n	8005fd2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <create_chain+0x2e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d31d      	bcc.n	8006008 <create_chain+0x6a>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e01a      	b.n	8006008 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fd32 	bl	8005a3e <get_fat>
 8005fda:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d801      	bhi.n	8005fe6 <create_chain+0x48>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07f      	b.n	80060e6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d101      	bne.n	8005ff2 <create_chain+0x54>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	e079      	b.n	80060e6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d201      	bcs.n	8006004 <create_chain+0x66>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	e070      	b.n	80060e6 <create_chain+0x148>
		scl = clst;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	429a      	cmp	r2, r3
 800601e:	d307      	bcc.n	8006030 <create_chain+0x92>
			ncl = 2;
 8006020:	2302      	movs	r3, #2
 8006022:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d901      	bls.n	8006030 <create_chain+0x92>
 800602c:	2300      	movs	r3, #0
 800602e:	e05a      	b.n	80060e6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fd03 	bl	8005a3e <get_fat>
 8006038:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00e      	beq.n	800605e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d002      	beq.n	800604e <create_chain+0xb0>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <create_chain+0xb4>
			return cs;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	e049      	b.n	80060e6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	d1d8      	bne.n	800600c <create_chain+0x6e>
 800605a:	2300      	movs	r3, #0
 800605c:	e043      	b.n	80060e6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800605e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006060:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006064:	6979      	ldr	r1, [r7, #20]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff fde5 	bl	8005c36 <put_fat>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <create_chain+0xec>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fdd8 	bl	8005c36 <put_fat>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d121      	bne.n	80060d4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006096:	461a      	mov	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d01c      	beq.n	80060e4 <create_chain+0x146>
			fs->free_clust--;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060ba:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c2:	795b      	ldrb	r3, [r3, #5]
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	715a      	strb	r2, [r3, #5]
 80060d2:	e007      	b.n	80060e4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <create_chain+0x142>
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	e000      	b.n	80060e2 <create_chain+0x144>
 80060e0:	2301      	movs	r3, #1
 80060e2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80060e4:	697b      	ldr	r3, [r7, #20]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b087      	sub	sp, #28
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	3304      	adds	r3, #4
 8006102:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006110:	895b      	ldrh	r3, [r3, #10]
 8006112:	461a      	mov	r2, r3
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	fbb3 f3f2 	udiv	r3, r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006126:	7892      	ldrb	r2, [r2, #2]
 8006128:	fbb3 f3f2 	udiv	r3, r3, r2
 800612c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	613a      	str	r2, [r7, #16]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <clmt_clust+0x54>
 800613e:	2300      	movs	r3, #0
 8006140:	e010      	b.n	8006164 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d307      	bcc.n	800615a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006158:	e7e9      	b.n	800612e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800615a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006182:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d009      	beq.n	80061a8 <dir_sdi+0x3a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d301      	bcc.n	80061ac <dir_sdi+0x3e>
		return FR_INT_ERR;
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0aa      	b.n	8006302 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d110      	bne.n	80061d4 <dir_sdi+0x66>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d107      	bne.n	80061d4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d115      	bne.n	8006206 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e6:	891b      	ldrh	r3, [r3, #8]
 80061e8:	461a      	mov	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d301      	bcc.n	80061f4 <dir_sdi+0x86>
			return FR_INT_ERR;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e086      	b.n	8006302 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e043      	b.n	800628e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006212:	895b      	ldrh	r3, [r3, #10]
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	789b      	ldrb	r3, [r3, #2]
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800622e:	e021      	b.n	8006274 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fbff 	bl	8005a3e <get_fat>
 8006240:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d101      	bne.n	800624e <dir_sdi+0xe0>
 800624a:	2301      	movs	r3, #1
 800624c:	e059      	b.n	8006302 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d909      	bls.n	8006268 <dir_sdi+0xfa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d301      	bcc.n	800626c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006268:	2302      	movs	r3, #2
 800626a:	e04a      	b.n	8006302 <dir_sdi+0x194>
			idx -= ic;
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	429a      	cmp	r2, r3
 800627a:	d2d9      	bcs.n	8006230 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fbb5 	bl	80059f6 <clust2sect>
 800628c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	461a      	mov	r2, r3
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <dir_sdi+0x136>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e02e      	b.n	8006302 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	895b      	ldrh	r3, [r3, #10]
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062c8:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ee:	fb01 f202 	mul.w	r2, r1, r2
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	4403      	add	r3, r0
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062fe:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800630a:	b590      	push	{r4, r7, lr}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631a:	88db      	ldrh	r3, [r3, #6]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <dir_next+0x2a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <dir_next+0x2e>
		return FR_NO_FILE;
 8006334:	2304      	movs	r3, #4
 8006336:	e12e      	b.n	8006596 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006352:	fb01 f202 	mul.w	r2, r1, r2
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 80fa 	bne.w	8006552 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	3301      	adds	r3, #1
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800636e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	891b      	ldrh	r3, [r3, #8]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4293      	cmp	r3, r2
 8006390:	f0c0 80df 	bcc.w	8006552 <dir_next+0x248>
				return FR_NO_FILE;
 8006394:	2304      	movs	r3, #4
 8006396:	e0fe      	b.n	8006596 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a4:	895b      	ldrh	r3, [r3, #10]
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063be:	7892      	ldrb	r2, [r2, #2]
 80063c0:	3a01      	subs	r2, #1
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 80c4 	bne.w	8006552 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7ff fb2e 	bl	8005a3e <get_fat>
 80063e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d801      	bhi.n	80063ee <dir_next+0xe4>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0d3      	b.n	8006596 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d101      	bne.n	80063fa <dir_next+0xf0>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0cd      	b.n	8006596 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	429a      	cmp	r2, r3
 800640c:	f0c0 808e 	bcc.w	800652c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <dir_next+0x110>
 8006416:	2304      	movs	r3, #4
 8006418:	e0bd      	b.n	8006596 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7ff fdb6 	bl	8005f9e <create_chain>
 8006432:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <dir_next+0x134>
 800643a:	2307      	movs	r3, #7
 800643c:	e0ab      	b.n	8006596 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <dir_next+0x13e>
 8006444:	2302      	movs	r3, #2
 8006446:	e0a6      	b.n	8006596 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d101      	bne.n	8006454 <dir_next+0x14a>
 8006450:	2301      	movs	r3, #1
 8006452:	e0a0      	b.n	8006596 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff f987 	bl	8005770 <sync_window>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <dir_next+0x162>
 8006468:	2301      	movs	r3, #1
 800646a:	e094      	b.n	8006596 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	895b      	ldrh	r3, [r3, #10]
 8006484:	461a      	mov	r2, r3
 8006486:	2100      	movs	r1, #0
 8006488:	f7fe ff5a 	bl	8005340 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	681c      	ldr	r4, [r3, #0]
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	4610      	mov	r0, r2
 80064a0:	f7ff faa9 	bl	80059f6 <clust2sect>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80064aa:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e021      	b.n	80064f6 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064be:	2201      	movs	r2, #1
 80064c0:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f950 	bl	8005770 <sync_window>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <dir_next+0x1d0>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e05d      	b.n	8006596 <dir_next+0x28c>
						dp->fs->winsect++;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80064e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064e8:	3201      	adds	r2, #1
 80064ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ee:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	3301      	adds	r3, #1
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	789b      	ldrb	r3, [r3, #2]
 8006504:	461a      	mov	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4293      	cmp	r3, r2
 800650a:	d3d2      	bcc.n	80064b2 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1acb      	subs	r3, r1, r3
 8006526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006532:	461a      	mov	r2, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fa57 	bl	80059f6 <clust2sect>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006550:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006574:	895b      	ldrh	r3, [r3, #10]
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006582:	fb01 f202 	mul.w	r2, r1, r2
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	015b      	lsls	r3, r3, #5
 800658a:	4403      	add	r3, r0
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006592:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}

0800659e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fddf 	bl	800616e <dir_sdi>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d135      	bne.n	8006626 <dir_alloc+0x88>
		n = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f7ff f91f 	bl	8005814 <move_window>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d121      	bne.n	8006624 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2be5      	cmp	r3, #229	; 0xe5
 80065ec:	d006      	beq.n	80065fc <dir_alloc+0x5e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3301      	adds	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d102      	bne.n	8006610 <dir_alloc+0x72>
 800660a:	e00c      	b.n	8006626 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fe79 	bl	800630a <dir_next>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0cd      	beq.n	80065be <dir_alloc+0x20>
 8006622:	e000      	b.n	8006626 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006624:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b04      	cmp	r3, #4
 800662a:	d101      	bne.n	8006630 <dir_alloc+0x92>
 800662c:	2307      	movs	r3, #7
 800662e:	73fb      	strb	r3, [r7, #15]
	return res;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	331b      	adds	r3, #27
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	b21a      	sxth	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	331a      	adds	r3, #26
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b21b      	sxth	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b21b      	sxth	r3, r3
 800665a:	b29b      	uxth	r3, r3
 800665c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d10f      	bne.n	800668a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	3315      	adds	r3, #21
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	b21a      	sxth	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b21b      	sxth	r3, r3
 800667c:	4313      	orrs	r3, r2
 800667e:	b21b      	sxth	r3, r3
 8006680:	b29b      	uxth	r3, r3
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

	return cl;
 800668a:	68fb      	ldr	r3, [r7, #12]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	331a      	adds	r3, #26
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	331b      	adds	r3, #27
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	0c1a      	lsrs	r2, r3, #16
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3314      	adds	r3, #20
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3315      	adds	r3, #21
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr
	...

080066e4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f6:	1e5a      	subs	r2, r3, #1
 80066f8:	4613      	mov	r3, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	2301      	movs	r3, #1
 800670a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800670c:	4a2b      	ldr	r2, [pc, #172]	; (80067bc <cmp_lfn+0xd8>)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4413      	add	r3, r2
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	b21a      	sxth	r2, r3
 8006720:	4926      	ldr	r1, [pc, #152]	; (80067bc <cmp_lfn+0xd8>)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	440b      	add	r3, r1
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	440b      	add	r3, r1
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b21b      	sxth	r3, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	b21b      	sxth	r3, r3
 8006736:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006738:	89fb      	ldrh	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d019      	beq.n	8006772 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800673e:	89bb      	ldrh	r3, [r7, #12]
 8006740:	4618      	mov	r0, r3
 8006742:	f002 fc33 	bl	8008fac <ff_wtoupper>
 8006746:	4603      	mov	r3, r0
 8006748:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2bfe      	cmp	r3, #254	; 0xfe
 800674e:	d80e      	bhi.n	800676e <cmp_lfn+0x8a>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	617a      	str	r2, [r7, #20]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f002 fc24 	bl	8008fac <ff_wtoupper>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	4293      	cmp	r3, r2
 800676c:	d008      	beq.n	8006780 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800676e:	2300      	movs	r3, #0
 8006770:	e01f      	b.n	80067b2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006772:	89bb      	ldrh	r3, [r7, #12]
 8006774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006778:	4293      	cmp	r3, r2
 800677a:	d001      	beq.n	8006780 <cmp_lfn+0x9c>
 800677c:	2300      	movs	r3, #0
 800677e:	e018      	b.n	80067b2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3301      	adds	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b0c      	cmp	r3, #12
 800678a:	d9bf      	bls.n	800670c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <cmp_lfn+0xcc>
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <cmp_lfn+0xcc>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <cmp_lfn+0xcc>
		return 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80067b0:	2301      	movs	r3, #1
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	0800c428 	.word	0x0800c428

080067c0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	460b      	mov	r3, r1
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	330d      	adds	r3, #13
 80067da:	79ba      	ldrb	r2, [r7, #6]
 80067dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	330b      	adds	r3, #11
 80067e2:	220f      	movs	r2, #15
 80067e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	330c      	adds	r3, #12
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	331a      	adds	r3, #26
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	331b      	adds	r3, #27
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	1e5a      	subs	r2, r3, #1
 8006802:	4613      	mov	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	82fb      	strh	r3, [r7, #22]
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006816:	8afb      	ldrh	r3, [r7, #22]
 8006818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <fit_lfn+0x70>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	61fa      	str	r2, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006830:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <fit_lfn+0xe4>)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	8afa      	ldrh	r2, [r7, #22]
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	8afb      	ldrh	r3, [r7, #22]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	b299      	uxth	r1, r3
 800684a:	4a16      	ldr	r2, [pc, #88]	; (80068a4 <fit_lfn+0xe4>)
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	4413      	add	r3, r2
 8006858:	b2ca      	uxtb	r2, r1
 800685a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800685c:	8afb      	ldrh	r3, [r7, #22]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <fit_lfn+0xa8>
 8006862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006866:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	3301      	adds	r3, #1
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b0c      	cmp	r3, #12
 8006872:	d9d0      	bls.n	8006816 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006874:	8afb      	ldrh	r3, [r7, #22]
 8006876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800687a:	4293      	cmp	r3, r2
 800687c:	d006      	beq.n	800688c <fit_lfn+0xcc>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <fit_lfn+0xd4>
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006892:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	79fa      	ldrb	r2, [r7, #7]
 8006898:	701a      	strb	r2, [r3, #0]
}
 800689a:	bf00      	nop
 800689c:	3724      	adds	r7, #36	; 0x24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr
 80068a4:	0800c428 	.word	0x0800c428

080068a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	; 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80068b6:	220b      	movs	r2, #11
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7fe fd22 	bl	8005304 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b05      	cmp	r3, #5
 80068c4:	d92b      	bls.n	800691e <gen_numname+0x76>
		sr = seq;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80068ca:	e022      	b.n	8006912 <gen_numname+0x6a>
			wc = *lfn++;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80068d6:	2300      	movs	r3, #0
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068da:	e017      	b.n	800690c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	005a      	lsls	r2, r3, #1
 80068e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80068ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <gen_numname+0x5e>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006900:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006904:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	3301      	adds	r3, #1
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	2b0f      	cmp	r3, #15
 8006910:	d9e4      	bls.n	80068dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1d8      	bne.n	80068cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800691e:	2307      	movs	r3, #7
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	b2db      	uxtb	r3, r3
 800692c:	3330      	adds	r3, #48	; 0x30
 800692e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006936:	2b39      	cmp	r3, #57	; 0x39
 8006938:	d904      	bls.n	8006944 <gen_numname+0x9c>
 800693a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800693e:	3307      	adds	r3, #7
 8006940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	62ba      	str	r2, [r7, #40]	; 0x28
 800694a:	3330      	adds	r3, #48	; 0x30
 800694c:	443b      	add	r3, r7
 800694e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006952:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1df      	bne.n	8006922 <gen_numname+0x7a>
	ns[i] = '~';
 8006962:	f107 0214 	add.w	r2, r7, #20
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	4413      	add	r3, r2
 800696a:	227e      	movs	r2, #126	; 0x7e
 800696c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	e002      	b.n	800697a <gen_numname+0xd2>
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	3301      	adds	r3, #1
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	429a      	cmp	r2, r3
 8006980:	d205      	bcs.n	800698e <gen_numname+0xe6>
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	4413      	add	r3, r2
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b20      	cmp	r3, #32
 800698c:	d1f2      	bne.n	8006974 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	2b07      	cmp	r3, #7
 8006992:	d807      	bhi.n	80069a4 <gen_numname+0xfc>
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	62ba      	str	r2, [r7, #40]	; 0x28
 800699a:	3330      	adds	r3, #48	; 0x30
 800699c:	443b      	add	r3, r7
 800699e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80069a2:	e000      	b.n	80069a6 <gen_numname+0xfe>
 80069a4:	2120      	movs	r1, #32
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	627a      	str	r2, [r7, #36]	; 0x24
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	460a      	mov	r2, r1
 80069b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	2b07      	cmp	r3, #7
 80069b8:	d9e9      	bls.n	800698e <gen_numname+0xe6>
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3730      	adds	r7, #48	; 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80069d0:	230b      	movs	r3, #11
 80069d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	0852      	lsrs	r2, r2, #1
 80069da:	01db      	lsls	r3, r3, #7
 80069dc:	4313      	orrs	r3, r2
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6079      	str	r1, [r7, #4]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ed      	bne.n	80069d4 <sum_sfn+0x10>
	return sum;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fbad 	bl	800616e <dir_sdi>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <dir_find+0x1e>
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	e0b8      	b.n	8006b94 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006a22:	23ff      	movs	r3, #255	; 0xff
 8006a24:	753b      	strb	r3, [r7, #20]
 8006a26:	7d3b      	ldrb	r3, [r7, #20]
 8006a28:	757b      	strb	r3, [r7, #21]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a34:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fe fee3 	bl	8005814 <move_window>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8097 	bne.w	8006b88 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a6a:	7dbb      	ldrb	r3, [r7, #22]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <dir_find+0x72>
 8006a70:	2304      	movs	r3, #4
 8006a72:	75fb      	strb	r3, [r7, #23]
 8006a74:	e08d      	b.n	8006b92 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	330b      	adds	r3, #11
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a80:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a82:	7dbb      	ldrb	r3, [r7, #22]
 8006a84:	2be5      	cmp	r3, #229	; 0xe5
 8006a86:	d007      	beq.n	8006a98 <dir_find+0x94>
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <dir_find+0xa6>
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b0f      	cmp	r3, #15
 8006a96:	d008      	beq.n	8006aaa <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006a98:	23ff      	movs	r3, #255	; 0xff
 8006a9a:	757b      	strb	r3, [r7, #21]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa6:	849a      	strh	r2, [r3, #36]	; 0x24
 8006aa8:	e063      	b.n	8006b72 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d137      	bne.n	8006b20 <dir_find+0x11c>
				if (dp->lfn) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d05a      	beq.n	8006b72 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006abc:	7dbb      	ldrb	r3, [r7, #22]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d010      	beq.n	8006ae8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	7b5b      	ldrb	r3, [r3, #13]
 8006aca:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006acc:	7dbb      	ldrb	r3, [r7, #22]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad2:	75bb      	strb	r3, [r7, #22]
 8006ad4:	7dbb      	ldrb	r3, [r7, #22]
 8006ad6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ade:	88da      	ldrh	r2, [r3, #6]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006ae8:	7dba      	ldrb	r2, [r7, #22]
 8006aea:	7d7b      	ldrb	r3, [r7, #21]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d114      	bne.n	8006b1a <dir_find+0x116>
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	330d      	adds	r3, #13
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	7d3a      	ldrb	r2, [r7, #20]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d10e      	bne.n	8006b1a <dir_find+0x116>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	6939      	ldr	r1, [r7, #16]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fdec 	bl	80066e4 <cmp_lfn>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <dir_find+0x116>
 8006b12:	7d7b      	ldrb	r3, [r7, #21]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	e000      	b.n	8006b1c <dir_find+0x118>
 8006b1a:	23ff      	movs	r3, #255	; 0xff
 8006b1c:	757b      	strb	r3, [r7, #21]
 8006b1e:	e028      	b.n	8006b72 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006b20:	7d7b      	ldrb	r3, [r7, #21]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <dir_find+0x132>
 8006b26:	6938      	ldr	r0, [r7, #16]
 8006b28:	f7ff ff4c 	bl	80069c4 <sum_sfn>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	7d3b      	ldrb	r3, [r7, #20]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d02a      	beq.n	8006b8c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	330b      	adds	r3, #11
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <dir_find+0x15e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	220b      	movs	r2, #11
 8006b54:	4619      	mov	r1, r3
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f7fe fc0c 	bl	8005374 <mem_cmp>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006b62:	23ff      	movs	r3, #255	; 0xff
 8006b64:	757b      	strb	r3, [r7, #21]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b70:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fbc8 	bl	800630a <dir_next>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f43f af58 	beq.w	8006a36 <dir_find+0x32>
 8006b86:	e004      	b.n	8006b92 <dir_find+0x18e>
		if (res != FR_OK) break;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b90:	bf00      	nop

	return res;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006bb8:	f107 030c 	add.w	r3, r7, #12
 8006bbc:	220c      	movs	r2, #12
 8006bbe:	6a39      	ldr	r1, [r7, #32]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fb9f 	bl	8005304 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d03b      	beq.n	8006c48 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	330b      	adds	r3, #11
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bde:	461a      	mov	r2, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006be4:	2301      	movs	r3, #1
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e013      	b.n	8006c12 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006bea:	f107 010c 	add.w	r1, r7, #12
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	6a38      	ldr	r0, [r7, #32]
 8006bf4:	f7ff fe58 	bl	80068a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff03 	bl	8006a04 <dir_find>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	3301      	adds	r3, #1
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2b63      	cmp	r3, #99	; 0x63
 8006c16:	d9e8      	bls.n	8006bea <dir_register+0x4e>
 8006c18:	e000      	b.n	8006c1c <dir_register+0x80>
			if (res != FR_OK) break;
 8006c1a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	2b64      	cmp	r3, #100	; 0x64
 8006c20:	d101      	bne.n	8006c26 <dir_register+0x8a>
 8006c22:	2307      	movs	r3, #7
 8006c24:	e0d8      	b.n	8006dd8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d002      	beq.n	8006c34 <dir_register+0x98>
 8006c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c32:	e0d1      	b.n	8006dd8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	330b      	adds	r3, #11
 8006c38:	7dfa      	ldrb	r2, [r7, #23]
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c42:	461a      	mov	r2, r3
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006c52:	2300      	movs	r3, #0
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c56:	e002      	b.n	8006c5e <dir_register+0xc2>
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f5      	bne.n	8006c58 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	3319      	adds	r3, #25
 8006c70:	4a5b      	ldr	r2, [pc, #364]	; (8006de0 <dir_register+0x244>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	089b      	lsrs	r3, r3, #2
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7a:	e001      	b.n	8006c80 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fc8b 	bl	800659e <dir_alloc>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d15b      	bne.n	8006d4e <dir_register+0x1b2>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d055      	beq.n	8006d4e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	88db      	ldrh	r3, [r3, #6]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fa5b 	bl	800616e <dir_sdi>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d143      	bne.n	8006d4e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fe78 	bl	80069c4 <sum_sfn>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7fe fd92 	bl	8005814 <move_window>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d126      	bne.n	8006d4c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d04:	6a18      	ldr	r0, [r3, #32]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0c:	6959      	ldr	r1, [r3, #20]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	7efb      	ldrb	r3, [r7, #27]
 8006d14:	f7ff fd54 	bl	80067c0 <fit_lfn>
				dp->fs->wflag = 1;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d24:	2201      	movs	r2, #1
 8006d26:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff faed 	bl	800630a <dir_next>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <dir_register+0x1b2>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	3b01      	subs	r3, #1
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1c6      	bne.n	8006cd8 <dir_register+0x13c>
 8006d4a:	e000      	b.n	8006d4e <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006d4c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d13e      	bne.n	8006dd4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7fe fd53 	bl	8005814 <move_window>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d12b      	bne.n	8006dd4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	2220      	movs	r2, #32
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fad9 	bl	8005340 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d94:	6958      	ldr	r0, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	220b      	movs	r2, #11
 8006da0:	4619      	mov	r1, r3
 8006da2:	f7fe faaf 	bl	8005304 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	330b      	adds	r3, #11
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	f002 0218 	and.w	r2, r2, #24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3730      	adds	r7, #48	; 0x30
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	4ec4ec4f 	.word	0x4ec4ec4f

08006de4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e002      	b.n	8006dfc <create_name+0x18>
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b2f      	cmp	r3, #47	; 0x2f
 8006e02:	d0f8      	beq.n	8006df6 <create_name+0x12>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b5c      	cmp	r3, #92	; 0x5c
 8006e0a:	d0f4      	beq.n	8006df6 <create_name+0x12>
	lfn = dp->lfn;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	61ba      	str	r2, [r7, #24]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2e:	2b1f      	cmp	r3, #31
 8006e30:	d92f      	bls.n	8006e92 <create_name+0xae>
 8006e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e34:	2b2f      	cmp	r3, #47	; 0x2f
 8006e36:	d02c      	beq.n	8006e92 <create_name+0xae>
 8006e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e3a:	2b5c      	cmp	r3, #92	; 0x5c
 8006e3c:	d029      	beq.n	8006e92 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2bfe      	cmp	r3, #254	; 0xfe
 8006e42:	d901      	bls.n	8006e48 <create_name+0x64>
			return FR_INVALID_NAME;
 8006e44:	2306      	movs	r3, #6
 8006e46:	e186      	b.n	8007156 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e50:	2101      	movs	r1, #1
 8006e52:	4618      	mov	r0, r3
 8006e54:	f002 f870 	bl	8008f38 <ff_convert>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <create_name+0x82>
 8006e62:	2306      	movs	r3, #6
 8006e64:	e177      	b.n	8007156 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e68:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6a:	d809      	bhi.n	8006e80 <create_name+0x9c>
 8006e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6e:	4619      	mov	r1, r3
 8006e70:	488e      	ldr	r0, [pc, #568]	; (80070ac <create_name+0x2c8>)
 8006e72:	f7fe faa5 	bl	80053c0 <chk_chr>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	e16a      	b.n	8007156 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	617a      	str	r2, [r7, #20]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006e90:	e7c5      	b.n	8006e1e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	441a      	add	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e9e:	2b1f      	cmp	r3, #31
 8006ea0:	d801      	bhi.n	8006ea6 <create_name+0xc2>
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	e000      	b.n	8006ea8 <create_name+0xc4>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006eac:	e011      	b.n	8006ed2 <create_name+0xee>
		w = lfn[di - 1];
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d002      	beq.n	8006ecc <create_name+0xe8>
 8006ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eca:	d106      	bne.n	8006eda <create_name+0xf6>
		di--;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1ea      	bne.n	8006eae <create_name+0xca>
 8006ed8:	e000      	b.n	8006edc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006eda:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <create_name+0x102>
 8006ee2:	2306      	movs	r3, #6
 8006ee4:	e137      	b.n	8007156 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	220b      	movs	r2, #11
 8006efc:	2120      	movs	r1, #32
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fa1e 	bl	8005340 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f04:	2300      	movs	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e002      	b.n	8006f10 <create_name+0x12c>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d0f5      	beq.n	8006f0a <create_name+0x126>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	2b2e      	cmp	r3, #46	; 0x2e
 8006f2a:	d0ee      	beq.n	8006f0a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <create_name+0x162>
 8006f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f36:	f043 0303 	orr.w	r3, r3, #3
 8006f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f3e:	e002      	b.n	8006f46 <create_name+0x162>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <create_name+0x17c>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f52:	3b01      	subs	r3, #1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5e:	d1ef      	bne.n	8006f40 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006f60:	2300      	movs	r3, #0
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	61ba      	str	r2, [r7, #24]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8091 	beq.w	80070a8 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d006      	beq.n	8006f9a <create_name+0x1b6>
 8006f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f90:	d10a      	bne.n	8006fa8 <create_name+0x1c4>
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d006      	beq.n	8006fa8 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f9e:	f043 0303 	orr.w	r3, r3, #3
 8006fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fa6:	e07e      	b.n	80070a6 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006fa8:	6a3a      	ldr	r2, [r7, #32]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d203      	bcs.n	8006fb8 <create_name+0x1d4>
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d123      	bne.n	8007000 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	d106      	bne.n	8006fcc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc2:	f043 0303 	orr.w	r3, r3, #3
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fca:	e076      	b.n	80070ba <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d005      	beq.n	8006fe0 <create_name+0x1fc>
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	f043 0303 	orr.w	r3, r3, #3
 8006fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d867      	bhi.n	80070b8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	2308      	movs	r3, #8
 8006fee:	623b      	str	r3, [r7, #32]
 8006ff0:	230b      	movs	r3, #11
 8006ff2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ffe:	e052      	b.n	80070a6 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007002:	2b7f      	cmp	r3, #127	; 0x7f
 8007004:	d914      	bls.n	8007030 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f001 ff94 	bl	8008f38 <ff_convert>
 8007010:	4603      	mov	r3, r0
 8007012:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <create_name+0x240>
 800701a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800701c:	3b80      	subs	r3, #128	; 0x80
 800701e:	4a24      	ldr	r2, [pc, #144]	; (80070b0 <create_name+0x2cc>)
 8007020:	5cd3      	ldrb	r3, [r2, r3]
 8007022:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <create_name+0x262>
 8007036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007038:	4619      	mov	r1, r3
 800703a:	481e      	ldr	r0, [pc, #120]	; (80070b4 <create_name+0x2d0>)
 800703c:	f7fe f9c0 	bl	80053c0 <chk_chr>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007046:	235f      	movs	r3, #95	; 0x5f
 8007048:	84bb      	strh	r3, [r7, #36]	; 0x24
 800704a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800704e:	f043 0303 	orr.w	r3, r3, #3
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007056:	e01b      	b.n	8007090 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	d909      	bls.n	8007072 <create_name+0x28e>
 800705e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007060:	2b5a      	cmp	r3, #90	; 0x5a
 8007062:	d806      	bhi.n	8007072 <create_name+0x28e>
					b |= 2;
 8007064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007068:	f043 0302 	orr.w	r3, r3, #2
 800706c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007070:	e00e      	b.n	8007090 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007074:	2b60      	cmp	r3, #96	; 0x60
 8007076:	d90b      	bls.n	8007090 <create_name+0x2ac>
 8007078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800707a:	2b7a      	cmp	r3, #122	; 0x7a
 800707c:	d808      	bhi.n	8007090 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800707e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800708a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708c:	3b20      	subs	r3, #32
 800708e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	6239      	str	r1, [r7, #32]
 800709e:	4413      	add	r3, r2
 80070a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80070a6:	e762      	b.n	8006f6e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80070a8:	bf00      	nop
 80070aa:	e006      	b.n	80070ba <create_name+0x2d6>
 80070ac:	0800ae60 	.word	0x0800ae60
 80070b0:	0800c3a8 	.word	0x0800c3a8
 80070b4:	0800ae6c 	.word	0x0800ae6c
			if (si > di) break;			/* No extension */
 80070b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2be5      	cmp	r3, #229	; 0xe5
 80070c6:	d105      	bne.n	80070d4 <create_name+0x2f0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2205      	movs	r2, #5
 80070d2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d104      	bne.n	80070e4 <create_name+0x300>
 80070da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80070e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070e8:	f003 030c 	and.w	r3, r3, #12
 80070ec:	2b0c      	cmp	r3, #12
 80070ee:	d005      	beq.n	80070fc <create_name+0x318>
 80070f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d105      	bne.n	8007108 <create_name+0x324>
		cf |= NS_LFN;
 80070fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d117      	bne.n	8007144 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b01      	cmp	r3, #1
 800711e:	d105      	bne.n	800712c <create_name+0x348>
 8007120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007124:	f043 0310 	orr.w	r3, r3, #16
 8007128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800712c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007130:	f003 030c 	and.w	r3, r3, #12
 8007134:	2b04      	cmp	r3, #4
 8007136:	d105      	bne.n	8007144 <create_name+0x360>
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713c:	f043 0308 	orr.w	r3, r3, #8
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	330b      	adds	r3, #11
 800714e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007152:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007154:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007156:	4618      	mov	r0, r3
 8007158:	3728      	adds	r7, #40	; 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop

08007160 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b2f      	cmp	r3, #47	; 0x2f
 8007170:	d003      	beq.n	800717a <follow_path+0x1a>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b5c      	cmp	r3, #92	; 0x5c
 8007178:	d102      	bne.n	8007180 <follow_path+0x20>
		path++;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007186:	461a      	mov	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b1f      	cmp	r3, #31
 8007192:	d80c      	bhi.n	80071ae <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fe ffe9 	bl	800616e <dir_sdi>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a6:	461a      	mov	r2, r3
 80071a8:	2300      	movs	r3, #0
 80071aa:	6153      	str	r3, [r2, #20]
 80071ac:	e049      	b.n	8007242 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071ae:	463b      	mov	r3, r7
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fe16 	bl	8006de4 <create_name>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d13a      	bne.n	8007238 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fc1e 	bl	8006a04 <dir_find>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	7adb      	ldrb	r3, [r3, #11]
 80071d6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d12b      	bne.n	800723c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d126      	bne.n	800723c <follow_path+0xdc>
 80071ee:	2305      	movs	r3, #5
 80071f0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80071f2:	e023      	b.n	800723c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d120      	bne.n	8007240 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	330b      	adds	r3, #11
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007216:	2305      	movs	r3, #5
 8007218:	73fb      	strb	r3, [r7, #15]
 800721a:	e012      	b.n	8007242 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68b9      	ldr	r1, [r7, #8]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fa07 	bl	800663a <ld_clust>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007234:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007236:	e7ba      	b.n	80071ae <follow_path+0x4e>
			if (res != FR_OK) break;
 8007238:	bf00      	nop
 800723a:	e002      	b.n	8007242 <follow_path+0xe2>
				break;
 800723c:	bf00      	nop
 800723e:	e000      	b.n	8007242 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007240:	bf00      	nop
		}
	}

	return res;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007254:	f04f 33ff 	mov.w	r3, #4294967295
 8007258:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d031      	beq.n	80072c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e002      	b.n	8007270 <get_ldnumber+0x24>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	3301      	adds	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b1f      	cmp	r3, #31
 8007276:	d903      	bls.n	8007280 <get_ldnumber+0x34>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b3a      	cmp	r3, #58	; 0x3a
 800727e:	d1f4      	bne.n	800726a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b3a      	cmp	r3, #58	; 0x3a
 8007286:	d11c      	bne.n	80072c2 <get_ldnumber+0x76>
			tp = *path;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	60fa      	str	r2, [r7, #12]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	3b30      	subs	r3, #48	; 0x30
 8007298:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b09      	cmp	r3, #9
 800729e:	d80e      	bhi.n	80072be <get_ldnumber+0x72>
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d10a      	bne.n	80072be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <get_ldnumber+0x72>
					vol = (int)i;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	3301      	adds	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	e002      	b.n	80072c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072c6:	693b      	ldr	r3, [r7, #16]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr
	...

080072d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e4:	2200      	movs	r2, #0
 80072e6:	711a      	strb	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	461a      	mov	r2, r3
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fe fa8b 	bl	8005814 <move_window>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <check_fs+0x34>
		return 3;
 8007304:	2303      	movs	r3, #3
 8007306:	e04a      	b.n	800739e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800730e:	3301      	adds	r3, #1
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	b21a      	sxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800731c:	b21b      	sxth	r3, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	b21b      	sxth	r3, r3
 8007322:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <check_fs+0xd4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d001      	beq.n	800732c <check_fs+0x58>
		return 2;
 8007328:	2302      	movs	r3, #2
 800732a:	e038      	b.n	800739e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3336      	adds	r3, #54	; 0x36
 8007330:	3303      	adds	r3, #3
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	061a      	lsls	r2, r3, #24
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3336      	adds	r3, #54	; 0x36
 800733a:	3302      	adds	r3, #2
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	4313      	orrs	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	3236      	adds	r2, #54	; 0x36
 8007346:	3201      	adds	r2, #1
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	0212      	lsls	r2, r2, #8
 800734c:	4313      	orrs	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007354:	4313      	orrs	r3, r2
 8007356:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800735a:	4a14      	ldr	r2, [pc, #80]	; (80073ac <check_fs+0xd8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <check_fs+0x90>
		return 0;
 8007360:	2300      	movs	r3, #0
 8007362:	e01c      	b.n	800739e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3352      	adds	r3, #82	; 0x52
 8007368:	3303      	adds	r3, #3
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	061a      	lsls	r2, r3, #24
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3352      	adds	r3, #82	; 0x52
 8007372:	3302      	adds	r3, #2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	4313      	orrs	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	3252      	adds	r2, #82	; 0x52
 800737e:	3201      	adds	r2, #1
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	0212      	lsls	r2, r2, #8
 8007384:	4313      	orrs	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800738c:	4313      	orrs	r3, r2
 800738e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007392:	4a06      	ldr	r2, [pc, #24]	; (80073ac <check_fs+0xd8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <check_fs+0xc8>
		return 0;
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <check_fs+0xca>

	return 1;
 800739c:	2301      	movs	r3, #1
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	ffffaa55 	.word	0xffffaa55
 80073ac:	00544146 	.word	0x00544146

080073b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b096      	sub	sp, #88	; 0x58
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073c4:	68b8      	ldr	r0, [r7, #8]
 80073c6:	f7ff ff41 	bl	800724c <get_ldnumber>
 80073ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da01      	bge.n	80073d6 <find_volume+0x26>
 80073d2:	230b      	movs	r3, #11
 80073d4:	e311      	b.n	80079fa <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073d6:	4a98      	ldr	r2, [pc, #608]	; (8007638 <find_volume+0x288>)
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <find_volume+0x3a>
 80073e6:	230c      	movs	r3, #12
 80073e8:	e307      	b.n	80079fa <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01c      	beq.n	8007436 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fedf 	bl	80051c8 <disk_status>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <find_volume+0x82>
 8007422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800742e:	230a      	movs	r3, #10
 8007430:	e2e3      	b.n	80079fa <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007432:	2300      	movs	r3, #0
 8007434:	e2e1      	b.n	80079fa <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	b2da      	uxtb	r2, r3
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	4618      	mov	r0, r3
 8007456:	f7fd fed1 	bl	80051fc <disk_initialize>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800746c:	2303      	movs	r3, #3
 800746e:	e2c4      	b.n	80079fa <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <find_volume+0xd6>
 8007476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007482:	230a      	movs	r3, #10
 8007484:	e2b9      	b.n	80079fa <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	7858      	ldrb	r0, [r3, #1]
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007494:	330a      	adds	r3, #10
 8007496:	461a      	mov	r2, r3
 8007498:	2102      	movs	r1, #2
 800749a:	f7fd ff15 	bl	80052c8 <disk_ioctl>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10d      	bne.n	80074c0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	895b      	ldrh	r3, [r3, #10]
 80074ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b0:	d306      	bcc.n	80074c0 <find_volume+0x110>
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b8:	895b      	ldrh	r3, [r3, #10]
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074be:	d901      	bls.n	80074c4 <find_volume+0x114>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e29a      	b.n	80079fa <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80074c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074cc:	f7ff ff02 	bl	80072d4 <check_fs>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80074d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d153      	bne.n	8007586 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80074de:	2300      	movs	r3, #0
 80074e0:	643b      	str	r3, [r7, #64]	; 0x40
 80074e2:	e028      	b.n	8007536 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80074e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80074ee:	4413      	add	r3, r2
 80074f0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	3304      	adds	r3, #4
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <find_volume+0x172>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	330b      	adds	r3, #11
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	061a      	lsls	r2, r3, #24
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	330a      	adds	r3, #10
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	4313      	orrs	r3, r2
 800750e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007510:	3209      	adds	r2, #9
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	0212      	lsls	r2, r2, #8
 8007516:	4313      	orrs	r3, r2
 8007518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751a:	3208      	adds	r2, #8
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	431a      	orrs	r2, r3
 8007520:	e000      	b.n	8007524 <find_volume+0x174>
 8007522:	2200      	movs	r2, #0
 8007524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	3358      	adds	r3, #88	; 0x58
 800752a:	443b      	add	r3, r7
 800752c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	3301      	adds	r3, #1
 8007534:	643b      	str	r3, [r7, #64]	; 0x40
 8007536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007538:	2b03      	cmp	r3, #3
 800753a:	d9d3      	bls.n	80074e4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800753c:	2300      	movs	r3, #0
 800753e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <find_volume+0x19c>
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	3b01      	subs	r3, #1
 800754a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	3358      	adds	r3, #88	; 0x58
 8007552:	443b      	add	r3, r7
 8007554:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007558:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800755a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <find_volume+0x1bc>
 8007560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007564:	f7ff feb6 	bl	80072d4 <check_fs>
 8007568:	4603      	mov	r3, r0
 800756a:	e000      	b.n	800756e <find_volume+0x1be>
 800756c:	2302      	movs	r3, #2
 800756e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <find_volume+0x1d6>
 800757a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757c:	3301      	adds	r3, #1
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007582:	2b03      	cmp	r3, #3
 8007584:	d9e2      	bls.n	800754c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800758a:	2b03      	cmp	r3, #3
 800758c:	d101      	bne.n	8007592 <find_volume+0x1e2>
 800758e:	2301      	movs	r3, #1
 8007590:	e233      	b.n	80079fa <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007592:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <find_volume+0x1ee>
 800759a:	230d      	movs	r3, #13
 800759c:	e22d      	b.n	80079fa <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	7adb      	ldrb	r3, [r3, #11]
 80075aa:	b21b      	sxth	r3, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b21a      	sxth	r2, r3
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b6:	895b      	ldrh	r3, [r3, #10]
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d001      	beq.n	80075c2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80075be:	230d      	movs	r3, #13
 80075c0:	e21b      	b.n	80079fa <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	7ddb      	ldrb	r3, [r3, #23]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	b21a      	sxth	r2, r3
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	7d9b      	ldrb	r3, [r3, #22]
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b21b      	sxth	r3, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d112      	bne.n	8007604 <find_volume+0x254>
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80075e4:	061a      	lsls	r2, r3, #24
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	4313      	orrs	r3, r2
 80075f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80075f6:	0212      	lsls	r2, r2, #8
 80075f8:	4313      	orrs	r3, r2
 80075fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075fc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007600:	4313      	orrs	r3, r2
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	461a      	mov	r2, r3
 800760c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	7c1a      	ldrb	r2, [r3, #16]
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007622:	78db      	ldrb	r3, [r3, #3]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d009      	beq.n	800763c <find_volume+0x28c>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762e:	78db      	ldrb	r3, [r3, #3]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d003      	beq.n	800763c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007634:	230d      	movs	r3, #13
 8007636:	e1e0      	b.n	80079fa <find_volume+0x64a>
 8007638:	200026d0 	.word	0x200026d0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	461a      	mov	r2, r3
 8007646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	7b5a      	ldrb	r2, [r3, #13]
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <find_volume+0x2d0>
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766c:	789b      	ldrb	r3, [r3, #2]
 800766e:	461a      	mov	r2, r3
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	3b01      	subs	r3, #1
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007680:	230d      	movs	r3, #13
 8007682:	e1ba      	b.n	80079fa <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	7c9b      	ldrb	r3, [r3, #18]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	b21a      	sxth	r2, r3
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	7c5b      	ldrb	r3, [r3, #17]
 8007690:	b21b      	sxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b21b      	sxth	r3, r3
 8007696:	b29a      	uxth	r2, r3
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a6:	891b      	ldrh	r3, [r3, #8]
 80076a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076ae:	8952      	ldrh	r2, [r2, #10]
 80076b0:	0952      	lsrs	r2, r2, #5
 80076b2:	b292      	uxth	r2, r2
 80076b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80076b8:	fb01 f202 	mul.w	r2, r1, r2
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80076c4:	230d      	movs	r3, #13
 80076c6:	e198      	b.n	80079fa <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	7d1b      	ldrb	r3, [r3, #20]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b21a      	sxth	r2, r3
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	7cdb      	ldrb	r3, [r3, #19]
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	4313      	orrs	r3, r2
 80076d8:	b21b      	sxth	r3, r3
 80076da:	b29b      	uxth	r3, r3
 80076dc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80076de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d112      	bne.n	800770a <find_volume+0x35a>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076ea:	061a      	lsls	r2, r3, #24
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	4313      	orrs	r3, r2
 80076f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80076fc:	0212      	lsls	r2, r2, #8
 80076fe:	4313      	orrs	r3, r2
 8007700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007702:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007706:	4313      	orrs	r3, r2
 8007708:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	7bdb      	ldrb	r3, [r3, #15]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	b21a      	sxth	r2, r3
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	7b9b      	ldrb	r3, [r3, #14]
 8007716:	b21b      	sxth	r3, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	b21b      	sxth	r3, r3
 800771c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800771e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <find_volume+0x378>
 8007724:	230d      	movs	r3, #13
 8007726:	e168      	b.n	80079fa <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007728:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772c:	4413      	add	r3, r2
 800772e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007734:	8911      	ldrh	r1, [r2, #8]
 8007736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800773c:	8952      	ldrh	r2, [r2, #10]
 800773e:	0952      	lsrs	r2, r2, #5
 8007740:	b292      	uxth	r2, r2
 8007742:	fbb1 f2f2 	udiv	r2, r1, r2
 8007746:	b292      	uxth	r2, r2
 8007748:	4413      	add	r3, r2
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800774c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	429a      	cmp	r2, r3
 8007752:	d201      	bcs.n	8007758 <find_volume+0x3a8>
 8007754:	230d      	movs	r3, #13
 8007756:	e150      	b.n	80079fa <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007764:	7892      	ldrb	r2, [r2, #2]
 8007766:	fbb3 f3f2 	udiv	r3, r3, r2
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <find_volume+0x3c6>
 8007772:	230d      	movs	r3, #13
 8007774:	e141      	b.n	80079fa <find_volume+0x64a>
	fmt = FS_FAT12;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007782:	4293      	cmp	r3, r2
 8007784:	d902      	bls.n	800778c <find_volume+0x3dc>
 8007786:	2302      	movs	r3, #2
 8007788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007792:	4293      	cmp	r3, r2
 8007794:	d902      	bls.n	800779c <find_volume+0x3ec>
 8007796:	2303      	movs	r3, #3
 8007798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	3302      	adds	r3, #2
 80077a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077a6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	461a      	mov	r2, r3
 80077b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80077b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b8:	4413      	add	r3, r2
 80077ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077c0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80077c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	4413      	add	r3, r2
 80077c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077ce:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80077d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d124      	bne.n	8007822 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077de:	891b      	ldrh	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <find_volume+0x438>
 80077e4:	230d      	movs	r3, #13
 80077e6:	e108      	b.n	80079fa <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077ee:	061a      	lsls	r2, r3, #24
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	4313      	orrs	r3, r2
 80077fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007800:	0212      	lsls	r2, r2, #8
 8007802:	4313      	orrs	r3, r2
 8007804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007806:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800780a:	4313      	orrs	r3, r2
 800780c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800780e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007812:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	e02b      	b.n	800787a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007828:	891b      	ldrh	r3, [r3, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <find_volume+0x482>
 800782e:	230d      	movs	r3, #13
 8007830:	e0e3      	b.n	80079fa <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	4413      	add	r3, r2
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007844:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800784a:	2b02      	cmp	r3, #2
 800784c:	d105      	bne.n	800785a <find_volume+0x4aa>
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	e00e      	b.n	8007878 <find_volume+0x4c8>
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	085a      	lsrs	r2, r3, #1
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007878:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007888:	895b      	ldrh	r3, [r3, #10]
 800788a:	4619      	mov	r1, r3
 800788c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788e:	440b      	add	r3, r1
 8007890:	3b01      	subs	r3, #1
 8007892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007894:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007898:	8949      	ldrh	r1, [r1, #10]
 800789a:	fbb3 f3f1 	udiv	r3, r3, r1
 800789e:	429a      	cmp	r2, r3
 80078a0:	d201      	bcs.n	80078a6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80078a2:	230d      	movs	r3, #13
 80078a4:	e0a9      	b.n	80079fa <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ac:	461a      	mov	r2, r3
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
 80078b2:	6113      	str	r3, [r2, #16]
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078c2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ca:	2280      	movs	r2, #128	; 0x80
 80078cc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80078ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d17a      	bne.n	80079cc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	b21a      	sxth	r2, r3
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d16d      	bne.n	80079cc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	3301      	adds	r3, #1
 80078f4:	4619      	mov	r1, r3
 80078f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078f8:	f7fd ff8c 	bl	8005814 <move_window>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d164      	bne.n	80079cc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	2200      	movs	r2, #0
 800790a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	b21a      	sxth	r2, r3
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800791c:	b21b      	sxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b21b      	sxth	r3, r3
 8007922:	4a38      	ldr	r2, [pc, #224]	; (8007a04 <find_volume+0x654>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d151      	bne.n	80079cc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	061a      	lsls	r2, r3, #24
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	789b      	ldrb	r3, [r3, #2]
 8007932:	041b      	lsls	r3, r3, #16
 8007934:	4313      	orrs	r3, r2
 8007936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007938:	7852      	ldrb	r2, [r2, #1]
 800793a:	0212      	lsls	r2, r2, #8
 800793c:	4313      	orrs	r3, r2
 800793e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	4313      	orrs	r3, r2
 8007944:	4a30      	ldr	r2, [pc, #192]	; (8007a08 <find_volume+0x658>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d140      	bne.n	80079cc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007950:	061a      	lsls	r2, r3, #24
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	4313      	orrs	r3, r2
 800795c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007962:	0212      	lsls	r2, r2, #8
 8007964:	4313      	orrs	r3, r2
 8007966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007968:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800796c:	4313      	orrs	r3, r2
 800796e:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <find_volume+0x65c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d12b      	bne.n	80079cc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800797a:	061a      	lsls	r2, r3, #24
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007982:	041b      	lsls	r3, r3, #16
 8007984:	4313      	orrs	r3, r2
 8007986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007988:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800798c:	0212      	lsls	r2, r2, #8
 800798e:	4313      	orrs	r3, r2
 8007990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007992:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007996:	4313      	orrs	r3, r2
 8007998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800799a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800799e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80079a6:	061a      	lsls	r2, r3, #24
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	4313      	orrs	r3, r2
 80079b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80079b8:	0212      	lsls	r2, r2, #8
 80079ba:	4313      	orrs	r3, r2
 80079bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079be:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80079c2:	4313      	orrs	r3, r2
 80079c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079ca:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d2:	461a      	mov	r2, r3
 80079d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079d8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80079da:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <find_volume+0x660>)
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <find_volume+0x660>)
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <find_volume+0x660>)
 80079e8:	881a      	ldrh	r2, [r3, #0]
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80079f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f4:	f7fd fe92 	bl	800571c <clear_lock>
#endif

	return FR_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3758      	adds	r7, #88	; 0x58
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	ffffaa55 	.word	0xffffaa55
 8007a08:	41615252 	.word	0x41615252
 8007a0c:	61417272 	.word	0x61417272
 8007a10:	200026d4 	.word	0x200026d4

08007a14 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d02a      	beq.n	8007a7c <validate+0x68>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d024      	beq.n	8007a7c <validate+0x68>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01b      	beq.n	8007a7c <validate+0x68>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a50:	88da      	ldrh	r2, [r3, #6]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a58:	889b      	ldrh	r3, [r3, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d10e      	bne.n	8007a7c <validate+0x68>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd fbab 	bl	80051c8 <disk_status>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007a7c:	2309      	movs	r3, #9
 8007a7e:	e000      	b.n	8007a82 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007a9e:	f107 0310 	add.w	r3, r7, #16
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fbd2 	bl	800724c <get_ldnumber>
 8007aa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da01      	bge.n	8007ab4 <f_mount+0x28>
 8007ab0:	230b      	movs	r3, #11
 8007ab2:	e02f      	b.n	8007b14 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ab4:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <f_mount+0x90>)
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007ac4:	69b8      	ldr	r0, [r7, #24]
 8007ac6:	f7fd fe29 	bl	800571c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	490d      	ldr	r1, [pc, #52]	; (8007b1c <f_mount+0x90>)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <f_mount+0x6e>
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d001      	beq.n	8007afe <f_mount+0x72>
 8007afa:	2300      	movs	r3, #0
 8007afc:	e00a      	b.n	8007b14 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007afe:	f107 0108 	add.w	r1, r7, #8
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	2200      	movs	r2, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fc51 	bl	80073b0 <find_volume>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200026d0 	.word	0x200026d0

08007b20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b2e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8007b32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b36:	f843 1c50 	str.w	r1, [r3, #-80]
 8007b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b3e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b46:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <f_open+0x32>
 8007b4e:	2309      	movs	r3, #9
 8007b50:	e2f7      	b.n	8008142 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b56:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2300      	movs	r3, #0
 8007b62:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007b64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b6e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b7e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	f107 0118 	add.w	r1, r7, #24
 8007b8c:	3910      	subs	r1, #16
 8007b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b92:	3b18      	subs	r3, #24
 8007b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fc09 	bl	80073b0 <find_volume>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ba4:	f102 0217 	add.w	r2, r2, #23
 8007ba8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007baa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bae:	f103 0317 	add.w	r3, r3, #23
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 82bf 	bne.w	8008138 <f_open+0x618>
		INIT_BUF(dj);
 8007bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8007bca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4bd4      	ldr	r3, [pc, #848]	; (8007f24 <f_open+0x404>)
 8007bd2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007bd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bda:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8007bde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007be2:	3b18      	subs	r3, #24
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff faba 	bl	8007160 <follow_path>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bf2:	f102 0217 	add.w	r2, r2, #23
 8007bf6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bfc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007c00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c04:	f102 0210 	add.w	r2, r2, #16
 8007c08:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007c0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c0e:	f103 0317 	add.w	r3, r3, #23
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d126      	bne.n	8007c66 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8007c18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c1c:	f103 0310 	add.w	r3, r3, #16
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <f_open+0x114>
				res = FR_INVALID_NAME;
 8007c26:	2306      	movs	r3, #6
 8007c28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c2c:	f102 0217 	add.w	r2, r2, #23
 8007c30:	7013      	strb	r3, [r2, #0]
 8007c32:	e018      	b.n	8007c66 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c38:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c50:	3b18      	subs	r3, #24
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd fbcd 	bl	80053f4 <chk_lock>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c60:	f102 0217 	add.w	r2, r2, #23
 8007c64:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c6a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c6e:	f003 031c 	and.w	r3, r3, #28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 813c 	beq.w	8007ef0 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007c78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c7c:	f103 0317 	add.w	r3, r3, #23
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d02e      	beq.n	8007ce4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007c86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c8a:	f103 0317 	add.w	r3, r3, #23
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d112      	bne.n	8007cba <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007c94:	f7fd fc1e 	bl	80054d4 <enq_lock>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <f_open+0x18e>
 8007c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ca2:	3b18      	subs	r3, #24
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe ff79 	bl	8006b9c <dir_register>
 8007caa:	4603      	mov	r3, r0
 8007cac:	e000      	b.n	8007cb0 <f_open+0x190>
 8007cae:	2312      	movs	r3, #18
 8007cb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cb4:	f102 0217 	add.w	r2, r2, #23
 8007cb8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007cba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cc4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cd4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007cd8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cdc:	f102 0210 	add.w	r2, r2, #16
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e01f      	b.n	8007d24 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ce4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ce8:	f103 0310 	add.w	r3, r3, #16
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330b      	adds	r3, #11
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f003 0311 	and.w	r3, r3, #17
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d006      	beq.n	8007d08 <f_open+0x1e8>
					res = FR_DENIED;
 8007cfa:	2307      	movs	r3, #7
 8007cfc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d00:	f102 0217 	add.w	r2, r2, #23
 8007d04:	7013      	strb	r3, [r2, #0]
 8007d06:	e00d      	b.n	8007d24 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007d08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d0c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <f_open+0x204>
						res = FR_EXIST;
 8007d18:	2308      	movs	r3, #8
 8007d1a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d1e:	f102 0217 	add.w	r2, r2, #23
 8007d22:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d28:	f103 0317 	add.w	r3, r3, #23
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f040 8113 	bne.w	8007f5a <f_open+0x43a>
 8007d34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d38:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d3c:	f003 0308 	and.w	r3, r3, #8
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 810a 	beq.w	8007f5a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007d46:	f7fd f9dd 	bl	8005104 <get_fattime>
 8007d4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d4e:	f103 030c 	add.w	r3, r3, #12
 8007d52:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007d54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d58:	f103 0310 	add.w	r3, r3, #16
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330e      	adds	r3, #14
 8007d60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d64:	f102 020c 	add.w	r2, r2, #12
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d72:	f103 030c 	add.w	r3, r3, #12
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d82:	f103 0310 	add.w	r3, r3, #16
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330f      	adds	r3, #15
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d92:	f103 030c 	add.w	r3, r3, #12
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	0c1a      	lsrs	r2, r3, #16
 8007d9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d9e:	f103 0310 	add.w	r3, r3, #16
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3310      	adds	r3, #16
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dae:	f103 030c 	add.w	r3, r3, #12
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	0e1a      	lsrs	r2, r3, #24
 8007db6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dba:	f103 0310 	add.w	r3, r3, #16
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3311      	adds	r3, #17
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007dc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dca:	f103 0310 	add.w	r3, r3, #16
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330b      	adds	r3, #11
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007dd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dda:	f103 0310 	add.w	r3, r3, #16
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	331c      	adds	r3, #28
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dea:	f103 0310 	add.w	r3, r3, #16
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	331d      	adds	r3, #29
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dfa:	f103 0310 	add.w	r3, r3, #16
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	331e      	adds	r3, #30
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e0a:	f103 0310 	add.w	r3, r3, #16
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	331f      	adds	r3, #31
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e1a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e22:	f102 0210 	add.w	r2, r2, #16
 8007e26:	6811      	ldr	r1, [r2, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fc06 	bl	800663a <ld_clust>
 8007e2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e32:	f103 0308 	add.w	r3, r3, #8
 8007e36:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e3e:	f103 0310 	add.w	r3, r3, #16
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	f7fe fc27 	bl	8006696 <st_clust>
				dj.fs->wflag = 1;
 8007e48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e4c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	2201      	movs	r2, #1
 8007e56:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007e58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e5c:	f103 0308 	add.w	r3, r3, #8
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d079      	beq.n	8007f5a <f_open+0x43a>
					dw = dj.fs->winsect;
 8007e66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e6a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e78:	f102 020c 	add.w	r2, r2, #12
 8007e7c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007e7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e82:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e8a:	f102 0208 	add.w	r2, r2, #8
 8007e8e:	6811      	ldr	r1, [r2, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe f823 	bl	8005edc <remove_chain>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e9c:	f102 0217 	add.w	r2, r2, #23
 8007ea0:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007ea2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ea6:	f103 0317 	add.w	r3, r3, #23
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d154      	bne.n	8007f5a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007eb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb4:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007eb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ebc:	f103 0308 	add.w	r3, r3, #8
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ec8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ece:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ed2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ed6:	f102 020c 	add.w	r2, r2, #12
 8007eda:	6811      	ldr	r1, [r2, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd fc99 	bl	8005814 <move_window>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ee8:	f102 0217 	add.w	r2, r2, #23
 8007eec:	7013      	strb	r3, [r2, #0]
 8007eee:	e034      	b.n	8007f5a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007ef0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ef4:	f103 0317 	add.w	r3, r3, #23
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d12d      	bne.n	8007f5a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007efe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f02:	f103 0310 	add.w	r3, r3, #16
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330b      	adds	r3, #11
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <f_open+0x408>
					res = FR_NO_FILE;
 8007f14:	2304      	movs	r3, #4
 8007f16:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f1a:	f102 0217 	add.w	r2, r2, #23
 8007f1e:	7013      	strb	r3, [r2, #0]
 8007f20:	e01b      	b.n	8007f5a <f_open+0x43a>
 8007f22:	bf00      	nop
 8007f24:	200026f0 	.word	0x200026f0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007f28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f2c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d010      	beq.n	8007f5a <f_open+0x43a>
 8007f38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f3c:	f103 0310 	add.w	r3, r3, #16
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330b      	adds	r3, #11
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <f_open+0x43a>
						res = FR_DENIED;
 8007f4e:	2307      	movs	r3, #7
 8007f50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f54:	f102 0217 	add.w	r2, r2, #23
 8007f58:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007f5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f5e:	f103 0317 	add.w	r3, r3, #23
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d157      	bne.n	8008018 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f6c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007f78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f82:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007f86:	f043 0320 	orr.w	r3, r3, #32
 8007f8a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007f8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f92:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fa0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007fa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa8:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fbc:	f103 0310 	add.w	r3, r3, #16
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fc8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bf14      	ite	ne
 8007fd4:	2301      	movne	r3, #1
 8007fd6:	2300      	moveq	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007fe0:	3b18      	subs	r3, #24
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd fa99 	bl	800551c <inc_lock>
 8007fea:	4602      	mov	r2, r0
 8007fec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ff0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff8:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007ffa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ffe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d105      	bne.n	8008018 <f_open+0x4f8>
 800800c:	2302      	movs	r3, #2
 800800e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008012:	f102 0217 	add.w	r2, r2, #23
 8008016:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008018:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800801c:	f103 0317 	add.w	r3, r3, #23
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 8088 	bne.w	8008138 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800802c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	461a      	mov	r2, r3
 8008036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800803a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800803e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008044:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	2200      	movs	r2, #0
 800804e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008054:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008058:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800805c:	f102 0210 	add.w	r2, r2, #16
 8008060:	6811      	ldr	r1, [r2, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fae9 	bl	800663a <ld_clust>
 8008068:	4602      	mov	r2, r0
 800806a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800806e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008076:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008078:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800807c:	f103 0310 	add.w	r3, r3, #16
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	331f      	adds	r3, #31
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	061a      	lsls	r2, r3, #24
 8008088:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800808c:	f103 0310 	add.w	r3, r3, #16
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	331e      	adds	r3, #30
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	4313      	orrs	r3, r2
 800809a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800809e:	f102 0210 	add.w	r2, r2, #16
 80080a2:	6812      	ldr	r2, [r2, #0]
 80080a4:	321d      	adds	r2, #29
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	0212      	lsls	r2, r2, #8
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080b0:	f102 0210 	add.w	r2, r2, #16
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	321c      	adds	r2, #28
 80080b8:	7812      	ldrb	r2, [r2, #0]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80080c0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80080c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080c8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80080ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80080dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e8:	461a      	mov	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80080ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	461a      	mov	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008104:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008108:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800810c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008110:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008114:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008116:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800811a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800811e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	88da      	ldrh	r2, [r3, #6]
 800812a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800812e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008136:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008138:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800813c:	f103 0317 	add.w	r3, r3, #23
 8008140:	781b      	ldrb	r3, [r3, #0]
}
 8008142:	4618      	mov	r0, r3
 8008144:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop

08008150 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	; 0x28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fc53 	bl	8007a14 <validate>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <f_write+0x2c>
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	e21e      	b.n	80085ba <f_write+0x46a>
	if (fp->err)							/* Check error */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008182:	79db      	ldrb	r3, [r3, #7]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818e:	79db      	ldrb	r3, [r3, #7]
 8008190:	e213      	b.n	80085ba <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008198:	799b      	ldrb	r3, [r3, #6]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80081a2:	2307      	movs	r3, #7
 80081a4:	e209      	b.n	80085ba <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	f080 81d9 	bcs.w	8008572 <f_write+0x422>
 80081c0:	2300      	movs	r3, #0
 80081c2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80081c4:	e1d5      	b.n	8008572 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081da:	8952      	ldrh	r2, [r2, #10]
 80081dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80081e0:	fb01 f202 	mul.w	r2, r1, r2
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 8169 	bne.w	80084be <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008200:	8952      	ldrh	r2, [r2, #10]
 8008202:	fbb3 f3f2 	udiv	r3, r3, r2
 8008206:	b2da      	uxtb	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008214:	789b      	ldrb	r3, [r3, #2]
 8008216:	3b01      	subs	r3, #1
 8008218:	b2db      	uxtb	r3, r3
 800821a:	4013      	ands	r3, r2
 800821c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d15f      	bne.n	80082e4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d111      	bne.n	8008254 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d126      	bne.n	800828e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2100      	movs	r1, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f7fd fea7 	bl	8005f9e <create_chain>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24
 8008252:	e01c      	b.n	800828e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	4619      	mov	r1, r3
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7fd ff3f 	bl	80060ee <clmt_clust>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
 8008272:	e00c      	b.n	800828e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fd fe89 	bl	8005f9e <create_chain>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8173 	beq.w	800857c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	2b01      	cmp	r3, #1
 800829a:	d106      	bne.n	80082aa <f_write+0x15a>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a2:	2202      	movs	r2, #2
 80082a4:	71da      	strb	r2, [r3, #7]
 80082a6:	2302      	movs	r3, #2
 80082a8:	e187      	b.n	80085ba <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d106      	bne.n	80082c0 <f_write+0x170>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	2201      	movs	r2, #1
 80082ba:	71da      	strb	r2, [r3, #7]
 80082bc:	2301      	movs	r3, #1
 80082be:	e17c      	b.n	80085ba <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c6:	461a      	mov	r2, r3
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <f_write+0x194>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082de:	461a      	mov	r2, r3
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ea:	799b      	ldrb	r3, [r3, #6]
 80082ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d023      	beq.n	800833c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008300:	7858      	ldrb	r0, [r3, #1]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	2301      	movs	r3, #1
 800830e:	f7fc ffbb 	bl	8005288 <disk_write>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	2201      	movs	r2, #1
 8008320:	71da      	strb	r2, [r3, #7]
 8008322:	2301      	movs	r3, #1
 8008324:	e149      	b.n	80085ba <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832c:	799b      	ldrb	r3, [r3, #6]
 800832e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008332:	b2da      	uxtb	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f7fd fb51 	bl	80059f6 <clust2sect>
 8008354:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <f_write+0x21a>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008362:	2202      	movs	r2, #2
 8008364:	71da      	strb	r2, [r3, #7]
 8008366:	2302      	movs	r3, #2
 8008368:	e127      	b.n	80085ba <f_write+0x46a>
			sect += csect;
 800836a:	7dbb      	ldrb	r3, [r7, #22]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	895b      	ldrh	r3, [r3, #10]
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	fbb3 f3f2 	udiv	r3, r3, r2
 8008388:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d069      	beq.n	8008464 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008390:	7dba      	ldrb	r2, [r7, #22]
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083a2:	7892      	ldrb	r2, [r2, #2]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d90a      	bls.n	80083be <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	461a      	mov	r2, r3
 80083b8:	7dbb      	ldrb	r3, [r7, #22]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ca:	7858      	ldrb	r0, [r3, #1]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	69b9      	ldr	r1, [r7, #24]
 80083d2:	f7fc ff59 	bl	8005288 <disk_write>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d006      	beq.n	80083ea <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e2:	2201      	movs	r2, #1
 80083e4:	71da      	strb	r2, [r3, #7]
 80083e6:	2301      	movs	r3, #1
 80083e8:	e0e7      	b.n	80085ba <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d926      	bls.n	800844a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008416:	8952      	ldrh	r2, [r2, #10]
 8008418:	fb02 f303 	mul.w	r3, r2, r3
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	18d1      	adds	r1, r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842c:	895b      	ldrh	r3, [r3, #10]
 800842e:	461a      	mov	r2, r3
 8008430:	f7fc ff68 	bl	8005304 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843a:	799b      	ldrb	r3, [r3, #6]
 800843c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008448:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	895b      	ldrh	r3, [r3, #10]
 8008458:	461a      	mov	r2, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	fb02 f303 	mul.w	r3, r2, r3
 8008460:	623b      	str	r3, [r7, #32]
				continue;
 8008462:	e06e      	b.n	8008542 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	429a      	cmp	r2, r3
 8008470:	d01f      	beq.n	80084b2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	429a      	cmp	r2, r3
 8008484:	d215      	bcs.n	80084b2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008492:	7858      	ldrb	r0, [r3, #1]
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	2301      	movs	r3, #1
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	f7fc fed5 	bl	8005248 <disk_read>
 800849e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d006      	beq.n	80084b2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084aa:	2201      	movs	r2, #1
 80084ac:	71da      	strb	r2, [r3, #7]
 80084ae:	2301      	movs	r3, #1
 80084b0:	e083      	b.n	80085ba <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	461a      	mov	r2, r3
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ca:	895b      	ldrh	r3, [r3, #10]
 80084cc:	4618      	mov	r0, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084e2:	8952      	ldrh	r2, [r2, #10]
 80084e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e8:	fb01 f202 	mul.w	r2, r1, r2
 80084ec:	1a9b      	subs	r3, r3, r2
 80084ee:	1ac3      	subs	r3, r0, r3
 80084f0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80084f2:	6a3a      	ldr	r2, [r7, #32]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d901      	bls.n	80084fe <f_write+0x3ae>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008512:	8952      	ldrh	r2, [r2, #10]
 8008514:	fbb3 f1f2 	udiv	r1, r3, r2
 8008518:	fb01 f202 	mul.w	r2, r1, r2
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	6a3a      	ldr	r2, [r7, #32]
 8008524:	69b9      	ldr	r1, [r7, #24]
 8008526:	4618      	mov	r0, r3
 8008528:	f7fc feec 	bl	8005304 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008532:	799b      	ldrb	r3, [r3, #6]
 8008534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008538:	b2da      	uxtb	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008540:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	4413      	add	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800855c:	6093      	str	r3, [r2, #8]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	441a      	add	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f47f ae26 	bne.w	80081c6 <f_write+0x76>
 800857a:	e000      	b.n	800857e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800857c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	429a      	cmp	r2, r3
 8008590:	d907      	bls.n	80085a2 <f_write+0x452>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085a0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a8:	799b      	ldrb	r3, [r3, #6]
 80085aa:	f043 0320 	orr.w	r3, r3, #32
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3728      	adds	r7, #40	; 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b086      	sub	sp, #24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff fa22 	bl	8007a14 <validate>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 80bc 	bne.w	8008754 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e2:	799b      	ldrb	r3, [r3, #6]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80b3 	beq.w	8008754 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f4:	799b      	ldrb	r3, [r3, #6]
 80085f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01e      	beq.n	800863c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860a:	7858      	ldrb	r0, [r3, #1]
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	2301      	movs	r3, #1
 8008618:	f7fc fe36 	bl	8005288 <disk_write>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008622:	2301      	movs	r3, #1
 8008624:	e097      	b.n	8008756 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	799b      	ldrb	r3, [r3, #6]
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	b2da      	uxtb	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fd f8e0 	bl	8005814 <move_window>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d17a      	bne.n	8008754 <f_sync+0x192>
				dir = fp->dir_ptr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	330b      	adds	r3, #11
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	330b      	adds	r3, #11
 8008672:	f042 0220 	orr.w	r2, r2, #32
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	331c      	adds	r3, #28
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	b29b      	uxth	r3, r3
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	b29a      	uxth	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	331d      	adds	r3, #29
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	0c1a      	lsrs	r2, r3, #16
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	331e      	adds	r3, #30
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	0e1a      	lsrs	r2, r3, #24
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	331f      	adds	r3, #31
 80086c0:	b2d2      	uxtb	r2, r2
 80086c2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6938      	ldr	r0, [r7, #16]
 80086d0:	f7fd ffe1 	bl	8006696 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80086d4:	f7fc fd16 	bl	8005104 <get_fattime>
 80086d8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3316      	adds	r3, #22
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	0a1b      	lsrs	r3, r3, #8
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3317      	adds	r3, #23
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	0c1a      	lsrs	r2, r3, #16
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3318      	adds	r3, #24
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0e1a      	lsrs	r2, r3, #24
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3319      	adds	r3, #25
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	3312      	adds	r3, #18
 8008710:	2200      	movs	r2, #0
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3313      	adds	r3, #19
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008722:	799b      	ldrb	r3, [r3, #6]
 8008724:	f023 0320 	bic.w	r3, r3, #32
 8008728:	b2da      	uxtb	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008730:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800873e:	2201      	movs	r2, #1
 8008740:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd f894 	bl	8005878 <sync_fs>
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008754:	7dfb      	ldrb	r3, [r7, #23]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ff2b 	bl	80085c2 <f_sync>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f94c 	bl	8007a14 <validate>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d111      	bne.n	80087aa <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	4618      	mov	r0, r3
 8008790:	f7fc ff80 	bl	8005694 <dec_lock>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a4:	461a      	mov	r2, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b090      	sub	sp, #64	; 0x40
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff f928 	bl	8007a14 <validate>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80087ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <f_lseek+0x24>
 80087d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087d6:	e2da      	b.n	8008d8e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087de:	79db      	ldrb	r3, [r3, #7]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ea:	79db      	ldrb	r3, [r3, #7]
 80087ec:	e2cf      	b.n	8008d8e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8124 	beq.w	8008a44 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d16c      	bne.n	80088de <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1d1a      	adds	r2, r3, #4
 8008812:	627a      	str	r2, [r7, #36]	; 0x24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	2302      	movs	r3, #2
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	d046      	beq.n	80088ba <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	2300      	movs	r3, #0
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	3302      	adds	r3, #2
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	3301      	adds	r3, #1
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800884e:	4618      	mov	r0, r3
 8008850:	f7fd f8f5 	bl	8005a3e <get_fat>
 8008854:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	2b01      	cmp	r3, #1
 800885a:	d806      	bhi.n	800886a <f_lseek+0xb6>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008862:	2202      	movs	r2, #2
 8008864:	71da      	strb	r2, [r3, #7]
 8008866:	2302      	movs	r3, #2
 8008868:	e291      	b.n	8008d8e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d106      	bne.n	8008880 <f_lseek+0xcc>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008878:	2201      	movs	r2, #1
 800887a:	71da      	strb	r2, [r3, #7]
 800887c:	2301      	movs	r3, #1
 800887e:	e286      	b.n	8008d8e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	429a      	cmp	r2, r3
 8008888:	d0d7      	beq.n	800883a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800888a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	429a      	cmp	r2, r3
 8008890:	d809      	bhi.n	80088a6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	627a      	str	r2, [r7, #36]	; 0x24
 8008898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	627a      	str	r2, [r7, #36]	; 0x24
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d3b8      	bcc.n	800882c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80088c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d803      	bhi.n	80088d6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e259      	b.n	8008d8a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80088d6:	2311      	movs	r3, #17
 80088d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80088dc:	e255      	b.n	8008d8a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d904      	bls.n	80088f6 <f_lseek+0x142>
				ofs = fp->fsize;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fc:	461a      	mov	r2, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8240 	beq.w	8008d8a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7fd fbec 	bl	80060ee <clmt_clust>
 8008916:	4602      	mov	r2, r0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f7fd f85f 	bl	80059f6 <clust2sect>
 8008938:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <f_lseek+0x19a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	2202      	movs	r2, #2
 8008948:	71da      	strb	r2, [r3, #7]
 800894a:	2302      	movs	r3, #2
 800894c:	e21f      	b.n	8008d8e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	3b01      	subs	r3, #1
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008958:	6812      	ldr	r2, [r2, #0]
 800895a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800895e:	8952      	ldrh	r2, [r2, #10]
 8008960:	fbb3 f3f2 	udiv	r3, r3, r2
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008970:	7892      	ldrb	r2, [r2, #2]
 8008972:	3a01      	subs	r2, #1
 8008974:	4013      	ands	r3, r2
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	4413      	add	r3, r2
 800897a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008990:	8952      	ldrh	r2, [r2, #10]
 8008992:	fbb3 f1f2 	udiv	r1, r3, r2
 8008996:	fb01 f202 	mul.w	r2, r1, r2
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 81f4 	beq.w	8008d8a <f_lseek+0x5d6>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	f000 81ec 	beq.w	8008d8a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b8:	799b      	ldrb	r3, [r3, #6]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d023      	beq.n	8008a0a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ce:	7858      	ldrb	r0, [r3, #1]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	2301      	movs	r3, #1
 80089dc:	f7fc fc54 	bl	8005288 <disk_write>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d006      	beq.n	80089f4 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ec:	2201      	movs	r2, #1
 80089ee:	71da      	strb	r2, [r3, #7]
 80089f0:	2301      	movs	r3, #1
 80089f2:	e1cc      	b.n	8008d8e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fa:	799b      	ldrb	r3, [r3, #6]
 80089fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a08:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a16:	7858      	ldrb	r0, [r3, #1]
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	f7fc fc13 	bl	8005248 <disk_read>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a2e:	2201      	movs	r2, #1
 8008a30:	71da      	strb	r2, [r3, #7]
 8008a32:	2301      	movs	r3, #1
 8008a34:	e1ab      	b.n	8008d8e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	6193      	str	r3, [r2, #24]
 8008a42:	e1a2      	b.n	8008d8a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d90c      	bls.n	8008a6c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a58:	799b      	ldrb	r3, [r3, #6]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a80:	461a      	mov	r2, r3
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 8100 	beq.w	8008c8e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9a:	789b      	ldrb	r3, [r3, #2]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aaa:	895b      	ldrh	r3, [r3, #10]
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d021      	beq.n	8008afc <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	1e59      	subs	r1, r3, #1
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d315      	bcc.n	8008afc <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	4013      	ands	r3, r2
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ae0:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008afa:	e031      	b.n	8008b60 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d123      	bne.n	8008b54 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fd fa41 	bl	8005f9e <create_chain>
 8008b1c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <f_lseek+0x37e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	71da      	strb	r2, [r3, #7]
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e12d      	b.n	8008d8e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d106      	bne.n	8008b48 <f_lseek+0x394>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b40:	2201      	movs	r2, #1
 8008b42:	71da      	strb	r2, [r3, #7]
 8008b44:	2301      	movs	r3, #1
 8008b46:	e122      	b.n	8008d8e <f_lseek+0x5da>
					fp->sclust = clst;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8093 	beq.w	8008c8e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8008b68:	e052      	b.n	8008c10 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b70:	799b      	ldrb	r3, [r3, #6]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fd fa0a 	bl	8005f9e <create_chain>
 8008b8a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <f_lseek+0x3f6>
							ofs = bcs; break;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	e03f      	b.n	8008c18 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fc ff4b 	bl	8005a3e <get_fat>
 8008ba8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d106      	bne.n	8008bc0 <f_lseek+0x40c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb8:	2201      	movs	r2, #1
 8008bba:	71da      	strb	r2, [r3, #7]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e0e6      	b.n	8008d8e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d909      	bls.n	8008bda <f_lseek+0x426>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d306      	bcc.n	8008be8 <f_lseek+0x434>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be0:	2202      	movs	r2, #2
 8008be2:	71da      	strb	r2, [r3, #7]
 8008be4:	2302      	movs	r3, #2
 8008be6:	e0d2      	b.n	8008d8e <f_lseek+0x5da>
					fp->clust = clst;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c06:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d8a8      	bhi.n	8008b6a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	4413      	add	r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c2a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c38:	895b      	ldrh	r3, [r3, #10]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c42:	fb01 f202 	mul.w	r2, r1, r2
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d020      	beq.n	8008c8e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fc fecd 	bl	80059f6 <clust2sect>
 8008c5c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <f_lseek+0x4be>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	71da      	strb	r2, [r3, #7]
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e08d      	b.n	8008d8e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	461a      	mov	r2, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c8a:	4413      	add	r3, r2
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ca2:	8952      	ldrh	r2, [r2, #10]
 8008ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca8:	fb01 f202 	mul.w	r2, r1, r2
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d04e      	beq.n	8008d50 <f_lseek+0x59c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d047      	beq.n	8008d50 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc6:	799b      	ldrb	r3, [r3, #6]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d023      	beq.n	8008d18 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cdc:	7858      	ldrb	r0, [r3, #1]
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f7fc facd 	bl	8005288 <disk_write>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	71da      	strb	r2, [r3, #7]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e045      	b.n	8008d8e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d08:	799b      	ldrb	r3, [r3, #6]
 8008d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d16:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d24:	7858      	ldrb	r0, [r3, #1]
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	2301      	movs	r3, #1
 8008d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2c:	f7fc fa8c 	bl	8005248 <disk_read>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	71da      	strb	r2, [r3, #7]
 8008d40:	2301      	movs	r3, #1
 8008d42:	e024      	b.n	8008d8e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d912      	bls.n	8008d8a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d72:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7a:	799b      	ldrb	r3, [r3, #6]
 8008d7c:	f043 0320 	orr.w	r3, r3, #32
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d88:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3740      	adds	r7, #64	; 0x40
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	2b0a      	cmp	r3, #10
 8008da6:	d103      	bne.n	8008db0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008da8:	210d      	movs	r1, #13
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fff3 	bl	8008d96 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db25      	blt.n	8008e08 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	60fa      	str	r2, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b3c      	cmp	r3, #60	; 0x3c
 8008dce:	dd12      	ble.n	8008df6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f103 010c 	add.w	r1, r3, #12
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	f107 0308 	add.w	r3, r7, #8
 8008de0:	f7ff f9b6 	bl	8008150 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d101      	bne.n	8008df0 <putc_bfd+0x5a>
 8008dec:	2300      	movs	r3, #0
 8008dee:	e001      	b.n	8008df4 <putc_bfd+0x5e>
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295
 8008df4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]
 8008e06:	e000      	b.n	8008e0a <putc_bfd+0x74>
	if (i < 0) return;
 8008e08:	bf00      	nop
}
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008e10:	b590      	push	{r4, r7, lr}
 8008e12:	b097      	sub	sp, #92	; 0x5c
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008e26:	e009      	b.n	8008e3c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	f107 030c 	add.w	r3, r7, #12
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff ffad 	bl	8008d96 <putc_bfd>
	while (*str)			/* Put the string */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1f1      	bne.n	8008e28 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	db15      	blt.n	8008e76 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	461c      	mov	r4, r3
 8008e50:	f107 0208 	add.w	r2, r7, #8
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	f103 010c 	add.w	r1, r3, #12
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	4622      	mov	r2, r4
 8008e60:	f7ff f976 	bl	8008150 <f_write>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d101      	bne.n	8008e76 <f_puts+0x66>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	e001      	b.n	8008e7a <f_puts+0x6a>
	return EOF;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	375c      	adds	r7, #92	; 0x5c
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd90      	pop	{r4, r7, pc}
	...

08008e84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008e9c:	7a5b      	ldrb	r3, [r3, #9]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d831      	bhi.n	8008f08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008ea6:	7a5b      	ldrb	r3, [r3, #9]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008eae:	2100      	movs	r1, #0
 8008eb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008eb2:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008eb4:	7a5b      	ldrb	r3, [r3, #9]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008ec4:	7a5b      	ldrb	r3, [r3, #9]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	79fa      	ldrb	r2, [r7, #7]
 8008ed0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ed2:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008ed4:	7a5b      	ldrb	r3, [r3, #9]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	b2d1      	uxtb	r1, r2
 8008edc:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <FATFS_LinkDriverEx+0x90>)
 8008ede:	7251      	strb	r1, [r2, #9]
 8008ee0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ee2:	7dbb      	ldrb	r3, [r7, #22]
 8008ee4:	3330      	adds	r3, #48	; 0x30
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	223a      	movs	r2, #58	; 0x3a
 8008ef2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	222f      	movs	r2, #47	; 0x2f
 8008efa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3303      	adds	r3, #3
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr
 8008f14:	200028f0 	.word	0x200028f0

08008f18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f22:	2200      	movs	r2, #0
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff ffac 	bl	8008e84 <FATFS_LinkDriverEx>
 8008f2c:	4603      	mov	r3, r0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	2b7f      	cmp	r3, #127	; 0x7f
 8008f48:	d802      	bhi.n	8008f50 <ff_convert+0x18>
		c = chr;
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	81fb      	strh	r3, [r7, #14]
 8008f4e:	e025      	b.n	8008f9c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	2bff      	cmp	r3, #255	; 0xff
 8008f5a:	d805      	bhi.n	8008f68 <ff_convert+0x30>
 8008f5c:	88fb      	ldrh	r3, [r7, #6]
 8008f5e:	3b80      	subs	r3, #128	; 0x80
 8008f60:	4a11      	ldr	r2, [pc, #68]	; (8008fa8 <ff_convert+0x70>)
 8008f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f66:	e000      	b.n	8008f6a <ff_convert+0x32>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	81fb      	strh	r3, [r7, #14]
 8008f6c:	e016      	b.n	8008f9c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008f6e:	2300      	movs	r3, #0
 8008f70:	81fb      	strh	r3, [r7, #14]
 8008f72:	e009      	b.n	8008f88 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008f74:	89fb      	ldrh	r3, [r7, #14]
 8008f76:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <ff_convert+0x70>)
 8008f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d006      	beq.n	8008f90 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008f82:	89fb      	ldrh	r3, [r7, #14]
 8008f84:	3301      	adds	r3, #1
 8008f86:	81fb      	strh	r3, [r7, #14]
 8008f88:	89fb      	ldrh	r3, [r7, #14]
 8008f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f8c:	d9f2      	bls.n	8008f74 <ff_convert+0x3c>
 8008f8e:	e000      	b.n	8008f92 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008f90:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008f92:	89fb      	ldrh	r3, [r7, #14]
 8008f94:	3380      	adds	r3, #128	; 0x80
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr
 8008fa8:	0800c438 	.word	0x0800c438

08008fac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e002      	b.n	8008fc2 <ff_wtoupper+0x16>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	4a0f      	ldr	r2, [pc, #60]	; (8009000 <ff_wtoupper+0x54>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <ff_wtoupper+0x30>
 8008fce:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <ff_wtoupper+0x54>)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d1ef      	bne.n	8008fbc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <ff_wtoupper+0x54>)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <ff_wtoupper+0x46>
 8008fe8:	4a06      	ldr	r2, [pc, #24]	; (8009004 <ff_wtoupper+0x58>)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ff0:	e000      	b.n	8008ff4 <ff_wtoupper+0x48>
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	0800c538 	.word	0x0800c538
 8009004:	0800c718 	.word	0x0800c718

08009008 <rand>:
 8009008:	4b16      	ldr	r3, [pc, #88]	; (8009064 <rand+0x5c>)
 800900a:	b510      	push	{r4, lr}
 800900c:	681c      	ldr	r4, [r3, #0]
 800900e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009010:	b9b3      	cbnz	r3, 8009040 <rand+0x38>
 8009012:	2018      	movs	r0, #24
 8009014:	f000 fa6c 	bl	80094f0 <malloc>
 8009018:	4602      	mov	r2, r0
 800901a:	6320      	str	r0, [r4, #48]	; 0x30
 800901c:	b920      	cbnz	r0, 8009028 <rand+0x20>
 800901e:	2152      	movs	r1, #82	; 0x52
 8009020:	4b11      	ldr	r3, [pc, #68]	; (8009068 <rand+0x60>)
 8009022:	4812      	ldr	r0, [pc, #72]	; (800906c <rand+0x64>)
 8009024:	f000 f9fe 	bl	8009424 <__assert_func>
 8009028:	4911      	ldr	r1, [pc, #68]	; (8009070 <rand+0x68>)
 800902a:	4b12      	ldr	r3, [pc, #72]	; (8009074 <rand+0x6c>)
 800902c:	e9c0 1300 	strd	r1, r3, [r0]
 8009030:	4b11      	ldr	r3, [pc, #68]	; (8009078 <rand+0x70>)
 8009032:	2100      	movs	r1, #0
 8009034:	6083      	str	r3, [r0, #8]
 8009036:	230b      	movs	r3, #11
 8009038:	8183      	strh	r3, [r0, #12]
 800903a:	2001      	movs	r0, #1
 800903c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009040:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009042:	480e      	ldr	r0, [pc, #56]	; (800907c <rand+0x74>)
 8009044:	690b      	ldr	r3, [r1, #16]
 8009046:	694c      	ldr	r4, [r1, #20]
 8009048:	4358      	muls	r0, r3
 800904a:	4a0d      	ldr	r2, [pc, #52]	; (8009080 <rand+0x78>)
 800904c:	fb02 0004 	mla	r0, r2, r4, r0
 8009050:	fba3 3202 	umull	r3, r2, r3, r2
 8009054:	3301      	adds	r3, #1
 8009056:	eb40 0002 	adc.w	r0, r0, r2
 800905a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800905e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009062:	bd10      	pop	{r4, pc}
 8009064:	2000008c 	.word	0x2000008c
 8009068:	0800c8f8 	.word	0x0800c8f8
 800906c:	0800c90f 	.word	0x0800c90f
 8009070:	abcd330e 	.word	0xabcd330e
 8009074:	e66d1234 	.word	0xe66d1234
 8009078:	0005deec 	.word	0x0005deec
 800907c:	5851f42d 	.word	0x5851f42d
 8009080:	4c957f2d 	.word	0x4c957f2d

08009084 <std>:
 8009084:	2300      	movs	r3, #0
 8009086:	b510      	push	{r4, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	e9c0 3300 	strd	r3, r3, [r0]
 800908e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009092:	6083      	str	r3, [r0, #8]
 8009094:	8181      	strh	r1, [r0, #12]
 8009096:	6643      	str	r3, [r0, #100]	; 0x64
 8009098:	81c2      	strh	r2, [r0, #14]
 800909a:	6183      	str	r3, [r0, #24]
 800909c:	4619      	mov	r1, r3
 800909e:	2208      	movs	r2, #8
 80090a0:	305c      	adds	r0, #92	; 0x5c
 80090a2:	f000 f92e 	bl	8009302 <memset>
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x38>)
 80090a8:	6224      	str	r4, [r4, #32]
 80090aa:	6263      	str	r3, [r4, #36]	; 0x24
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <std+0x3c>)
 80090ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <std+0x40>)
 80090b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <std+0x44>)
 80090b6:	6323      	str	r3, [r4, #48]	; 0x30
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	08009279 	.word	0x08009279
 80090c0:	0800929f 	.word	0x0800929f
 80090c4:	080092d7 	.word	0x080092d7
 80090c8:	080092fb 	.word	0x080092fb

080090cc <stdio_exit_handler>:
 80090cc:	4a02      	ldr	r2, [pc, #8]	; (80090d8 <stdio_exit_handler+0xc>)
 80090ce:	4903      	ldr	r1, [pc, #12]	; (80090dc <stdio_exit_handler+0x10>)
 80090d0:	4803      	ldr	r0, [pc, #12]	; (80090e0 <stdio_exit_handler+0x14>)
 80090d2:	f000 b869 	b.w	80091a8 <_fwalk_sglue>
 80090d6:	bf00      	nop
 80090d8:	20000034 	.word	0x20000034
 80090dc:	0800a371 	.word	0x0800a371
 80090e0:	20000040 	.word	0x20000040

080090e4 <cleanup_stdio>:
 80090e4:	6841      	ldr	r1, [r0, #4]
 80090e6:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <cleanup_stdio+0x34>)
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4299      	cmp	r1, r3
 80090ec:	4604      	mov	r4, r0
 80090ee:	d001      	beq.n	80090f4 <cleanup_stdio+0x10>
 80090f0:	f001 f93e 	bl	800a370 <_fflush_r>
 80090f4:	68a1      	ldr	r1, [r4, #8]
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <cleanup_stdio+0x38>)
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <cleanup_stdio+0x1e>
 80090fc:	4620      	mov	r0, r4
 80090fe:	f001 f937 	bl	800a370 <_fflush_r>
 8009102:	68e1      	ldr	r1, [r4, #12]
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <cleanup_stdio+0x3c>)
 8009106:	4299      	cmp	r1, r3
 8009108:	d004      	beq.n	8009114 <cleanup_stdio+0x30>
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009110:	f001 b92e 	b.w	800a370 <_fflush_r>
 8009114:	bd10      	pop	{r4, pc}
 8009116:	bf00      	nop
 8009118:	200028fc 	.word	0x200028fc
 800911c:	20002964 	.word	0x20002964
 8009120:	200029cc 	.word	0x200029cc

08009124 <global_stdio_init.part.0>:
 8009124:	b510      	push	{r4, lr}
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <global_stdio_init.part.0+0x30>)
 8009128:	4c0b      	ldr	r4, [pc, #44]	; (8009158 <global_stdio_init.part.0+0x34>)
 800912a:	4a0c      	ldr	r2, [pc, #48]	; (800915c <global_stdio_init.part.0+0x38>)
 800912c:	4620      	mov	r0, r4
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	2104      	movs	r1, #4
 8009132:	2200      	movs	r2, #0
 8009134:	f7ff ffa6 	bl	8009084 <std>
 8009138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800913c:	2201      	movs	r2, #1
 800913e:	2109      	movs	r1, #9
 8009140:	f7ff ffa0 	bl	8009084 <std>
 8009144:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009148:	2202      	movs	r2, #2
 800914a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914e:	2112      	movs	r1, #18
 8009150:	f7ff bf98 	b.w	8009084 <std>
 8009154:	20002a34 	.word	0x20002a34
 8009158:	200028fc 	.word	0x200028fc
 800915c:	080090cd 	.word	0x080090cd

08009160 <__sfp_lock_acquire>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sfp_lock_acquire+0x8>)
 8009162:	f000 b947 	b.w	80093f4 <__retarget_lock_acquire_recursive>
 8009166:	bf00      	nop
 8009168:	20002a3d 	.word	0x20002a3d

0800916c <__sfp_lock_release>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_release+0x8>)
 800916e:	f000 b942 	b.w	80093f6 <__retarget_lock_release_recursive>
 8009172:	bf00      	nop
 8009174:	20002a3d 	.word	0x20002a3d

08009178 <__sinit>:
 8009178:	b510      	push	{r4, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	f7ff fff0 	bl	8009160 <__sfp_lock_acquire>
 8009180:	6a23      	ldr	r3, [r4, #32]
 8009182:	b11b      	cbz	r3, 800918c <__sinit+0x14>
 8009184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009188:	f7ff bff0 	b.w	800916c <__sfp_lock_release>
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <__sinit+0x28>)
 800918e:	6223      	str	r3, [r4, #32]
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <__sinit+0x2c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f5      	bne.n	8009184 <__sinit+0xc>
 8009198:	f7ff ffc4 	bl	8009124 <global_stdio_init.part.0>
 800919c:	e7f2      	b.n	8009184 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	080090e5 	.word	0x080090e5
 80091a4:	20002a34 	.word	0x20002a34

080091a8 <_fwalk_sglue>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	4607      	mov	r7, r0
 80091ae:	4688      	mov	r8, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	2600      	movs	r6, #0
 80091b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091b8:	f1b9 0901 	subs.w	r9, r9, #1
 80091bc:	d505      	bpl.n	80091ca <_fwalk_sglue+0x22>
 80091be:	6824      	ldr	r4, [r4, #0]
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d1f7      	bne.n	80091b4 <_fwalk_sglue+0xc>
 80091c4:	4630      	mov	r0, r6
 80091c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d907      	bls.n	80091e0 <_fwalk_sglue+0x38>
 80091d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d4:	3301      	adds	r3, #1
 80091d6:	d003      	beq.n	80091e0 <_fwalk_sglue+0x38>
 80091d8:	4629      	mov	r1, r5
 80091da:	4638      	mov	r0, r7
 80091dc:	47c0      	blx	r8
 80091de:	4306      	orrs	r6, r0
 80091e0:	3568      	adds	r5, #104	; 0x68
 80091e2:	e7e9      	b.n	80091b8 <_fwalk_sglue+0x10>

080091e4 <siprintf>:
 80091e4:	b40e      	push	{r1, r2, r3}
 80091e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091ea:	b500      	push	{lr}
 80091ec:	b09c      	sub	sp, #112	; 0x70
 80091ee:	ab1d      	add	r3, sp, #116	; 0x74
 80091f0:	9002      	str	r0, [sp, #8]
 80091f2:	9006      	str	r0, [sp, #24]
 80091f4:	9107      	str	r1, [sp, #28]
 80091f6:	9104      	str	r1, [sp, #16]
 80091f8:	4808      	ldr	r0, [pc, #32]	; (800921c <siprintf+0x38>)
 80091fa:	4909      	ldr	r1, [pc, #36]	; (8009220 <siprintf+0x3c>)
 80091fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009200:	9105      	str	r1, [sp, #20]
 8009202:	6800      	ldr	r0, [r0, #0]
 8009204:	a902      	add	r1, sp, #8
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	f000 fa80 	bl	800970c <_svfiprintf_r>
 800920c:	2200      	movs	r2, #0
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	b01c      	add	sp, #112	; 0x70
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	b003      	add	sp, #12
 800921a:	4770      	bx	lr
 800921c:	2000008c 	.word	0x2000008c
 8009220:	ffff0208 	.word	0xffff0208

08009224 <siscanf>:
 8009224:	b40e      	push	{r1, r2, r3}
 8009226:	f44f 7201 	mov.w	r2, #516	; 0x204
 800922a:	b530      	push	{r4, r5, lr}
 800922c:	b09c      	sub	sp, #112	; 0x70
 800922e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009230:	f854 5b04 	ldr.w	r5, [r4], #4
 8009234:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009238:	9002      	str	r0, [sp, #8]
 800923a:	9006      	str	r0, [sp, #24]
 800923c:	f7f6 ff86 	bl	800014c <strlen>
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <siscanf+0x4c>)
 8009242:	9003      	str	r0, [sp, #12]
 8009244:	930b      	str	r3, [sp, #44]	; 0x2c
 8009246:	2300      	movs	r3, #0
 8009248:	930f      	str	r3, [sp, #60]	; 0x3c
 800924a:	9314      	str	r3, [sp, #80]	; 0x50
 800924c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009250:	9007      	str	r0, [sp, #28]
 8009252:	4808      	ldr	r0, [pc, #32]	; (8009274 <siscanf+0x50>)
 8009254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009258:	462a      	mov	r2, r5
 800925a:	4623      	mov	r3, r4
 800925c:	a902      	add	r1, sp, #8
 800925e:	6800      	ldr	r0, [r0, #0]
 8009260:	9401      	str	r4, [sp, #4]
 8009262:	f000 fbab 	bl	80099bc <__ssvfiscanf_r>
 8009266:	b01c      	add	sp, #112	; 0x70
 8009268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800926c:	b003      	add	sp, #12
 800926e:	4770      	bx	lr
 8009270:	0800929b 	.word	0x0800929b
 8009274:	2000008c 	.word	0x2000008c

08009278 <__sread>:
 8009278:	b510      	push	{r4, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	f000 f86a 	bl	8009358 <_read_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	bfab      	itete	ge
 8009288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800928a:	89a3      	ldrhlt	r3, [r4, #12]
 800928c:	181b      	addge	r3, r3, r0
 800928e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009292:	bfac      	ite	ge
 8009294:	6563      	strge	r3, [r4, #84]	; 0x54
 8009296:	81a3      	strhlt	r3, [r4, #12]
 8009298:	bd10      	pop	{r4, pc}

0800929a <__seofread>:
 800929a:	2000      	movs	r0, #0
 800929c:	4770      	bx	lr

0800929e <__swrite>:
 800929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a2:	461f      	mov	r7, r3
 80092a4:	898b      	ldrh	r3, [r1, #12]
 80092a6:	4605      	mov	r5, r0
 80092a8:	05db      	lsls	r3, r3, #23
 80092aa:	460c      	mov	r4, r1
 80092ac:	4616      	mov	r6, r2
 80092ae:	d505      	bpl.n	80092bc <__swrite+0x1e>
 80092b0:	2302      	movs	r3, #2
 80092b2:	2200      	movs	r2, #0
 80092b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b8:	f000 f83c 	bl	8009334 <_lseek_r>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	4632      	mov	r2, r6
 80092c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	4628      	mov	r0, r5
 80092c8:	463b      	mov	r3, r7
 80092ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092d2:	f000 b853 	b.w	800937c <_write_r>

080092d6 <__sseek>:
 80092d6:	b510      	push	{r4, lr}
 80092d8:	460c      	mov	r4, r1
 80092da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092de:	f000 f829 	bl	8009334 <_lseek_r>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	bf15      	itete	ne
 80092e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092f2:	81a3      	strheq	r3, [r4, #12]
 80092f4:	bf18      	it	ne
 80092f6:	81a3      	strhne	r3, [r4, #12]
 80092f8:	bd10      	pop	{r4, pc}

080092fa <__sclose>:
 80092fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fe:	f000 b809 	b.w	8009314 <_close_r>

08009302 <memset>:
 8009302:	4603      	mov	r3, r0
 8009304:	4402      	add	r2, r0
 8009306:	4293      	cmp	r3, r2
 8009308:	d100      	bne.n	800930c <memset+0xa>
 800930a:	4770      	bx	lr
 800930c:	f803 1b01 	strb.w	r1, [r3], #1
 8009310:	e7f9      	b.n	8009306 <memset+0x4>
	...

08009314 <_close_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	2300      	movs	r3, #0
 8009318:	4d05      	ldr	r5, [pc, #20]	; (8009330 <_close_r+0x1c>)
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	f7f9 f9b2 	bl	8002688 <_close>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_close_r+0x1a>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_close_r+0x1a>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20002a38 	.word	0x20002a38

08009334 <_lseek_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	2200      	movs	r2, #0
 800933e:	4d05      	ldr	r5, [pc, #20]	; (8009354 <_lseek_r+0x20>)
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7f9 f9c4 	bl	80026d0 <_lseek>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_lseek_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_lseek_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20002a38 	.word	0x20002a38

08009358 <_read_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	4611      	mov	r1, r2
 8009360:	2200      	movs	r2, #0
 8009362:	4d05      	ldr	r5, [pc, #20]	; (8009378 <_read_r+0x20>)
 8009364:	602a      	str	r2, [r5, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f7f9 f955 	bl	8002616 <_read>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_read_r+0x1e>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_read_r+0x1e>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20002a38 	.word	0x20002a38

0800937c <_write_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	4611      	mov	r1, r2
 8009384:	2200      	movs	r2, #0
 8009386:	4d05      	ldr	r5, [pc, #20]	; (800939c <_write_r+0x20>)
 8009388:	602a      	str	r2, [r5, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f7f9 f960 	bl	8002650 <_write>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_write_r+0x1e>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_write_r+0x1e>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20002a38 	.word	0x20002a38

080093a0 <__errno>:
 80093a0:	4b01      	ldr	r3, [pc, #4]	; (80093a8 <__errno+0x8>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	2000008c 	.word	0x2000008c

080093ac <__libc_init_array>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	2600      	movs	r6, #0
 80093b0:	4d0c      	ldr	r5, [pc, #48]	; (80093e4 <__libc_init_array+0x38>)
 80093b2:	4c0d      	ldr	r4, [pc, #52]	; (80093e8 <__libc_init_array+0x3c>)
 80093b4:	1b64      	subs	r4, r4, r5
 80093b6:	10a4      	asrs	r4, r4, #2
 80093b8:	42a6      	cmp	r6, r4
 80093ba:	d109      	bne.n	80093d0 <__libc_init_array+0x24>
 80093bc:	f001 fc8e 	bl	800acdc <_init>
 80093c0:	2600      	movs	r6, #0
 80093c2:	4d0a      	ldr	r5, [pc, #40]	; (80093ec <__libc_init_array+0x40>)
 80093c4:	4c0a      	ldr	r4, [pc, #40]	; (80093f0 <__libc_init_array+0x44>)
 80093c6:	1b64      	subs	r4, r4, r5
 80093c8:	10a4      	asrs	r4, r4, #2
 80093ca:	42a6      	cmp	r6, r4
 80093cc:	d105      	bne.n	80093da <__libc_init_array+0x2e>
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d4:	4798      	blx	r3
 80093d6:	3601      	adds	r6, #1
 80093d8:	e7ee      	b.n	80093b8 <__libc_init_array+0xc>
 80093da:	f855 3b04 	ldr.w	r3, [r5], #4
 80093de:	4798      	blx	r3
 80093e0:	3601      	adds	r6, #1
 80093e2:	e7f2      	b.n	80093ca <__libc_init_array+0x1e>
 80093e4:	0800caf4 	.word	0x0800caf4
 80093e8:	0800caf4 	.word	0x0800caf4
 80093ec:	0800caf4 	.word	0x0800caf4
 80093f0:	0800caf8 	.word	0x0800caf8

080093f4 <__retarget_lock_acquire_recursive>:
 80093f4:	4770      	bx	lr

080093f6 <__retarget_lock_release_recursive>:
 80093f6:	4770      	bx	lr

080093f8 <strcpy>:
 80093f8:	4603      	mov	r3, r0
 80093fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093fe:	f803 2b01 	strb.w	r2, [r3], #1
 8009402:	2a00      	cmp	r2, #0
 8009404:	d1f9      	bne.n	80093fa <strcpy+0x2>
 8009406:	4770      	bx	lr

08009408 <memcpy>:
 8009408:	440a      	add	r2, r1
 800940a:	4291      	cmp	r1, r2
 800940c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009410:	d100      	bne.n	8009414 <memcpy+0xc>
 8009412:	4770      	bx	lr
 8009414:	b510      	push	{r4, lr}
 8009416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941a:	4291      	cmp	r1, r2
 800941c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009420:	d1f9      	bne.n	8009416 <memcpy+0xe>
 8009422:	bd10      	pop	{r4, pc}

08009424 <__assert_func>:
 8009424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009426:	4614      	mov	r4, r2
 8009428:	461a      	mov	r2, r3
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <__assert_func+0x2c>)
 800942c:	4605      	mov	r5, r0
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68d8      	ldr	r0, [r3, #12]
 8009432:	b14c      	cbz	r4, 8009448 <__assert_func+0x24>
 8009434:	4b07      	ldr	r3, [pc, #28]	; (8009454 <__assert_func+0x30>)
 8009436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800943a:	9100      	str	r1, [sp, #0]
 800943c:	462b      	mov	r3, r5
 800943e:	4906      	ldr	r1, [pc, #24]	; (8009458 <__assert_func+0x34>)
 8009440:	f000 ffbe 	bl	800a3c0 <fiprintf>
 8009444:	f001 f878 	bl	800a538 <abort>
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <__assert_func+0x38>)
 800944a:	461c      	mov	r4, r3
 800944c:	e7f3      	b.n	8009436 <__assert_func+0x12>
 800944e:	bf00      	nop
 8009450:	2000008c 	.word	0x2000008c
 8009454:	0800c967 	.word	0x0800c967
 8009458:	0800c974 	.word	0x0800c974
 800945c:	0800c9a2 	.word	0x0800c9a2

08009460 <_free_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4605      	mov	r5, r0
 8009464:	2900      	cmp	r1, #0
 8009466:	d040      	beq.n	80094ea <_free_r+0x8a>
 8009468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946c:	1f0c      	subs	r4, r1, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	bfb8      	it	lt
 8009472:	18e4      	addlt	r4, r4, r3
 8009474:	f000 f8e4 	bl	8009640 <__malloc_lock>
 8009478:	4a1c      	ldr	r2, [pc, #112]	; (80094ec <_free_r+0x8c>)
 800947a:	6813      	ldr	r3, [r2, #0]
 800947c:	b933      	cbnz	r3, 800948c <_free_r+0x2c>
 800947e:	6063      	str	r3, [r4, #4]
 8009480:	6014      	str	r4, [r2, #0]
 8009482:	4628      	mov	r0, r5
 8009484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009488:	f000 b8e0 	b.w	800964c <__malloc_unlock>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d908      	bls.n	80094a2 <_free_r+0x42>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	1821      	adds	r1, r4, r0
 8009494:	428b      	cmp	r3, r1
 8009496:	bf01      	itttt	eq
 8009498:	6819      	ldreq	r1, [r3, #0]
 800949a:	685b      	ldreq	r3, [r3, #4]
 800949c:	1809      	addeq	r1, r1, r0
 800949e:	6021      	streq	r1, [r4, #0]
 80094a0:	e7ed      	b.n	800947e <_free_r+0x1e>
 80094a2:	461a      	mov	r2, r3
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	b10b      	cbz	r3, 80094ac <_free_r+0x4c>
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d9fa      	bls.n	80094a2 <_free_r+0x42>
 80094ac:	6811      	ldr	r1, [r2, #0]
 80094ae:	1850      	adds	r0, r2, r1
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d10b      	bne.n	80094cc <_free_r+0x6c>
 80094b4:	6820      	ldr	r0, [r4, #0]
 80094b6:	4401      	add	r1, r0
 80094b8:	1850      	adds	r0, r2, r1
 80094ba:	4283      	cmp	r3, r0
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	d1e0      	bne.n	8009482 <_free_r+0x22>
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4408      	add	r0, r1
 80094c6:	6010      	str	r0, [r2, #0]
 80094c8:	6053      	str	r3, [r2, #4]
 80094ca:	e7da      	b.n	8009482 <_free_r+0x22>
 80094cc:	d902      	bls.n	80094d4 <_free_r+0x74>
 80094ce:	230c      	movs	r3, #12
 80094d0:	602b      	str	r3, [r5, #0]
 80094d2:	e7d6      	b.n	8009482 <_free_r+0x22>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	1821      	adds	r1, r4, r0
 80094d8:	428b      	cmp	r3, r1
 80094da:	bf01      	itttt	eq
 80094dc:	6819      	ldreq	r1, [r3, #0]
 80094de:	685b      	ldreq	r3, [r3, #4]
 80094e0:	1809      	addeq	r1, r1, r0
 80094e2:	6021      	streq	r1, [r4, #0]
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6054      	str	r4, [r2, #4]
 80094e8:	e7cb      	b.n	8009482 <_free_r+0x22>
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20002a40 	.word	0x20002a40

080094f0 <malloc>:
 80094f0:	4b02      	ldr	r3, [pc, #8]	; (80094fc <malloc+0xc>)
 80094f2:	4601      	mov	r1, r0
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f000 b823 	b.w	8009540 <_malloc_r>
 80094fa:	bf00      	nop
 80094fc:	2000008c 	.word	0x2000008c

08009500 <sbrk_aligned>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4e0e      	ldr	r6, [pc, #56]	; (800953c <sbrk_aligned+0x3c>)
 8009504:	460c      	mov	r4, r1
 8009506:	6831      	ldr	r1, [r6, #0]
 8009508:	4605      	mov	r5, r0
 800950a:	b911      	cbnz	r1, 8009512 <sbrk_aligned+0x12>
 800950c:	f000 fff6 	bl	800a4fc <_sbrk_r>
 8009510:	6030      	str	r0, [r6, #0]
 8009512:	4621      	mov	r1, r4
 8009514:	4628      	mov	r0, r5
 8009516:	f000 fff1 	bl	800a4fc <_sbrk_r>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d00a      	beq.n	8009534 <sbrk_aligned+0x34>
 800951e:	1cc4      	adds	r4, r0, #3
 8009520:	f024 0403 	bic.w	r4, r4, #3
 8009524:	42a0      	cmp	r0, r4
 8009526:	d007      	beq.n	8009538 <sbrk_aligned+0x38>
 8009528:	1a21      	subs	r1, r4, r0
 800952a:	4628      	mov	r0, r5
 800952c:	f000 ffe6 	bl	800a4fc <_sbrk_r>
 8009530:	3001      	adds	r0, #1
 8009532:	d101      	bne.n	8009538 <sbrk_aligned+0x38>
 8009534:	f04f 34ff 	mov.w	r4, #4294967295
 8009538:	4620      	mov	r0, r4
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	20002a44 	.word	0x20002a44

08009540 <_malloc_r>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	1ccd      	adds	r5, r1, #3
 8009546:	f025 0503 	bic.w	r5, r5, #3
 800954a:	3508      	adds	r5, #8
 800954c:	2d0c      	cmp	r5, #12
 800954e:	bf38      	it	cc
 8009550:	250c      	movcc	r5, #12
 8009552:	2d00      	cmp	r5, #0
 8009554:	4607      	mov	r7, r0
 8009556:	db01      	blt.n	800955c <_malloc_r+0x1c>
 8009558:	42a9      	cmp	r1, r5
 800955a:	d905      	bls.n	8009568 <_malloc_r+0x28>
 800955c:	230c      	movs	r3, #12
 800955e:	2600      	movs	r6, #0
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4630      	mov	r0, r6
 8009564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009568:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800963c <_malloc_r+0xfc>
 800956c:	f000 f868 	bl	8009640 <__malloc_lock>
 8009570:	f8d8 3000 	ldr.w	r3, [r8]
 8009574:	461c      	mov	r4, r3
 8009576:	bb5c      	cbnz	r4, 80095d0 <_malloc_r+0x90>
 8009578:	4629      	mov	r1, r5
 800957a:	4638      	mov	r0, r7
 800957c:	f7ff ffc0 	bl	8009500 <sbrk_aligned>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	4604      	mov	r4, r0
 8009584:	d155      	bne.n	8009632 <_malloc_r+0xf2>
 8009586:	f8d8 4000 	ldr.w	r4, [r8]
 800958a:	4626      	mov	r6, r4
 800958c:	2e00      	cmp	r6, #0
 800958e:	d145      	bne.n	800961c <_malloc_r+0xdc>
 8009590:	2c00      	cmp	r4, #0
 8009592:	d048      	beq.n	8009626 <_malloc_r+0xe6>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	4631      	mov	r1, r6
 8009598:	4638      	mov	r0, r7
 800959a:	eb04 0903 	add.w	r9, r4, r3
 800959e:	f000 ffad 	bl	800a4fc <_sbrk_r>
 80095a2:	4581      	cmp	r9, r0
 80095a4:	d13f      	bne.n	8009626 <_malloc_r+0xe6>
 80095a6:	6821      	ldr	r1, [r4, #0]
 80095a8:	4638      	mov	r0, r7
 80095aa:	1a6d      	subs	r5, r5, r1
 80095ac:	4629      	mov	r1, r5
 80095ae:	f7ff ffa7 	bl	8009500 <sbrk_aligned>
 80095b2:	3001      	adds	r0, #1
 80095b4:	d037      	beq.n	8009626 <_malloc_r+0xe6>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	442b      	add	r3, r5
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	f8d8 3000 	ldr.w	r3, [r8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d038      	beq.n	8009636 <_malloc_r+0xf6>
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	42a2      	cmp	r2, r4
 80095c8:	d12b      	bne.n	8009622 <_malloc_r+0xe2>
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	e00f      	b.n	80095f0 <_malloc_r+0xb0>
 80095d0:	6822      	ldr	r2, [r4, #0]
 80095d2:	1b52      	subs	r2, r2, r5
 80095d4:	d41f      	bmi.n	8009616 <_malloc_r+0xd6>
 80095d6:	2a0b      	cmp	r2, #11
 80095d8:	d917      	bls.n	800960a <_malloc_r+0xca>
 80095da:	1961      	adds	r1, r4, r5
 80095dc:	42a3      	cmp	r3, r4
 80095de:	6025      	str	r5, [r4, #0]
 80095e0:	bf18      	it	ne
 80095e2:	6059      	strne	r1, [r3, #4]
 80095e4:	6863      	ldr	r3, [r4, #4]
 80095e6:	bf08      	it	eq
 80095e8:	f8c8 1000 	streq.w	r1, [r8]
 80095ec:	5162      	str	r2, [r4, r5]
 80095ee:	604b      	str	r3, [r1, #4]
 80095f0:	4638      	mov	r0, r7
 80095f2:	f104 060b 	add.w	r6, r4, #11
 80095f6:	f000 f829 	bl	800964c <__malloc_unlock>
 80095fa:	f026 0607 	bic.w	r6, r6, #7
 80095fe:	1d23      	adds	r3, r4, #4
 8009600:	1af2      	subs	r2, r6, r3
 8009602:	d0ae      	beq.n	8009562 <_malloc_r+0x22>
 8009604:	1b9b      	subs	r3, r3, r6
 8009606:	50a3      	str	r3, [r4, r2]
 8009608:	e7ab      	b.n	8009562 <_malloc_r+0x22>
 800960a:	42a3      	cmp	r3, r4
 800960c:	6862      	ldr	r2, [r4, #4]
 800960e:	d1dd      	bne.n	80095cc <_malloc_r+0x8c>
 8009610:	f8c8 2000 	str.w	r2, [r8]
 8009614:	e7ec      	b.n	80095f0 <_malloc_r+0xb0>
 8009616:	4623      	mov	r3, r4
 8009618:	6864      	ldr	r4, [r4, #4]
 800961a:	e7ac      	b.n	8009576 <_malloc_r+0x36>
 800961c:	4634      	mov	r4, r6
 800961e:	6876      	ldr	r6, [r6, #4]
 8009620:	e7b4      	b.n	800958c <_malloc_r+0x4c>
 8009622:	4613      	mov	r3, r2
 8009624:	e7cc      	b.n	80095c0 <_malloc_r+0x80>
 8009626:	230c      	movs	r3, #12
 8009628:	4638      	mov	r0, r7
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	f000 f80e 	bl	800964c <__malloc_unlock>
 8009630:	e797      	b.n	8009562 <_malloc_r+0x22>
 8009632:	6025      	str	r5, [r4, #0]
 8009634:	e7dc      	b.n	80095f0 <_malloc_r+0xb0>
 8009636:	605b      	str	r3, [r3, #4]
 8009638:	deff      	udf	#255	; 0xff
 800963a:	bf00      	nop
 800963c:	20002a40 	.word	0x20002a40

08009640 <__malloc_lock>:
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <__malloc_lock+0x8>)
 8009642:	f7ff bed7 	b.w	80093f4 <__retarget_lock_acquire_recursive>
 8009646:	bf00      	nop
 8009648:	20002a3c 	.word	0x20002a3c

0800964c <__malloc_unlock>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__malloc_unlock+0x8>)
 800964e:	f7ff bed2 	b.w	80093f6 <__retarget_lock_release_recursive>
 8009652:	bf00      	nop
 8009654:	20002a3c 	.word	0x20002a3c

08009658 <__ssputs_r>:
 8009658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965c:	461f      	mov	r7, r3
 800965e:	688e      	ldr	r6, [r1, #8]
 8009660:	4682      	mov	sl, r0
 8009662:	42be      	cmp	r6, r7
 8009664:	460c      	mov	r4, r1
 8009666:	4690      	mov	r8, r2
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	d82c      	bhi.n	80096c6 <__ssputs_r+0x6e>
 800966c:	898a      	ldrh	r2, [r1, #12]
 800966e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009672:	d026      	beq.n	80096c2 <__ssputs_r+0x6a>
 8009674:	6965      	ldr	r5, [r4, #20]
 8009676:	6909      	ldr	r1, [r1, #16]
 8009678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800967c:	eba3 0901 	sub.w	r9, r3, r1
 8009680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009684:	1c7b      	adds	r3, r7, #1
 8009686:	444b      	add	r3, r9
 8009688:	106d      	asrs	r5, r5, #1
 800968a:	429d      	cmp	r5, r3
 800968c:	bf38      	it	cc
 800968e:	461d      	movcc	r5, r3
 8009690:	0553      	lsls	r3, r2, #21
 8009692:	d527      	bpl.n	80096e4 <__ssputs_r+0x8c>
 8009694:	4629      	mov	r1, r5
 8009696:	f7ff ff53 	bl	8009540 <_malloc_r>
 800969a:	4606      	mov	r6, r0
 800969c:	b360      	cbz	r0, 80096f8 <__ssputs_r+0xa0>
 800969e:	464a      	mov	r2, r9
 80096a0:	6921      	ldr	r1, [r4, #16]
 80096a2:	f7ff feb1 	bl	8009408 <memcpy>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	6126      	str	r6, [r4, #16]
 80096b4:	444e      	add	r6, r9
 80096b6:	6026      	str	r6, [r4, #0]
 80096b8:	463e      	mov	r6, r7
 80096ba:	6165      	str	r5, [r4, #20]
 80096bc:	eba5 0509 	sub.w	r5, r5, r9
 80096c0:	60a5      	str	r5, [r4, #8]
 80096c2:	42be      	cmp	r6, r7
 80096c4:	d900      	bls.n	80096c8 <__ssputs_r+0x70>
 80096c6:	463e      	mov	r6, r7
 80096c8:	4632      	mov	r2, r6
 80096ca:	4641      	mov	r1, r8
 80096cc:	6820      	ldr	r0, [r4, #0]
 80096ce:	f000 fefa 	bl	800a4c6 <memmove>
 80096d2:	2000      	movs	r0, #0
 80096d4:	68a3      	ldr	r3, [r4, #8]
 80096d6:	1b9b      	subs	r3, r3, r6
 80096d8:	60a3      	str	r3, [r4, #8]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	4433      	add	r3, r6
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e4:	462a      	mov	r2, r5
 80096e6:	f000 ff2e 	bl	800a546 <_realloc_r>
 80096ea:	4606      	mov	r6, r0
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1e0      	bne.n	80096b2 <__ssputs_r+0x5a>
 80096f0:	4650      	mov	r0, sl
 80096f2:	6921      	ldr	r1, [r4, #16]
 80096f4:	f7ff feb4 	bl	8009460 <_free_r>
 80096f8:	230c      	movs	r3, #12
 80096fa:	f8ca 3000 	str.w	r3, [sl]
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	e7e9      	b.n	80096e0 <__ssputs_r+0x88>

0800970c <_svfiprintf_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	4698      	mov	r8, r3
 8009712:	898b      	ldrh	r3, [r1, #12]
 8009714:	4607      	mov	r7, r0
 8009716:	061b      	lsls	r3, r3, #24
 8009718:	460d      	mov	r5, r1
 800971a:	4614      	mov	r4, r2
 800971c:	b09d      	sub	sp, #116	; 0x74
 800971e:	d50e      	bpl.n	800973e <_svfiprintf_r+0x32>
 8009720:	690b      	ldr	r3, [r1, #16]
 8009722:	b963      	cbnz	r3, 800973e <_svfiprintf_r+0x32>
 8009724:	2140      	movs	r1, #64	; 0x40
 8009726:	f7ff ff0b 	bl	8009540 <_malloc_r>
 800972a:	6028      	str	r0, [r5, #0]
 800972c:	6128      	str	r0, [r5, #16]
 800972e:	b920      	cbnz	r0, 800973a <_svfiprintf_r+0x2e>
 8009730:	230c      	movs	r3, #12
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	f04f 30ff 	mov.w	r0, #4294967295
 8009738:	e0d0      	b.n	80098dc <_svfiprintf_r+0x1d0>
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	616b      	str	r3, [r5, #20]
 800973e:	2300      	movs	r3, #0
 8009740:	9309      	str	r3, [sp, #36]	; 0x24
 8009742:	2320      	movs	r3, #32
 8009744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009748:	2330      	movs	r3, #48	; 0x30
 800974a:	f04f 0901 	mov.w	r9, #1
 800974e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009752:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80098f4 <_svfiprintf_r+0x1e8>
 8009756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800975a:	4623      	mov	r3, r4
 800975c:	469a      	mov	sl, r3
 800975e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009762:	b10a      	cbz	r2, 8009768 <_svfiprintf_r+0x5c>
 8009764:	2a25      	cmp	r2, #37	; 0x25
 8009766:	d1f9      	bne.n	800975c <_svfiprintf_r+0x50>
 8009768:	ebba 0b04 	subs.w	fp, sl, r4
 800976c:	d00b      	beq.n	8009786 <_svfiprintf_r+0x7a>
 800976e:	465b      	mov	r3, fp
 8009770:	4622      	mov	r2, r4
 8009772:	4629      	mov	r1, r5
 8009774:	4638      	mov	r0, r7
 8009776:	f7ff ff6f 	bl	8009658 <__ssputs_r>
 800977a:	3001      	adds	r0, #1
 800977c:	f000 80a9 	beq.w	80098d2 <_svfiprintf_r+0x1c6>
 8009780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009782:	445a      	add	r2, fp
 8009784:	9209      	str	r2, [sp, #36]	; 0x24
 8009786:	f89a 3000 	ldrb.w	r3, [sl]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 80a1 	beq.w	80098d2 <_svfiprintf_r+0x1c6>
 8009790:	2300      	movs	r3, #0
 8009792:	f04f 32ff 	mov.w	r2, #4294967295
 8009796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800979a:	f10a 0a01 	add.w	sl, sl, #1
 800979e:	9304      	str	r3, [sp, #16]
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a6:	931a      	str	r3, [sp, #104]	; 0x68
 80097a8:	4654      	mov	r4, sl
 80097aa:	2205      	movs	r2, #5
 80097ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b0:	4850      	ldr	r0, [pc, #320]	; (80098f4 <_svfiprintf_r+0x1e8>)
 80097b2:	f000 feb3 	bl	800a51c <memchr>
 80097b6:	9a04      	ldr	r2, [sp, #16]
 80097b8:	b9d8      	cbnz	r0, 80097f2 <_svfiprintf_r+0xe6>
 80097ba:	06d0      	lsls	r0, r2, #27
 80097bc:	bf44      	itt	mi
 80097be:	2320      	movmi	r3, #32
 80097c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c4:	0711      	lsls	r1, r2, #28
 80097c6:	bf44      	itt	mi
 80097c8:	232b      	movmi	r3, #43	; 0x2b
 80097ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ce:	f89a 3000 	ldrb.w	r3, [sl]
 80097d2:	2b2a      	cmp	r3, #42	; 0x2a
 80097d4:	d015      	beq.n	8009802 <_svfiprintf_r+0xf6>
 80097d6:	4654      	mov	r4, sl
 80097d8:	2000      	movs	r0, #0
 80097da:	f04f 0c0a 	mov.w	ip, #10
 80097de:	9a07      	ldr	r2, [sp, #28]
 80097e0:	4621      	mov	r1, r4
 80097e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e6:	3b30      	subs	r3, #48	; 0x30
 80097e8:	2b09      	cmp	r3, #9
 80097ea:	d94d      	bls.n	8009888 <_svfiprintf_r+0x17c>
 80097ec:	b1b0      	cbz	r0, 800981c <_svfiprintf_r+0x110>
 80097ee:	9207      	str	r2, [sp, #28]
 80097f0:	e014      	b.n	800981c <_svfiprintf_r+0x110>
 80097f2:	eba0 0308 	sub.w	r3, r0, r8
 80097f6:	fa09 f303 	lsl.w	r3, r9, r3
 80097fa:	4313      	orrs	r3, r2
 80097fc:	46a2      	mov	sl, r4
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	e7d2      	b.n	80097a8 <_svfiprintf_r+0x9c>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	1d19      	adds	r1, r3, #4
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	9103      	str	r1, [sp, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	bfbb      	ittet	lt
 800980e:	425b      	neglt	r3, r3
 8009810:	f042 0202 	orrlt.w	r2, r2, #2
 8009814:	9307      	strge	r3, [sp, #28]
 8009816:	9307      	strlt	r3, [sp, #28]
 8009818:	bfb8      	it	lt
 800981a:	9204      	strlt	r2, [sp, #16]
 800981c:	7823      	ldrb	r3, [r4, #0]
 800981e:	2b2e      	cmp	r3, #46	; 0x2e
 8009820:	d10c      	bne.n	800983c <_svfiprintf_r+0x130>
 8009822:	7863      	ldrb	r3, [r4, #1]
 8009824:	2b2a      	cmp	r3, #42	; 0x2a
 8009826:	d134      	bne.n	8009892 <_svfiprintf_r+0x186>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	3402      	adds	r4, #2
 800982c:	1d1a      	adds	r2, r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	9203      	str	r2, [sp, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfb8      	it	lt
 8009836:	f04f 33ff 	movlt.w	r3, #4294967295
 800983a:	9305      	str	r3, [sp, #20]
 800983c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80098f8 <_svfiprintf_r+0x1ec>
 8009840:	2203      	movs	r2, #3
 8009842:	4650      	mov	r0, sl
 8009844:	7821      	ldrb	r1, [r4, #0]
 8009846:	f000 fe69 	bl	800a51c <memchr>
 800984a:	b138      	cbz	r0, 800985c <_svfiprintf_r+0x150>
 800984c:	2240      	movs	r2, #64	; 0x40
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	eba0 000a 	sub.w	r0, r0, sl
 8009854:	4082      	lsls	r2, r0
 8009856:	4313      	orrs	r3, r2
 8009858:	3401      	adds	r4, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	2206      	movs	r2, #6
 8009862:	4826      	ldr	r0, [pc, #152]	; (80098fc <_svfiprintf_r+0x1f0>)
 8009864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009868:	f000 fe58 	bl	800a51c <memchr>
 800986c:	2800      	cmp	r0, #0
 800986e:	d038      	beq.n	80098e2 <_svfiprintf_r+0x1d6>
 8009870:	4b23      	ldr	r3, [pc, #140]	; (8009900 <_svfiprintf_r+0x1f4>)
 8009872:	bb1b      	cbnz	r3, 80098bc <_svfiprintf_r+0x1b0>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	3307      	adds	r3, #7
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	3308      	adds	r3, #8
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	4433      	add	r3, r6
 8009884:	9309      	str	r3, [sp, #36]	; 0x24
 8009886:	e768      	b.n	800975a <_svfiprintf_r+0x4e>
 8009888:	460c      	mov	r4, r1
 800988a:	2001      	movs	r0, #1
 800988c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009890:	e7a6      	b.n	80097e0 <_svfiprintf_r+0xd4>
 8009892:	2300      	movs	r3, #0
 8009894:	f04f 0c0a 	mov.w	ip, #10
 8009898:	4619      	mov	r1, r3
 800989a:	3401      	adds	r4, #1
 800989c:	9305      	str	r3, [sp, #20]
 800989e:	4620      	mov	r0, r4
 80098a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a4:	3a30      	subs	r2, #48	; 0x30
 80098a6:	2a09      	cmp	r2, #9
 80098a8:	d903      	bls.n	80098b2 <_svfiprintf_r+0x1a6>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c6      	beq.n	800983c <_svfiprintf_r+0x130>
 80098ae:	9105      	str	r1, [sp, #20]
 80098b0:	e7c4      	b.n	800983c <_svfiprintf_r+0x130>
 80098b2:	4604      	mov	r4, r0
 80098b4:	2301      	movs	r3, #1
 80098b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ba:	e7f0      	b.n	800989e <_svfiprintf_r+0x192>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4638      	mov	r0, r7
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <_svfiprintf_r+0x1f8>)
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	f3af 8000 	nop.w
 80098cc:	1c42      	adds	r2, r0, #1
 80098ce:	4606      	mov	r6, r0
 80098d0:	d1d6      	bne.n	8009880 <_svfiprintf_r+0x174>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	065b      	lsls	r3, r3, #25
 80098d6:	f53f af2d 	bmi.w	8009734 <_svfiprintf_r+0x28>
 80098da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098dc:	b01d      	add	sp, #116	; 0x74
 80098de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e2:	ab03      	add	r3, sp, #12
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	462a      	mov	r2, r5
 80098e8:	4638      	mov	r0, r7
 80098ea:	4b06      	ldr	r3, [pc, #24]	; (8009904 <_svfiprintf_r+0x1f8>)
 80098ec:	a904      	add	r1, sp, #16
 80098ee:	f000 fa4f 	bl	8009d90 <_printf_i>
 80098f2:	e7eb      	b.n	80098cc <_svfiprintf_r+0x1c0>
 80098f4:	0800c9a3 	.word	0x0800c9a3
 80098f8:	0800c9a9 	.word	0x0800c9a9
 80098fc:	0800c9ad 	.word	0x0800c9ad
 8009900:	00000000 	.word	0x00000000
 8009904:	08009659 	.word	0x08009659

08009908 <_sungetc_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	1c4b      	adds	r3, r1, #1
 800990c:	4614      	mov	r4, r2
 800990e:	d103      	bne.n	8009918 <_sungetc_r+0x10>
 8009910:	f04f 35ff 	mov.w	r5, #4294967295
 8009914:	4628      	mov	r0, r5
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	8993      	ldrh	r3, [r2, #12]
 800991a:	b2cd      	uxtb	r5, r1
 800991c:	f023 0320 	bic.w	r3, r3, #32
 8009920:	8193      	strh	r3, [r2, #12]
 8009922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009924:	6852      	ldr	r2, [r2, #4]
 8009926:	b18b      	cbz	r3, 800994c <_sungetc_r+0x44>
 8009928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800992a:	4293      	cmp	r3, r2
 800992c:	dd08      	ble.n	8009940 <_sungetc_r+0x38>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	6022      	str	r2, [r4, #0]
 8009934:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	3301      	adds	r3, #1
 800993c:	6063      	str	r3, [r4, #4]
 800993e:	e7e9      	b.n	8009914 <_sungetc_r+0xc>
 8009940:	4621      	mov	r1, r4
 8009942:	f000 fd88 	bl	800a456 <__submore>
 8009946:	2800      	cmp	r0, #0
 8009948:	d0f1      	beq.n	800992e <_sungetc_r+0x26>
 800994a:	e7e1      	b.n	8009910 <_sungetc_r+0x8>
 800994c:	6921      	ldr	r1, [r4, #16]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	b151      	cbz	r1, 8009968 <_sungetc_r+0x60>
 8009952:	4299      	cmp	r1, r3
 8009954:	d208      	bcs.n	8009968 <_sungetc_r+0x60>
 8009956:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800995a:	42a9      	cmp	r1, r5
 800995c:	d104      	bne.n	8009968 <_sungetc_r+0x60>
 800995e:	3b01      	subs	r3, #1
 8009960:	3201      	adds	r2, #1
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	6062      	str	r2, [r4, #4]
 8009966:	e7d5      	b.n	8009914 <_sungetc_r+0xc>
 8009968:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800996c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009970:	6363      	str	r3, [r4, #52]	; 0x34
 8009972:	2303      	movs	r3, #3
 8009974:	63a3      	str	r3, [r4, #56]	; 0x38
 8009976:	4623      	mov	r3, r4
 8009978:	f803 5f46 	strb.w	r5, [r3, #70]!
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	2301      	movs	r3, #1
 8009980:	e7dc      	b.n	800993c <_sungetc_r+0x34>

08009982 <__ssrefill_r>:
 8009982:	b510      	push	{r4, lr}
 8009984:	460c      	mov	r4, r1
 8009986:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009988:	b169      	cbz	r1, 80099a6 <__ssrefill_r+0x24>
 800998a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800998e:	4299      	cmp	r1, r3
 8009990:	d001      	beq.n	8009996 <__ssrefill_r+0x14>
 8009992:	f7ff fd65 	bl	8009460 <_free_r>
 8009996:	2000      	movs	r0, #0
 8009998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800999a:	6360      	str	r0, [r4, #52]	; 0x34
 800999c:	6063      	str	r3, [r4, #4]
 800999e:	b113      	cbz	r3, 80099a6 <__ssrefill_r+0x24>
 80099a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	2300      	movs	r3, #0
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0320 	orr.w	r3, r3, #32
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	e7f3      	b.n	80099a4 <__ssrefill_r+0x22>

080099bc <__ssvfiscanf_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	460c      	mov	r4, r1
 80099c2:	2100      	movs	r1, #0
 80099c4:	4606      	mov	r6, r0
 80099c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80099ca:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80099ce:	49a6      	ldr	r1, [pc, #664]	; (8009c68 <__ssvfiscanf_r+0x2ac>)
 80099d0:	f10d 0804 	add.w	r8, sp, #4
 80099d4:	91a0      	str	r1, [sp, #640]	; 0x280
 80099d6:	49a5      	ldr	r1, [pc, #660]	; (8009c6c <__ssvfiscanf_r+0x2b0>)
 80099d8:	4fa5      	ldr	r7, [pc, #660]	; (8009c70 <__ssvfiscanf_r+0x2b4>)
 80099da:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009c74 <__ssvfiscanf_r+0x2b8>
 80099de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80099e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 815a 	beq.w	8009ca2 <__ssvfiscanf_r+0x2e6>
 80099ee:	5cf9      	ldrb	r1, [r7, r3]
 80099f0:	1c55      	adds	r5, r2, #1
 80099f2:	f011 0108 	ands.w	r1, r1, #8
 80099f6:	d019      	beq.n	8009a2c <__ssvfiscanf_r+0x70>
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dd0f      	ble.n	8009a1e <__ssvfiscanf_r+0x62>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	5cba      	ldrb	r2, [r7, r2]
 8009a04:	0712      	lsls	r2, r2, #28
 8009a06:	d401      	bmi.n	8009a0c <__ssvfiscanf_r+0x50>
 8009a08:	462a      	mov	r2, r5
 8009a0a:	e7ec      	b.n	80099e6 <__ssvfiscanf_r+0x2a>
 8009a0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a0e:	3301      	adds	r3, #1
 8009a10:	3201      	adds	r2, #1
 8009a12:	9245      	str	r2, [sp, #276]	; 0x114
 8009a14:	6862      	ldr	r2, [r4, #4]
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	3a01      	subs	r2, #1
 8009a1a:	6062      	str	r2, [r4, #4]
 8009a1c:	e7ec      	b.n	80099f8 <__ssvfiscanf_r+0x3c>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4630      	mov	r0, r6
 8009a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a24:	4798      	blx	r3
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0e9      	beq.n	80099fe <__ssvfiscanf_r+0x42>
 8009a2a:	e7ed      	b.n	8009a08 <__ssvfiscanf_r+0x4c>
 8009a2c:	2b25      	cmp	r3, #37	; 0x25
 8009a2e:	d012      	beq.n	8009a56 <__ssvfiscanf_r+0x9a>
 8009a30:	469a      	mov	sl, r3
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f340 8092 	ble.w	8009b5e <__ssvfiscanf_r+0x1a2>
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	7813      	ldrb	r3, [r2, #0]
 8009a3e:	4553      	cmp	r3, sl
 8009a40:	f040 812f 	bne.w	8009ca2 <__ssvfiscanf_r+0x2e6>
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	3201      	adds	r2, #1
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	6063      	str	r3, [r4, #4]
 8009a4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	9345      	str	r3, [sp, #276]	; 0x114
 8009a54:	e7d8      	b.n	8009a08 <__ssvfiscanf_r+0x4c>
 8009a56:	9141      	str	r1, [sp, #260]	; 0x104
 8009a58:	9143      	str	r1, [sp, #268]	; 0x10c
 8009a5a:	7853      	ldrb	r3, [r2, #1]
 8009a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5e:	bf04      	itt	eq
 8009a60:	2310      	moveq	r3, #16
 8009a62:	1c95      	addeq	r5, r2, #2
 8009a64:	f04f 020a 	mov.w	r2, #10
 8009a68:	bf08      	it	eq
 8009a6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8009a6c:	46aa      	mov	sl, r5
 8009a6e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009a72:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d91c      	bls.n	8009ab4 <__ssvfiscanf_r+0xf8>
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	487d      	ldr	r0, [pc, #500]	; (8009c74 <__ssvfiscanf_r+0x2b8>)
 8009a7e:	f000 fd4d 	bl	800a51c <memchr>
 8009a82:	b138      	cbz	r0, 8009a94 <__ssvfiscanf_r+0xd8>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4655      	mov	r5, sl
 8009a88:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a8a:	eba0 0009 	sub.w	r0, r0, r9
 8009a8e:	4083      	lsls	r3, r0
 8009a90:	4313      	orrs	r3, r2
 8009a92:	9341      	str	r3, [sp, #260]	; 0x104
 8009a94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a98:	2b78      	cmp	r3, #120	; 0x78
 8009a9a:	d806      	bhi.n	8009aaa <__ssvfiscanf_r+0xee>
 8009a9c:	2b57      	cmp	r3, #87	; 0x57
 8009a9e:	d810      	bhi.n	8009ac2 <__ssvfiscanf_r+0x106>
 8009aa0:	2b25      	cmp	r3, #37	; 0x25
 8009aa2:	d0c5      	beq.n	8009a30 <__ssvfiscanf_r+0x74>
 8009aa4:	d856      	bhi.n	8009b54 <__ssvfiscanf_r+0x198>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d064      	beq.n	8009b74 <__ssvfiscanf_r+0x1b8>
 8009aaa:	2303      	movs	r3, #3
 8009aac:	9347      	str	r3, [sp, #284]	; 0x11c
 8009aae:	230a      	movs	r3, #10
 8009ab0:	9342      	str	r3, [sp, #264]	; 0x108
 8009ab2:	e075      	b.n	8009ba0 <__ssvfiscanf_r+0x1e4>
 8009ab4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009ab6:	4655      	mov	r5, sl
 8009ab8:	fb02 1103 	mla	r1, r2, r3, r1
 8009abc:	3930      	subs	r1, #48	; 0x30
 8009abe:	9143      	str	r1, [sp, #268]	; 0x10c
 8009ac0:	e7d4      	b.n	8009a6c <__ssvfiscanf_r+0xb0>
 8009ac2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009ac6:	2a20      	cmp	r2, #32
 8009ac8:	d8ef      	bhi.n	8009aaa <__ssvfiscanf_r+0xee>
 8009aca:	a101      	add	r1, pc, #4	; (adr r1, 8009ad0 <__ssvfiscanf_r+0x114>)
 8009acc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ad0:	08009b83 	.word	0x08009b83
 8009ad4:	08009aab 	.word	0x08009aab
 8009ad8:	08009aab 	.word	0x08009aab
 8009adc:	08009be1 	.word	0x08009be1
 8009ae0:	08009aab 	.word	0x08009aab
 8009ae4:	08009aab 	.word	0x08009aab
 8009ae8:	08009aab 	.word	0x08009aab
 8009aec:	08009aab 	.word	0x08009aab
 8009af0:	08009aab 	.word	0x08009aab
 8009af4:	08009aab 	.word	0x08009aab
 8009af8:	08009aab 	.word	0x08009aab
 8009afc:	08009bf7 	.word	0x08009bf7
 8009b00:	08009bdd 	.word	0x08009bdd
 8009b04:	08009b5b 	.word	0x08009b5b
 8009b08:	08009b5b 	.word	0x08009b5b
 8009b0c:	08009b5b 	.word	0x08009b5b
 8009b10:	08009aab 	.word	0x08009aab
 8009b14:	08009b99 	.word	0x08009b99
 8009b18:	08009aab 	.word	0x08009aab
 8009b1c:	08009aab 	.word	0x08009aab
 8009b20:	08009aab 	.word	0x08009aab
 8009b24:	08009aab 	.word	0x08009aab
 8009b28:	08009c07 	.word	0x08009c07
 8009b2c:	08009bd5 	.word	0x08009bd5
 8009b30:	08009b7b 	.word	0x08009b7b
 8009b34:	08009aab 	.word	0x08009aab
 8009b38:	08009aab 	.word	0x08009aab
 8009b3c:	08009c03 	.word	0x08009c03
 8009b40:	08009aab 	.word	0x08009aab
 8009b44:	08009bdd 	.word	0x08009bdd
 8009b48:	08009aab 	.word	0x08009aab
 8009b4c:	08009aab 	.word	0x08009aab
 8009b50:	08009b83 	.word	0x08009b83
 8009b54:	3b45      	subs	r3, #69	; 0x45
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d8a7      	bhi.n	8009aaa <__ssvfiscanf_r+0xee>
 8009b5a:	2305      	movs	r3, #5
 8009b5c:	e01f      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4630      	mov	r0, r6
 8009b62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b64:	4798      	blx	r3
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f af67 	beq.w	8009a3a <__ssvfiscanf_r+0x7e>
 8009b6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f040 808d 	bne.w	8009c8e <__ssvfiscanf_r+0x2d2>
 8009b74:	f04f 30ff 	mov.w	r0, #4294967295
 8009b78:	e08f      	b.n	8009c9a <__ssvfiscanf_r+0x2de>
 8009b7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b7c:	f042 0220 	orr.w	r2, r2, #32
 8009b80:	9241      	str	r2, [sp, #260]	; 0x104
 8009b82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b88:	9241      	str	r2, [sp, #260]	; 0x104
 8009b8a:	2210      	movs	r2, #16
 8009b8c:	2b6f      	cmp	r3, #111	; 0x6f
 8009b8e:	bf34      	ite	cc
 8009b90:	2303      	movcc	r3, #3
 8009b92:	2304      	movcs	r3, #4
 8009b94:	9242      	str	r2, [sp, #264]	; 0x108
 8009b96:	e002      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9342      	str	r3, [sp, #264]	; 0x108
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dd3d      	ble.n	8009c22 <__ssvfiscanf_r+0x266>
 8009ba6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ba8:	0659      	lsls	r1, r3, #25
 8009baa:	d404      	bmi.n	8009bb6 <__ssvfiscanf_r+0x1fa>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	5cba      	ldrb	r2, [r7, r2]
 8009bb2:	0712      	lsls	r2, r2, #28
 8009bb4:	d43c      	bmi.n	8009c30 <__ssvfiscanf_r+0x274>
 8009bb6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	dc4b      	bgt.n	8009c54 <__ssvfiscanf_r+0x298>
 8009bbc:	466b      	mov	r3, sp
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	a941      	add	r1, sp, #260	; 0x104
 8009bc4:	f000 fa06 	bl	8009fd4 <_scanf_chars>
 8009bc8:	2801      	cmp	r0, #1
 8009bca:	d06a      	beq.n	8009ca2 <__ssvfiscanf_r+0x2e6>
 8009bcc:	2802      	cmp	r0, #2
 8009bce:	f47f af1b 	bne.w	8009a08 <__ssvfiscanf_r+0x4c>
 8009bd2:	e7cb      	b.n	8009b6c <__ssvfiscanf_r+0x1b0>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	9342      	str	r3, [sp, #264]	; 0x108
 8009bd8:	2304      	movs	r3, #4
 8009bda:	e7e0      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009bdc:	220a      	movs	r2, #10
 8009bde:	e7d5      	b.n	8009b8c <__ssvfiscanf_r+0x1d0>
 8009be0:	4629      	mov	r1, r5
 8009be2:	4640      	mov	r0, r8
 8009be4:	f000 fbfe 	bl	800a3e4 <__sccl>
 8009be8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009bea:	4605      	mov	r5, r0
 8009bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf0:	9341      	str	r3, [sp, #260]	; 0x104
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e7d3      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009bf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfc:	9341      	str	r3, [sp, #260]	; 0x104
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e7cd      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e7cb      	b.n	8009b9e <__ssvfiscanf_r+0x1e2>
 8009c06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009c08:	06c3      	lsls	r3, r0, #27
 8009c0a:	f53f aefd 	bmi.w	8009a08 <__ssvfiscanf_r+0x4c>
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c12:	1d19      	adds	r1, r3, #4
 8009c14:	9100      	str	r1, [sp, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	07c0      	lsls	r0, r0, #31
 8009c1a:	bf4c      	ite	mi
 8009c1c:	801a      	strhmi	r2, [r3, #0]
 8009c1e:	601a      	strpl	r2, [r3, #0]
 8009c20:	e6f2      	b.n	8009a08 <__ssvfiscanf_r+0x4c>
 8009c22:	4621      	mov	r1, r4
 8009c24:	4630      	mov	r0, r6
 8009c26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c28:	4798      	blx	r3
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0bb      	beq.n	8009ba6 <__ssvfiscanf_r+0x1ea>
 8009c2e:	e79d      	b.n	8009b6c <__ssvfiscanf_r+0x1b0>
 8009c30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c32:	3201      	adds	r2, #1
 8009c34:	9245      	str	r2, [sp, #276]	; 0x114
 8009c36:	6862      	ldr	r2, [r4, #4]
 8009c38:	3a01      	subs	r2, #1
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	6062      	str	r2, [r4, #4]
 8009c3e:	dd02      	ble.n	8009c46 <__ssvfiscanf_r+0x28a>
 8009c40:	3301      	adds	r3, #1
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	e7b2      	b.n	8009bac <__ssvfiscanf_r+0x1f0>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c4c:	4798      	blx	r3
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d0ac      	beq.n	8009bac <__ssvfiscanf_r+0x1f0>
 8009c52:	e78b      	b.n	8009b6c <__ssvfiscanf_r+0x1b0>
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	dc0f      	bgt.n	8009c78 <__ssvfiscanf_r+0x2bc>
 8009c58:	466b      	mov	r3, sp
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	a941      	add	r1, sp, #260	; 0x104
 8009c60:	f000 fa12 	bl	800a088 <_scanf_i>
 8009c64:	e7b0      	b.n	8009bc8 <__ssvfiscanf_r+0x20c>
 8009c66:	bf00      	nop
 8009c68:	08009909 	.word	0x08009909
 8009c6c:	08009983 	.word	0x08009983
 8009c70:	0800c9f2 	.word	0x0800c9f2
 8009c74:	0800c9a9 	.word	0x0800c9a9
 8009c78:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <__ssvfiscanf_r+0x2ec>)
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f43f aec4 	beq.w	8009a08 <__ssvfiscanf_r+0x4c>
 8009c80:	466b      	mov	r3, sp
 8009c82:	4622      	mov	r2, r4
 8009c84:	4630      	mov	r0, r6
 8009c86:	a941      	add	r1, sp, #260	; 0x104
 8009c88:	f3af 8000 	nop.w
 8009c8c:	e79c      	b.n	8009bc8 <__ssvfiscanf_r+0x20c>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009c94:	bf18      	it	ne
 8009c96:	f04f 30ff 	movne.w	r0, #4294967295
 8009c9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ca4:	e7f9      	b.n	8009c9a <__ssvfiscanf_r+0x2de>
 8009ca6:	bf00      	nop
 8009ca8:	00000000 	.word	0x00000000

08009cac <_printf_common>:
 8009cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	4616      	mov	r6, r2
 8009cb2:	4699      	mov	r9, r3
 8009cb4:	688a      	ldr	r2, [r1, #8]
 8009cb6:	690b      	ldr	r3, [r1, #16]
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	bfb8      	it	lt
 8009cbe:	4613      	movlt	r3, r2
 8009cc0:	6033      	str	r3, [r6, #0]
 8009cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ccc:	b10a      	cbz	r2, 8009cd2 <_printf_common+0x26>
 8009cce:	3301      	adds	r3, #1
 8009cd0:	6033      	str	r3, [r6, #0]
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	0699      	lsls	r1, r3, #26
 8009cd6:	bf42      	ittt	mi
 8009cd8:	6833      	ldrmi	r3, [r6, #0]
 8009cda:	3302      	addmi	r3, #2
 8009cdc:	6033      	strmi	r3, [r6, #0]
 8009cde:	6825      	ldr	r5, [r4, #0]
 8009ce0:	f015 0506 	ands.w	r5, r5, #6
 8009ce4:	d106      	bne.n	8009cf4 <_printf_common+0x48>
 8009ce6:	f104 0a19 	add.w	sl, r4, #25
 8009cea:	68e3      	ldr	r3, [r4, #12]
 8009cec:	6832      	ldr	r2, [r6, #0]
 8009cee:	1a9b      	subs	r3, r3, r2
 8009cf0:	42ab      	cmp	r3, r5
 8009cf2:	dc2b      	bgt.n	8009d4c <_printf_common+0xa0>
 8009cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cf8:	1e13      	subs	r3, r2, #0
 8009cfa:	6822      	ldr	r2, [r4, #0]
 8009cfc:	bf18      	it	ne
 8009cfe:	2301      	movne	r3, #1
 8009d00:	0692      	lsls	r2, r2, #26
 8009d02:	d430      	bmi.n	8009d66 <_printf_common+0xba>
 8009d04:	4649      	mov	r1, r9
 8009d06:	4638      	mov	r0, r7
 8009d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d0c:	47c0      	blx	r8
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d023      	beq.n	8009d5a <_printf_common+0xae>
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	f003 0306 	and.w	r3, r3, #6
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	bf14      	ite	ne
 8009d1e:	2500      	movne	r5, #0
 8009d20:	6833      	ldreq	r3, [r6, #0]
 8009d22:	f04f 0600 	mov.w	r6, #0
 8009d26:	bf08      	it	eq
 8009d28:	68e5      	ldreq	r5, [r4, #12]
 8009d2a:	f104 041a 	add.w	r4, r4, #26
 8009d2e:	bf08      	it	eq
 8009d30:	1aed      	subeq	r5, r5, r3
 8009d32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d36:	bf08      	it	eq
 8009d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	bfc4      	itt	gt
 8009d40:	1a9b      	subgt	r3, r3, r2
 8009d42:	18ed      	addgt	r5, r5, r3
 8009d44:	42b5      	cmp	r5, r6
 8009d46:	d11a      	bne.n	8009d7e <_printf_common+0xd2>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e008      	b.n	8009d5e <_printf_common+0xb2>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4652      	mov	r2, sl
 8009d50:	4649      	mov	r1, r9
 8009d52:	4638      	mov	r0, r7
 8009d54:	47c0      	blx	r8
 8009d56:	3001      	adds	r0, #1
 8009d58:	d103      	bne.n	8009d62 <_printf_common+0xb6>
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	3501      	adds	r5, #1
 8009d64:	e7c1      	b.n	8009cea <_printf_common+0x3e>
 8009d66:	2030      	movs	r0, #48	; 0x30
 8009d68:	18e1      	adds	r1, r4, r3
 8009d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d74:	4422      	add	r2, r4
 8009d76:	3302      	adds	r3, #2
 8009d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d7c:	e7c2      	b.n	8009d04 <_printf_common+0x58>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4622      	mov	r2, r4
 8009d82:	4649      	mov	r1, r9
 8009d84:	4638      	mov	r0, r7
 8009d86:	47c0      	blx	r8
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d0e6      	beq.n	8009d5a <_printf_common+0xae>
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7d9      	b.n	8009d44 <_printf_common+0x98>

08009d90 <_printf_i>:
 8009d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	7e0f      	ldrb	r7, [r1, #24]
 8009d96:	4691      	mov	r9, r2
 8009d98:	2f78      	cmp	r7, #120	; 0x78
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	469a      	mov	sl, r3
 8009da0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009da6:	d807      	bhi.n	8009db8 <_printf_i+0x28>
 8009da8:	2f62      	cmp	r7, #98	; 0x62
 8009daa:	d80a      	bhi.n	8009dc2 <_printf_i+0x32>
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	f000 80d5 	beq.w	8009f5c <_printf_i+0x1cc>
 8009db2:	2f58      	cmp	r7, #88	; 0x58
 8009db4:	f000 80c1 	beq.w	8009f3a <_printf_i+0x1aa>
 8009db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dc0:	e03a      	b.n	8009e38 <_printf_i+0xa8>
 8009dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dc6:	2b15      	cmp	r3, #21
 8009dc8:	d8f6      	bhi.n	8009db8 <_printf_i+0x28>
 8009dca:	a101      	add	r1, pc, #4	; (adr r1, 8009dd0 <_printf_i+0x40>)
 8009dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	08009e3d 	.word	0x08009e3d
 8009dd8:	08009db9 	.word	0x08009db9
 8009ddc:	08009db9 	.word	0x08009db9
 8009de0:	08009db9 	.word	0x08009db9
 8009de4:	08009db9 	.word	0x08009db9
 8009de8:	08009e3d 	.word	0x08009e3d
 8009dec:	08009db9 	.word	0x08009db9
 8009df0:	08009db9 	.word	0x08009db9
 8009df4:	08009db9 	.word	0x08009db9
 8009df8:	08009db9 	.word	0x08009db9
 8009dfc:	08009f43 	.word	0x08009f43
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009efd 	.word	0x08009efd
 8009e08:	08009db9 	.word	0x08009db9
 8009e0c:	08009db9 	.word	0x08009db9
 8009e10:	08009f65 	.word	0x08009f65
 8009e14:	08009db9 	.word	0x08009db9
 8009e18:	08009e69 	.word	0x08009e69
 8009e1c:	08009db9 	.word	0x08009db9
 8009e20:	08009db9 	.word	0x08009db9
 8009e24:	08009f05 	.word	0x08009f05
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	1d1a      	adds	r2, r3, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	602a      	str	r2, [r5, #0]
 8009e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e0a0      	b.n	8009f7e <_printf_i+0x1ee>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	0607      	lsls	r7, r0, #24
 8009e42:	f103 0104 	add.w	r1, r3, #4
 8009e46:	6029      	str	r1, [r5, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0xbe>
 8009e4a:	681e      	ldr	r6, [r3, #0]
 8009e4c:	e003      	b.n	8009e56 <_printf_i+0xc6>
 8009e4e:	0646      	lsls	r6, r0, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0xba>
 8009e52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	da03      	bge.n	8009e62 <_printf_i+0xd2>
 8009e5a:	232d      	movs	r3, #45	; 0x2d
 8009e5c:	4276      	negs	r6, r6
 8009e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e62:	230a      	movs	r3, #10
 8009e64:	4859      	ldr	r0, [pc, #356]	; (8009fcc <_printf_i+0x23c>)
 8009e66:	e012      	b.n	8009e8e <_printf_i+0xfe>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	6029      	str	r1, [r5, #0]
 8009e70:	0605      	lsls	r5, r0, #24
 8009e72:	d501      	bpl.n	8009e78 <_printf_i+0xe8>
 8009e74:	681e      	ldr	r6, [r3, #0]
 8009e76:	e002      	b.n	8009e7e <_printf_i+0xee>
 8009e78:	0641      	lsls	r1, r0, #25
 8009e7a:	d5fb      	bpl.n	8009e74 <_printf_i+0xe4>
 8009e7c:	881e      	ldrh	r6, [r3, #0]
 8009e7e:	2f6f      	cmp	r7, #111	; 0x6f
 8009e80:	bf0c      	ite	eq
 8009e82:	2308      	moveq	r3, #8
 8009e84:	230a      	movne	r3, #10
 8009e86:	4851      	ldr	r0, [pc, #324]	; (8009fcc <_printf_i+0x23c>)
 8009e88:	2100      	movs	r1, #0
 8009e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e8e:	6865      	ldr	r5, [r4, #4]
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	bfa8      	it	ge
 8009e94:	6821      	ldrge	r1, [r4, #0]
 8009e96:	60a5      	str	r5, [r4, #8]
 8009e98:	bfa4      	itt	ge
 8009e9a:	f021 0104 	bicge.w	r1, r1, #4
 8009e9e:	6021      	strge	r1, [r4, #0]
 8009ea0:	b90e      	cbnz	r6, 8009ea6 <_printf_i+0x116>
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	d04b      	beq.n	8009f3e <_printf_i+0x1ae>
 8009ea6:	4615      	mov	r5, r2
 8009ea8:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eac:	fb03 6711 	mls	r7, r3, r1, r6
 8009eb0:	5dc7      	ldrb	r7, [r0, r7]
 8009eb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009eb6:	4637      	mov	r7, r6
 8009eb8:	42bb      	cmp	r3, r7
 8009eba:	460e      	mov	r6, r1
 8009ebc:	d9f4      	bls.n	8009ea8 <_printf_i+0x118>
 8009ebe:	2b08      	cmp	r3, #8
 8009ec0:	d10b      	bne.n	8009eda <_printf_i+0x14a>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	07de      	lsls	r6, r3, #31
 8009ec6:	d508      	bpl.n	8009eda <_printf_i+0x14a>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	6861      	ldr	r1, [r4, #4]
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	bfde      	ittt	le
 8009ed0:	2330      	movle	r3, #48	; 0x30
 8009ed2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ed6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009eda:	1b52      	subs	r2, r2, r5
 8009edc:	6122      	str	r2, [r4, #16]
 8009ede:	464b      	mov	r3, r9
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	f8cd a000 	str.w	sl, [sp]
 8009ee8:	aa03      	add	r2, sp, #12
 8009eea:	f7ff fedf 	bl	8009cac <_printf_common>
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d14a      	bne.n	8009f88 <_printf_i+0x1f8>
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef6:	b004      	add	sp, #16
 8009ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	f043 0320 	orr.w	r3, r3, #32
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	2778      	movs	r7, #120	; 0x78
 8009f06:	4832      	ldr	r0, [pc, #200]	; (8009fd0 <_printf_i+0x240>)
 8009f08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	6829      	ldr	r1, [r5, #0]
 8009f10:	061f      	lsls	r7, r3, #24
 8009f12:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f16:	d402      	bmi.n	8009f1e <_printf_i+0x18e>
 8009f18:	065f      	lsls	r7, r3, #25
 8009f1a:	bf48      	it	mi
 8009f1c:	b2b6      	uxthmi	r6, r6
 8009f1e:	07df      	lsls	r7, r3, #31
 8009f20:	bf48      	it	mi
 8009f22:	f043 0320 	orrmi.w	r3, r3, #32
 8009f26:	6029      	str	r1, [r5, #0]
 8009f28:	bf48      	it	mi
 8009f2a:	6023      	strmi	r3, [r4, #0]
 8009f2c:	b91e      	cbnz	r6, 8009f36 <_printf_i+0x1a6>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	f023 0320 	bic.w	r3, r3, #32
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	2310      	movs	r3, #16
 8009f38:	e7a6      	b.n	8009e88 <_printf_i+0xf8>
 8009f3a:	4824      	ldr	r0, [pc, #144]	; (8009fcc <_printf_i+0x23c>)
 8009f3c:	e7e4      	b.n	8009f08 <_printf_i+0x178>
 8009f3e:	4615      	mov	r5, r2
 8009f40:	e7bd      	b.n	8009ebe <_printf_i+0x12e>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	6826      	ldr	r6, [r4, #0]
 8009f46:	1d18      	adds	r0, r3, #4
 8009f48:	6961      	ldr	r1, [r4, #20]
 8009f4a:	6028      	str	r0, [r5, #0]
 8009f4c:	0635      	lsls	r5, r6, #24
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	d501      	bpl.n	8009f56 <_printf_i+0x1c6>
 8009f52:	6019      	str	r1, [r3, #0]
 8009f54:	e002      	b.n	8009f5c <_printf_i+0x1cc>
 8009f56:	0670      	lsls	r0, r6, #25
 8009f58:	d5fb      	bpl.n	8009f52 <_printf_i+0x1c2>
 8009f5a:	8019      	strh	r1, [r3, #0]
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4615      	mov	r5, r2
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	e7bc      	b.n	8009ede <_printf_i+0x14e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	2100      	movs	r1, #0
 8009f68:	1d1a      	adds	r2, r3, #4
 8009f6a:	602a      	str	r2, [r5, #0]
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	6862      	ldr	r2, [r4, #4]
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 fad3 	bl	800a51c <memchr>
 8009f76:	b108      	cbz	r0, 8009f7c <_printf_i+0x1ec>
 8009f78:	1b40      	subs	r0, r0, r5
 8009f7a:	6060      	str	r0, [r4, #4]
 8009f7c:	6863      	ldr	r3, [r4, #4]
 8009f7e:	6123      	str	r3, [r4, #16]
 8009f80:	2300      	movs	r3, #0
 8009f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f86:	e7aa      	b.n	8009ede <_printf_i+0x14e>
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	47d0      	blx	sl
 8009f92:	3001      	adds	r0, #1
 8009f94:	d0ad      	beq.n	8009ef2 <_printf_i+0x162>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	079b      	lsls	r3, r3, #30
 8009f9a:	d413      	bmi.n	8009fc4 <_printf_i+0x234>
 8009f9c:	68e0      	ldr	r0, [r4, #12]
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	4298      	cmp	r0, r3
 8009fa2:	bfb8      	it	lt
 8009fa4:	4618      	movlt	r0, r3
 8009fa6:	e7a6      	b.n	8009ef6 <_printf_i+0x166>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4632      	mov	r2, r6
 8009fac:	4649      	mov	r1, r9
 8009fae:	4640      	mov	r0, r8
 8009fb0:	47d0      	blx	sl
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d09d      	beq.n	8009ef2 <_printf_i+0x162>
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	68e3      	ldr	r3, [r4, #12]
 8009fba:	9903      	ldr	r1, [sp, #12]
 8009fbc:	1a5b      	subs	r3, r3, r1
 8009fbe:	42ab      	cmp	r3, r5
 8009fc0:	dcf2      	bgt.n	8009fa8 <_printf_i+0x218>
 8009fc2:	e7eb      	b.n	8009f9c <_printf_i+0x20c>
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	f104 0619 	add.w	r6, r4, #25
 8009fca:	e7f5      	b.n	8009fb8 <_printf_i+0x228>
 8009fcc:	0800c9b4 	.word	0x0800c9b4
 8009fd0:	0800c9c5 	.word	0x0800c9c5

08009fd4 <_scanf_chars>:
 8009fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd8:	4615      	mov	r5, r2
 8009fda:	688a      	ldr	r2, [r1, #8]
 8009fdc:	4680      	mov	r8, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	b932      	cbnz	r2, 8009ff0 <_scanf_chars+0x1c>
 8009fe2:	698a      	ldr	r2, [r1, #24]
 8009fe4:	2a00      	cmp	r2, #0
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2201      	moveq	r2, #1
 8009fea:	f04f 32ff 	movne.w	r2, #4294967295
 8009fee:	608a      	str	r2, [r1, #8]
 8009ff0:	2700      	movs	r7, #0
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a084 <_scanf_chars+0xb0>
 8009ff8:	06d1      	lsls	r1, r2, #27
 8009ffa:	bf5f      	itttt	pl
 8009ffc:	681a      	ldrpl	r2, [r3, #0]
 8009ffe:	1d11      	addpl	r1, r2, #4
 800a000:	6019      	strpl	r1, [r3, #0]
 800a002:	6816      	ldrpl	r6, [r2, #0]
 800a004:	69a0      	ldr	r0, [r4, #24]
 800a006:	b188      	cbz	r0, 800a02c <_scanf_chars+0x58>
 800a008:	2801      	cmp	r0, #1
 800a00a:	d107      	bne.n	800a01c <_scanf_chars+0x48>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	6963      	ldr	r3, [r4, #20]
 800a012:	5c9b      	ldrb	r3, [r3, r2]
 800a014:	b953      	cbnz	r3, 800a02c <_scanf_chars+0x58>
 800a016:	2f00      	cmp	r7, #0
 800a018:	d031      	beq.n	800a07e <_scanf_chars+0xaa>
 800a01a:	e022      	b.n	800a062 <_scanf_chars+0x8e>
 800a01c:	2802      	cmp	r0, #2
 800a01e:	d120      	bne.n	800a062 <_scanf_chars+0x8e>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a028:	071b      	lsls	r3, r3, #28
 800a02a:	d41a      	bmi.n	800a062 <_scanf_chars+0x8e>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	3701      	adds	r7, #1
 800a030:	06da      	lsls	r2, r3, #27
 800a032:	bf5e      	ittt	pl
 800a034:	682b      	ldrpl	r3, [r5, #0]
 800a036:	781b      	ldrbpl	r3, [r3, #0]
 800a038:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a03c:	682a      	ldr	r2, [r5, #0]
 800a03e:	686b      	ldr	r3, [r5, #4]
 800a040:	3201      	adds	r2, #1
 800a042:	602a      	str	r2, [r5, #0]
 800a044:	68a2      	ldr	r2, [r4, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	3a01      	subs	r2, #1
 800a04a:	606b      	str	r3, [r5, #4]
 800a04c:	60a2      	str	r2, [r4, #8]
 800a04e:	b142      	cbz	r2, 800a062 <_scanf_chars+0x8e>
 800a050:	2b00      	cmp	r3, #0
 800a052:	dcd7      	bgt.n	800a004 <_scanf_chars+0x30>
 800a054:	4629      	mov	r1, r5
 800a056:	4640      	mov	r0, r8
 800a058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a05c:	4798      	blx	r3
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0d0      	beq.n	800a004 <_scanf_chars+0x30>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	f013 0310 	ands.w	r3, r3, #16
 800a068:	d105      	bne.n	800a076 <_scanf_chars+0xa2>
 800a06a:	68e2      	ldr	r2, [r4, #12]
 800a06c:	3201      	adds	r2, #1
 800a06e:	60e2      	str	r2, [r4, #12]
 800a070:	69a2      	ldr	r2, [r4, #24]
 800a072:	b102      	cbz	r2, 800a076 <_scanf_chars+0xa2>
 800a074:	7033      	strb	r3, [r6, #0]
 800a076:	2000      	movs	r0, #0
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	443b      	add	r3, r7
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a082:	bf00      	nop
 800a084:	0800c9f2 	.word	0x0800c9f2

0800a088 <_scanf_i>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	460c      	mov	r4, r1
 800a08e:	4698      	mov	r8, r3
 800a090:	4b72      	ldr	r3, [pc, #456]	; (800a25c <_scanf_i+0x1d4>)
 800a092:	b087      	sub	sp, #28
 800a094:	4682      	mov	sl, r0
 800a096:	4616      	mov	r6, r2
 800a098:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a09c:	ab03      	add	r3, sp, #12
 800a09e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0a2:	4b6f      	ldr	r3, [pc, #444]	; (800a260 <_scanf_i+0x1d8>)
 800a0a4:	69a1      	ldr	r1, [r4, #24]
 800a0a6:	4a6f      	ldr	r2, [pc, #444]	; (800a264 <_scanf_i+0x1dc>)
 800a0a8:	4627      	mov	r7, r4
 800a0aa:	2903      	cmp	r1, #3
 800a0ac:	bf18      	it	ne
 800a0ae:	461a      	movne	r2, r3
 800a0b0:	68a3      	ldr	r3, [r4, #8]
 800a0b2:	9201      	str	r2, [sp, #4]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0ba:	bf81      	itttt	hi
 800a0bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0c0:	eb03 0905 	addhi.w	r9, r3, r5
 800a0c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0c8:	60a3      	strhi	r3, [r4, #8]
 800a0ca:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a0ce:	bf98      	it	ls
 800a0d0:	f04f 0900 	movls.w	r9, #0
 800a0d4:	463d      	mov	r5, r7
 800a0d6:	f04f 0b00 	mov.w	fp, #0
 800a0da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	6831      	ldr	r1, [r6, #0]
 800a0e2:	ab03      	add	r3, sp, #12
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	7809      	ldrb	r1, [r1, #0]
 800a0e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a0ec:	f000 fa16 	bl	800a51c <memchr>
 800a0f0:	b328      	cbz	r0, 800a13e <_scanf_i+0xb6>
 800a0f2:	f1bb 0f01 	cmp.w	fp, #1
 800a0f6:	d159      	bne.n	800a1ac <_scanf_i+0x124>
 800a0f8:	6862      	ldr	r2, [r4, #4]
 800a0fa:	b92a      	cbnz	r2, 800a108 <_scanf_i+0x80>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	6822      	ldr	r2, [r4, #0]
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a106:	6022      	str	r2, [r4, #0]
 800a108:	6822      	ldr	r2, [r4, #0]
 800a10a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	68a2      	ldr	r2, [r4, #8]
 800a112:	1e51      	subs	r1, r2, #1
 800a114:	60a1      	str	r1, [r4, #8]
 800a116:	b192      	cbz	r2, 800a13e <_scanf_i+0xb6>
 800a118:	6832      	ldr	r2, [r6, #0]
 800a11a:	1c51      	adds	r1, r2, #1
 800a11c:	6031      	str	r1, [r6, #0]
 800a11e:	7812      	ldrb	r2, [r2, #0]
 800a120:	f805 2b01 	strb.w	r2, [r5], #1
 800a124:	6872      	ldr	r2, [r6, #4]
 800a126:	3a01      	subs	r2, #1
 800a128:	2a00      	cmp	r2, #0
 800a12a:	6072      	str	r2, [r6, #4]
 800a12c:	dc07      	bgt.n	800a13e <_scanf_i+0xb6>
 800a12e:	4631      	mov	r1, r6
 800a130:	4650      	mov	r0, sl
 800a132:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a136:	4790      	blx	r2
 800a138:	2800      	cmp	r0, #0
 800a13a:	f040 8085 	bne.w	800a248 <_scanf_i+0x1c0>
 800a13e:	f10b 0b01 	add.w	fp, fp, #1
 800a142:	f1bb 0f03 	cmp.w	fp, #3
 800a146:	d1cb      	bne.n	800a0e0 <_scanf_i+0x58>
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	b90b      	cbnz	r3, 800a150 <_scanf_i+0xc8>
 800a14c:	230a      	movs	r3, #10
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	4945      	ldr	r1, [pc, #276]	; (800a268 <_scanf_i+0x1e0>)
 800a154:	6960      	ldr	r0, [r4, #20]
 800a156:	1ac9      	subs	r1, r1, r3
 800a158:	f000 f944 	bl	800a3e4 <__sccl>
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	68a3      	ldr	r3, [r4, #8]
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d03d      	beq.n	800a1e4 <_scanf_i+0x15c>
 800a168:	6831      	ldr	r1, [r6, #0]
 800a16a:	6960      	ldr	r0, [r4, #20]
 800a16c:	f891 c000 	ldrb.w	ip, [r1]
 800a170:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a174:	2800      	cmp	r0, #0
 800a176:	d035      	beq.n	800a1e4 <_scanf_i+0x15c>
 800a178:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a17c:	d124      	bne.n	800a1c8 <_scanf_i+0x140>
 800a17e:	0510      	lsls	r0, r2, #20
 800a180:	d522      	bpl.n	800a1c8 <_scanf_i+0x140>
 800a182:	f10b 0b01 	add.w	fp, fp, #1
 800a186:	f1b9 0f00 	cmp.w	r9, #0
 800a18a:	d003      	beq.n	800a194 <_scanf_i+0x10c>
 800a18c:	3301      	adds	r3, #1
 800a18e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a192:	60a3      	str	r3, [r4, #8]
 800a194:	6873      	ldr	r3, [r6, #4]
 800a196:	3b01      	subs	r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	6073      	str	r3, [r6, #4]
 800a19c:	dd1b      	ble.n	800a1d6 <_scanf_i+0x14e>
 800a19e:	6833      	ldr	r3, [r6, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	6033      	str	r3, [r6, #0]
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	60a3      	str	r3, [r4, #8]
 800a1aa:	e7d9      	b.n	800a160 <_scanf_i+0xd8>
 800a1ac:	f1bb 0f02 	cmp.w	fp, #2
 800a1b0:	d1ae      	bne.n	800a110 <_scanf_i+0x88>
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a1b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1bc:	d1bf      	bne.n	800a13e <_scanf_i+0xb6>
 800a1be:	2310      	movs	r3, #16
 800a1c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1c4:	6063      	str	r3, [r4, #4]
 800a1c6:	e7a2      	b.n	800a10e <_scanf_i+0x86>
 800a1c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	780b      	ldrb	r3, [r1, #0]
 800a1d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a1d4:	e7de      	b.n	800a194 <_scanf_i+0x10c>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4650      	mov	r0, sl
 800a1da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1de:	4798      	blx	r3
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d0df      	beq.n	800a1a4 <_scanf_i+0x11c>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	05d9      	lsls	r1, r3, #23
 800a1e8:	d50d      	bpl.n	800a206 <_scanf_i+0x17e>
 800a1ea:	42bd      	cmp	r5, r7
 800a1ec:	d909      	bls.n	800a202 <_scanf_i+0x17a>
 800a1ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800a1fe:	4798      	blx	r3
 800a200:	464d      	mov	r5, r9
 800a202:	42bd      	cmp	r5, r7
 800a204:	d028      	beq.n	800a258 <_scanf_i+0x1d0>
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	f012 0210 	ands.w	r2, r2, #16
 800a20c:	d113      	bne.n	800a236 <_scanf_i+0x1ae>
 800a20e:	702a      	strb	r2, [r5, #0]
 800a210:	4639      	mov	r1, r7
 800a212:	6863      	ldr	r3, [r4, #4]
 800a214:	4650      	mov	r0, sl
 800a216:	9e01      	ldr	r6, [sp, #4]
 800a218:	47b0      	blx	r6
 800a21a:	f8d8 3000 	ldr.w	r3, [r8]
 800a21e:	6821      	ldr	r1, [r4, #0]
 800a220:	1d1a      	adds	r2, r3, #4
 800a222:	f8c8 2000 	str.w	r2, [r8]
 800a226:	f011 0f20 	tst.w	r1, #32
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	d00f      	beq.n	800a24e <_scanf_i+0x1c6>
 800a22e:	6018      	str	r0, [r3, #0]
 800a230:	68e3      	ldr	r3, [r4, #12]
 800a232:	3301      	adds	r3, #1
 800a234:	60e3      	str	r3, [r4, #12]
 800a236:	2000      	movs	r0, #0
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	1bed      	subs	r5, r5, r7
 800a23c:	445d      	add	r5, fp
 800a23e:	442b      	add	r3, r5
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	b007      	add	sp, #28
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	f04f 0b00 	mov.w	fp, #0
 800a24c:	e7ca      	b.n	800a1e4 <_scanf_i+0x15c>
 800a24e:	07ca      	lsls	r2, r1, #31
 800a250:	bf4c      	ite	mi
 800a252:	8018      	strhmi	r0, [r3, #0]
 800a254:	6018      	strpl	r0, [r3, #0]
 800a256:	e7eb      	b.n	800a230 <_scanf_i+0x1a8>
 800a258:	2001      	movs	r0, #1
 800a25a:	e7f2      	b.n	800a242 <_scanf_i+0x1ba>
 800a25c:	0800aea8 	.word	0x0800aea8
 800a260:	0800a789 	.word	0x0800a789
 800a264:	0800a6a1 	.word	0x0800a6a1
 800a268:	0800c9e6 	.word	0x0800c9e6

0800a26c <__sflush_r>:
 800a26c:	898a      	ldrh	r2, [r1, #12]
 800a26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a270:	4605      	mov	r5, r0
 800a272:	0710      	lsls	r0, r2, #28
 800a274:	460c      	mov	r4, r1
 800a276:	d457      	bmi.n	800a328 <__sflush_r+0xbc>
 800a278:	684b      	ldr	r3, [r1, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dc04      	bgt.n	800a288 <__sflush_r+0x1c>
 800a27e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	dc01      	bgt.n	800a288 <__sflush_r+0x1c>
 800a284:	2000      	movs	r0, #0
 800a286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a28a:	2e00      	cmp	r6, #0
 800a28c:	d0fa      	beq.n	800a284 <__sflush_r+0x18>
 800a28e:	2300      	movs	r3, #0
 800a290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a294:	682f      	ldr	r7, [r5, #0]
 800a296:	6a21      	ldr	r1, [r4, #32]
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	d032      	beq.n	800a302 <__sflush_r+0x96>
 800a29c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	075a      	lsls	r2, r3, #29
 800a2a2:	d505      	bpl.n	800a2b0 <__sflush_r+0x44>
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	1ac0      	subs	r0, r0, r3
 800a2a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2aa:	b10b      	cbz	r3, 800a2b0 <__sflush_r+0x44>
 800a2ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ae:	1ac0      	subs	r0, r0, r3
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	6a21      	ldr	r1, [r4, #32]
 800a2ba:	47b0      	blx	r6
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	d106      	bne.n	800a2d0 <__sflush_r+0x64>
 800a2c2:	6829      	ldr	r1, [r5, #0]
 800a2c4:	291d      	cmp	r1, #29
 800a2c6:	d82b      	bhi.n	800a320 <__sflush_r+0xb4>
 800a2c8:	4a28      	ldr	r2, [pc, #160]	; (800a36c <__sflush_r+0x100>)
 800a2ca:	410a      	asrs	r2, r1
 800a2cc:	07d6      	lsls	r6, r2, #31
 800a2ce:	d427      	bmi.n	800a320 <__sflush_r+0xb4>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	6062      	str	r2, [r4, #4]
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	04d9      	lsls	r1, r3, #19
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	d504      	bpl.n	800a2e6 <__sflush_r+0x7a>
 800a2dc:	1c42      	adds	r2, r0, #1
 800a2de:	d101      	bne.n	800a2e4 <__sflush_r+0x78>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b903      	cbnz	r3, 800a2e6 <__sflush_r+0x7a>
 800a2e4:	6560      	str	r0, [r4, #84]	; 0x54
 800a2e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2e8:	602f      	str	r7, [r5, #0]
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	d0ca      	beq.n	800a284 <__sflush_r+0x18>
 800a2ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2f2:	4299      	cmp	r1, r3
 800a2f4:	d002      	beq.n	800a2fc <__sflush_r+0x90>
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f7ff f8b2 	bl	8009460 <_free_r>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	6360      	str	r0, [r4, #52]	; 0x34
 800a300:	e7c1      	b.n	800a286 <__sflush_r+0x1a>
 800a302:	2301      	movs	r3, #1
 800a304:	4628      	mov	r0, r5
 800a306:	47b0      	blx	r6
 800a308:	1c41      	adds	r1, r0, #1
 800a30a:	d1c8      	bne.n	800a29e <__sflush_r+0x32>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0c5      	beq.n	800a29e <__sflush_r+0x32>
 800a312:	2b1d      	cmp	r3, #29
 800a314:	d001      	beq.n	800a31a <__sflush_r+0xae>
 800a316:	2b16      	cmp	r3, #22
 800a318:	d101      	bne.n	800a31e <__sflush_r+0xb2>
 800a31a:	602f      	str	r7, [r5, #0]
 800a31c:	e7b2      	b.n	800a284 <__sflush_r+0x18>
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	e7ae      	b.n	800a286 <__sflush_r+0x1a>
 800a328:	690f      	ldr	r7, [r1, #16]
 800a32a:	2f00      	cmp	r7, #0
 800a32c:	d0aa      	beq.n	800a284 <__sflush_r+0x18>
 800a32e:	0793      	lsls	r3, r2, #30
 800a330:	bf18      	it	ne
 800a332:	2300      	movne	r3, #0
 800a334:	680e      	ldr	r6, [r1, #0]
 800a336:	bf08      	it	eq
 800a338:	694b      	ldreq	r3, [r1, #20]
 800a33a:	1bf6      	subs	r6, r6, r7
 800a33c:	600f      	str	r7, [r1, #0]
 800a33e:	608b      	str	r3, [r1, #8]
 800a340:	2e00      	cmp	r6, #0
 800a342:	dd9f      	ble.n	800a284 <__sflush_r+0x18>
 800a344:	4633      	mov	r3, r6
 800a346:	463a      	mov	r2, r7
 800a348:	4628      	mov	r0, r5
 800a34a:	6a21      	ldr	r1, [r4, #32]
 800a34c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a350:	47e0      	blx	ip
 800a352:	2800      	cmp	r0, #0
 800a354:	dc06      	bgt.n	800a364 <__sflush_r+0xf8>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	e790      	b.n	800a286 <__sflush_r+0x1a>
 800a364:	4407      	add	r7, r0
 800a366:	1a36      	subs	r6, r6, r0
 800a368:	e7ea      	b.n	800a340 <__sflush_r+0xd4>
 800a36a:	bf00      	nop
 800a36c:	dfbffffe 	.word	0xdfbffffe

0800a370 <_fflush_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	690b      	ldr	r3, [r1, #16]
 800a374:	4605      	mov	r5, r0
 800a376:	460c      	mov	r4, r1
 800a378:	b913      	cbnz	r3, 800a380 <_fflush_r+0x10>
 800a37a:	2500      	movs	r5, #0
 800a37c:	4628      	mov	r0, r5
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	b118      	cbz	r0, 800a38a <_fflush_r+0x1a>
 800a382:	6a03      	ldr	r3, [r0, #32]
 800a384:	b90b      	cbnz	r3, 800a38a <_fflush_r+0x1a>
 800a386:	f7fe fef7 	bl	8009178 <__sinit>
 800a38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0f3      	beq.n	800a37a <_fflush_r+0xa>
 800a392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a394:	07d0      	lsls	r0, r2, #31
 800a396:	d404      	bmi.n	800a3a2 <_fflush_r+0x32>
 800a398:	0599      	lsls	r1, r3, #22
 800a39a:	d402      	bmi.n	800a3a2 <_fflush_r+0x32>
 800a39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a39e:	f7ff f829 	bl	80093f4 <__retarget_lock_acquire_recursive>
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7ff ff61 	bl	800a26c <__sflush_r>
 800a3aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d4e4      	bmi.n	800a37c <_fflush_r+0xc>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	059b      	lsls	r3, r3, #22
 800a3b6:	d4e1      	bmi.n	800a37c <_fflush_r+0xc>
 800a3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ba:	f7ff f81c 	bl	80093f6 <__retarget_lock_release_recursive>
 800a3be:	e7dd      	b.n	800a37c <_fflush_r+0xc>

0800a3c0 <fiprintf>:
 800a3c0:	b40e      	push	{r1, r2, r3}
 800a3c2:	b503      	push	{r0, r1, lr}
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <fiprintf+0x20>)
 800a3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ce:	6800      	ldr	r0, [r0, #0]
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	f000 fa03 	bl	800a7dc <_vfiprintf_r>
 800a3d6:	b002      	add	sp, #8
 800a3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3dc:	b003      	add	sp, #12
 800a3de:	4770      	bx	lr
 800a3e0:	2000008c 	.word	0x2000008c

0800a3e4 <__sccl>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	780b      	ldrb	r3, [r1, #0]
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	2b5e      	cmp	r3, #94	; 0x5e
 800a3ec:	bf0b      	itete	eq
 800a3ee:	784b      	ldrbeq	r3, [r1, #1]
 800a3f0:	1c4a      	addne	r2, r1, #1
 800a3f2:	1c8a      	addeq	r2, r1, #2
 800a3f4:	2100      	movne	r1, #0
 800a3f6:	bf08      	it	eq
 800a3f8:	2101      	moveq	r1, #1
 800a3fa:	3801      	subs	r0, #1
 800a3fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a400:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a404:	42a8      	cmp	r0, r5
 800a406:	d1fb      	bne.n	800a400 <__sccl+0x1c>
 800a408:	b90b      	cbnz	r3, 800a40e <__sccl+0x2a>
 800a40a:	1e50      	subs	r0, r2, #1
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	f081 0101 	eor.w	r1, r1, #1
 800a412:	4610      	mov	r0, r2
 800a414:	54e1      	strb	r1, [r4, r3]
 800a416:	4602      	mov	r2, r0
 800a418:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a41c:	2d2d      	cmp	r5, #45	; 0x2d
 800a41e:	d005      	beq.n	800a42c <__sccl+0x48>
 800a420:	2d5d      	cmp	r5, #93	; 0x5d
 800a422:	d016      	beq.n	800a452 <__sccl+0x6e>
 800a424:	2d00      	cmp	r5, #0
 800a426:	d0f1      	beq.n	800a40c <__sccl+0x28>
 800a428:	462b      	mov	r3, r5
 800a42a:	e7f2      	b.n	800a412 <__sccl+0x2e>
 800a42c:	7846      	ldrb	r6, [r0, #1]
 800a42e:	2e5d      	cmp	r6, #93	; 0x5d
 800a430:	d0fa      	beq.n	800a428 <__sccl+0x44>
 800a432:	42b3      	cmp	r3, r6
 800a434:	dcf8      	bgt.n	800a428 <__sccl+0x44>
 800a436:	461a      	mov	r2, r3
 800a438:	3002      	adds	r0, #2
 800a43a:	3201      	adds	r2, #1
 800a43c:	4296      	cmp	r6, r2
 800a43e:	54a1      	strb	r1, [r4, r2]
 800a440:	dcfb      	bgt.n	800a43a <__sccl+0x56>
 800a442:	1af2      	subs	r2, r6, r3
 800a444:	3a01      	subs	r2, #1
 800a446:	42b3      	cmp	r3, r6
 800a448:	bfa8      	it	ge
 800a44a:	2200      	movge	r2, #0
 800a44c:	1c5d      	adds	r5, r3, #1
 800a44e:	18ab      	adds	r3, r5, r2
 800a450:	e7e1      	b.n	800a416 <__sccl+0x32>
 800a452:	4610      	mov	r0, r2
 800a454:	e7da      	b.n	800a40c <__sccl+0x28>

0800a456 <__submore>:
 800a456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a45e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a462:	4299      	cmp	r1, r3
 800a464:	d11b      	bne.n	800a49e <__submore+0x48>
 800a466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a46a:	f7ff f869 	bl	8009540 <_malloc_r>
 800a46e:	b918      	cbnz	r0, 800a478 <__submore+0x22>
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a47e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a482:	6360      	str	r0, [r4, #52]	; 0x34
 800a484:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a488:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a48c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a490:	7043      	strb	r3, [r0, #1]
 800a492:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a496:	7003      	strb	r3, [r0, #0]
 800a498:	6020      	str	r0, [r4, #0]
 800a49a:	2000      	movs	r0, #0
 800a49c:	e7ea      	b.n	800a474 <__submore+0x1e>
 800a49e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a4a0:	0077      	lsls	r7, r6, #1
 800a4a2:	463a      	mov	r2, r7
 800a4a4:	f000 f84f 	bl	800a546 <_realloc_r>
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d0e0      	beq.n	800a470 <__submore+0x1a>
 800a4ae:	eb00 0806 	add.w	r8, r0, r6
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	f7fe ffa6 	bl	8009408 <memcpy>
 800a4bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a4c0:	f8c4 8000 	str.w	r8, [r4]
 800a4c4:	e7e9      	b.n	800a49a <__submore+0x44>

0800a4c6 <memmove>:
 800a4c6:	4288      	cmp	r0, r1
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	eb01 0402 	add.w	r4, r1, r2
 800a4ce:	d902      	bls.n	800a4d6 <memmove+0x10>
 800a4d0:	4284      	cmp	r4, r0
 800a4d2:	4623      	mov	r3, r4
 800a4d4:	d807      	bhi.n	800a4e6 <memmove+0x20>
 800a4d6:	1e43      	subs	r3, r0, #1
 800a4d8:	42a1      	cmp	r1, r4
 800a4da:	d008      	beq.n	800a4ee <memmove+0x28>
 800a4dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4e4:	e7f8      	b.n	800a4d8 <memmove+0x12>
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	4402      	add	r2, r0
 800a4ea:	428a      	cmp	r2, r1
 800a4ec:	d100      	bne.n	800a4f0 <memmove+0x2a>
 800a4ee:	bd10      	pop	{r4, pc}
 800a4f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4f8:	e7f7      	b.n	800a4ea <memmove+0x24>
	...

0800a4fc <_sbrk_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	2300      	movs	r3, #0
 800a500:	4d05      	ldr	r5, [pc, #20]	; (800a518 <_sbrk_r+0x1c>)
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f7f8 f8ee 	bl	80026e8 <_sbrk>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_sbrk_r+0x1a>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_sbrk_r+0x1a>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	20002a38 	.word	0x20002a38

0800a51c <memchr>:
 800a51c:	4603      	mov	r3, r0
 800a51e:	b510      	push	{r4, lr}
 800a520:	b2c9      	uxtb	r1, r1
 800a522:	4402      	add	r2, r0
 800a524:	4293      	cmp	r3, r2
 800a526:	4618      	mov	r0, r3
 800a528:	d101      	bne.n	800a52e <memchr+0x12>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e003      	b.n	800a536 <memchr+0x1a>
 800a52e:	7804      	ldrb	r4, [r0, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	428c      	cmp	r4, r1
 800a534:	d1f6      	bne.n	800a524 <memchr+0x8>
 800a536:	bd10      	pop	{r4, pc}

0800a538 <abort>:
 800a538:	2006      	movs	r0, #6
 800a53a:	b508      	push	{r3, lr}
 800a53c:	f000 fb26 	bl	800ab8c <raise>
 800a540:	2001      	movs	r0, #1
 800a542:	f7f8 f85e 	bl	8002602 <_exit>

0800a546 <_realloc_r>:
 800a546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54a:	4680      	mov	r8, r0
 800a54c:	4614      	mov	r4, r2
 800a54e:	460e      	mov	r6, r1
 800a550:	b921      	cbnz	r1, 800a55c <_realloc_r+0x16>
 800a552:	4611      	mov	r1, r2
 800a554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	f7fe bff2 	b.w	8009540 <_malloc_r>
 800a55c:	b92a      	cbnz	r2, 800a56a <_realloc_r+0x24>
 800a55e:	f7fe ff7f 	bl	8009460 <_free_r>
 800a562:	4625      	mov	r5, r4
 800a564:	4628      	mov	r0, r5
 800a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56a:	f000 fb2b 	bl	800abc4 <_malloc_usable_size_r>
 800a56e:	4284      	cmp	r4, r0
 800a570:	4607      	mov	r7, r0
 800a572:	d802      	bhi.n	800a57a <_realloc_r+0x34>
 800a574:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a578:	d812      	bhi.n	800a5a0 <_realloc_r+0x5a>
 800a57a:	4621      	mov	r1, r4
 800a57c:	4640      	mov	r0, r8
 800a57e:	f7fe ffdf 	bl	8009540 <_malloc_r>
 800a582:	4605      	mov	r5, r0
 800a584:	2800      	cmp	r0, #0
 800a586:	d0ed      	beq.n	800a564 <_realloc_r+0x1e>
 800a588:	42bc      	cmp	r4, r7
 800a58a:	4622      	mov	r2, r4
 800a58c:	4631      	mov	r1, r6
 800a58e:	bf28      	it	cs
 800a590:	463a      	movcs	r2, r7
 800a592:	f7fe ff39 	bl	8009408 <memcpy>
 800a596:	4631      	mov	r1, r6
 800a598:	4640      	mov	r0, r8
 800a59a:	f7fe ff61 	bl	8009460 <_free_r>
 800a59e:	e7e1      	b.n	800a564 <_realloc_r+0x1e>
 800a5a0:	4635      	mov	r5, r6
 800a5a2:	e7df      	b.n	800a564 <_realloc_r+0x1e>

0800a5a4 <_strtol_l.constprop.0>:
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5aa:	4686      	mov	lr, r0
 800a5ac:	4690      	mov	r8, r2
 800a5ae:	d001      	beq.n	800a5b4 <_strtol_l.constprop.0+0x10>
 800a5b0:	2b24      	cmp	r3, #36	; 0x24
 800a5b2:	d906      	bls.n	800a5c2 <_strtol_l.constprop.0+0x1e>
 800a5b4:	f7fe fef4 	bl	80093a0 <__errno>
 800a5b8:	2316      	movs	r3, #22
 800a5ba:	6003      	str	r3, [r0, #0]
 800a5bc:	2000      	movs	r0, #0
 800a5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	4835      	ldr	r0, [pc, #212]	; (800a69c <_strtol_l.constprop.0+0xf8>)
 800a5c6:	462a      	mov	r2, r5
 800a5c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5cc:	5d06      	ldrb	r6, [r0, r4]
 800a5ce:	f016 0608 	ands.w	r6, r6, #8
 800a5d2:	d1f8      	bne.n	800a5c6 <_strtol_l.constprop.0+0x22>
 800a5d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a5d6:	d12e      	bne.n	800a636 <_strtol_l.constprop.0+0x92>
 800a5d8:	2601      	movs	r6, #1
 800a5da:	782c      	ldrb	r4, [r5, #0]
 800a5dc:	1c95      	adds	r5, r2, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d057      	beq.n	800a692 <_strtol_l.constprop.0+0xee>
 800a5e2:	2b10      	cmp	r3, #16
 800a5e4:	d109      	bne.n	800a5fa <_strtol_l.constprop.0+0x56>
 800a5e6:	2c30      	cmp	r4, #48	; 0x30
 800a5e8:	d107      	bne.n	800a5fa <_strtol_l.constprop.0+0x56>
 800a5ea:	782a      	ldrb	r2, [r5, #0]
 800a5ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a5f0:	2a58      	cmp	r2, #88	; 0x58
 800a5f2:	d149      	bne.n	800a688 <_strtol_l.constprop.0+0xe4>
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	786c      	ldrb	r4, [r5, #1]
 800a5f8:	3502      	adds	r5, #2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a600:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a604:	fbbc f9f3 	udiv	r9, ip, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a60e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a612:	2f09      	cmp	r7, #9
 800a614:	d814      	bhi.n	800a640 <_strtol_l.constprop.0+0x9c>
 800a616:	463c      	mov	r4, r7
 800a618:	42a3      	cmp	r3, r4
 800a61a:	dd20      	ble.n	800a65e <_strtol_l.constprop.0+0xba>
 800a61c:	1c57      	adds	r7, r2, #1
 800a61e:	d007      	beq.n	800a630 <_strtol_l.constprop.0+0x8c>
 800a620:	4581      	cmp	r9, r0
 800a622:	d319      	bcc.n	800a658 <_strtol_l.constprop.0+0xb4>
 800a624:	d101      	bne.n	800a62a <_strtol_l.constprop.0+0x86>
 800a626:	45a2      	cmp	sl, r4
 800a628:	db16      	blt.n	800a658 <_strtol_l.constprop.0+0xb4>
 800a62a:	2201      	movs	r2, #1
 800a62c:	fb00 4003 	mla	r0, r0, r3, r4
 800a630:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a634:	e7eb      	b.n	800a60e <_strtol_l.constprop.0+0x6a>
 800a636:	2c2b      	cmp	r4, #43	; 0x2b
 800a638:	bf04      	itt	eq
 800a63a:	782c      	ldrbeq	r4, [r5, #0]
 800a63c:	1c95      	addeq	r5, r2, #2
 800a63e:	e7ce      	b.n	800a5de <_strtol_l.constprop.0+0x3a>
 800a640:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a644:	2f19      	cmp	r7, #25
 800a646:	d801      	bhi.n	800a64c <_strtol_l.constprop.0+0xa8>
 800a648:	3c37      	subs	r4, #55	; 0x37
 800a64a:	e7e5      	b.n	800a618 <_strtol_l.constprop.0+0x74>
 800a64c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a650:	2f19      	cmp	r7, #25
 800a652:	d804      	bhi.n	800a65e <_strtol_l.constprop.0+0xba>
 800a654:	3c57      	subs	r4, #87	; 0x57
 800a656:	e7df      	b.n	800a618 <_strtol_l.constprop.0+0x74>
 800a658:	f04f 32ff 	mov.w	r2, #4294967295
 800a65c:	e7e8      	b.n	800a630 <_strtol_l.constprop.0+0x8c>
 800a65e:	1c53      	adds	r3, r2, #1
 800a660:	d108      	bne.n	800a674 <_strtol_l.constprop.0+0xd0>
 800a662:	2322      	movs	r3, #34	; 0x22
 800a664:	4660      	mov	r0, ip
 800a666:	f8ce 3000 	str.w	r3, [lr]
 800a66a:	f1b8 0f00 	cmp.w	r8, #0
 800a66e:	d0a6      	beq.n	800a5be <_strtol_l.constprop.0+0x1a>
 800a670:	1e69      	subs	r1, r5, #1
 800a672:	e006      	b.n	800a682 <_strtol_l.constprop.0+0xde>
 800a674:	b106      	cbz	r6, 800a678 <_strtol_l.constprop.0+0xd4>
 800a676:	4240      	negs	r0, r0
 800a678:	f1b8 0f00 	cmp.w	r8, #0
 800a67c:	d09f      	beq.n	800a5be <_strtol_l.constprop.0+0x1a>
 800a67e:	2a00      	cmp	r2, #0
 800a680:	d1f6      	bne.n	800a670 <_strtol_l.constprop.0+0xcc>
 800a682:	f8c8 1000 	str.w	r1, [r8]
 800a686:	e79a      	b.n	800a5be <_strtol_l.constprop.0+0x1a>
 800a688:	2430      	movs	r4, #48	; 0x30
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1b5      	bne.n	800a5fa <_strtol_l.constprop.0+0x56>
 800a68e:	2308      	movs	r3, #8
 800a690:	e7b3      	b.n	800a5fa <_strtol_l.constprop.0+0x56>
 800a692:	2c30      	cmp	r4, #48	; 0x30
 800a694:	d0a9      	beq.n	800a5ea <_strtol_l.constprop.0+0x46>
 800a696:	230a      	movs	r3, #10
 800a698:	e7af      	b.n	800a5fa <_strtol_l.constprop.0+0x56>
 800a69a:	bf00      	nop
 800a69c:	0800c9f2 	.word	0x0800c9f2

0800a6a0 <_strtol_r>:
 800a6a0:	f7ff bf80 	b.w	800a5a4 <_strtol_l.constprop.0>

0800a6a4 <_strtoul_l.constprop.0>:
 800a6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	4686      	mov	lr, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	4f35      	ldr	r7, [pc, #212]	; (800a784 <_strtoul_l.constprop.0+0xe0>)
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6b4:	5d3e      	ldrb	r6, [r7, r4]
 800a6b6:	f016 0608 	ands.w	r6, r6, #8
 800a6ba:	d1f8      	bne.n	800a6ae <_strtoul_l.constprop.0+0xa>
 800a6bc:	2c2d      	cmp	r4, #45	; 0x2d
 800a6be:	d130      	bne.n	800a722 <_strtoul_l.constprop.0+0x7e>
 800a6c0:	2601      	movs	r6, #1
 800a6c2:	782c      	ldrb	r4, [r5, #0]
 800a6c4:	1c85      	adds	r5, r0, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d057      	beq.n	800a77a <_strtoul_l.constprop.0+0xd6>
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d109      	bne.n	800a6e2 <_strtoul_l.constprop.0+0x3e>
 800a6ce:	2c30      	cmp	r4, #48	; 0x30
 800a6d0:	d107      	bne.n	800a6e2 <_strtoul_l.constprop.0+0x3e>
 800a6d2:	7828      	ldrb	r0, [r5, #0]
 800a6d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a6d8:	2858      	cmp	r0, #88	; 0x58
 800a6da:	d149      	bne.n	800a770 <_strtoul_l.constprop.0+0xcc>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	786c      	ldrb	r4, [r5, #1]
 800a6e0:	3502      	adds	r5, #2
 800a6e2:	f04f 38ff 	mov.w	r8, #4294967295
 800a6e6:	fbb8 f8f3 	udiv	r8, r8, r3
 800a6ea:	2700      	movs	r7, #0
 800a6ec:	fb03 f908 	mul.w	r9, r3, r8
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	ea6f 0909 	mvn.w	r9, r9
 800a6f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6fa:	f1bc 0f09 	cmp.w	ip, #9
 800a6fe:	d815      	bhi.n	800a72c <_strtoul_l.constprop.0+0x88>
 800a700:	4664      	mov	r4, ip
 800a702:	42a3      	cmp	r3, r4
 800a704:	dd23      	ble.n	800a74e <_strtoul_l.constprop.0+0xaa>
 800a706:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a70a:	d007      	beq.n	800a71c <_strtoul_l.constprop.0+0x78>
 800a70c:	4580      	cmp	r8, r0
 800a70e:	d31b      	bcc.n	800a748 <_strtoul_l.constprop.0+0xa4>
 800a710:	d101      	bne.n	800a716 <_strtoul_l.constprop.0+0x72>
 800a712:	45a1      	cmp	r9, r4
 800a714:	db18      	blt.n	800a748 <_strtoul_l.constprop.0+0xa4>
 800a716:	2701      	movs	r7, #1
 800a718:	fb00 4003 	mla	r0, r0, r3, r4
 800a71c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a720:	e7e9      	b.n	800a6f6 <_strtoul_l.constprop.0+0x52>
 800a722:	2c2b      	cmp	r4, #43	; 0x2b
 800a724:	bf04      	itt	eq
 800a726:	782c      	ldrbeq	r4, [r5, #0]
 800a728:	1c85      	addeq	r5, r0, #2
 800a72a:	e7cc      	b.n	800a6c6 <_strtoul_l.constprop.0+0x22>
 800a72c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a730:	f1bc 0f19 	cmp.w	ip, #25
 800a734:	d801      	bhi.n	800a73a <_strtoul_l.constprop.0+0x96>
 800a736:	3c37      	subs	r4, #55	; 0x37
 800a738:	e7e3      	b.n	800a702 <_strtoul_l.constprop.0+0x5e>
 800a73a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a73e:	f1bc 0f19 	cmp.w	ip, #25
 800a742:	d804      	bhi.n	800a74e <_strtoul_l.constprop.0+0xaa>
 800a744:	3c57      	subs	r4, #87	; 0x57
 800a746:	e7dc      	b.n	800a702 <_strtoul_l.constprop.0+0x5e>
 800a748:	f04f 37ff 	mov.w	r7, #4294967295
 800a74c:	e7e6      	b.n	800a71c <_strtoul_l.constprop.0+0x78>
 800a74e:	1c7b      	adds	r3, r7, #1
 800a750:	d106      	bne.n	800a760 <_strtoul_l.constprop.0+0xbc>
 800a752:	2322      	movs	r3, #34	; 0x22
 800a754:	4638      	mov	r0, r7
 800a756:	f8ce 3000 	str.w	r3, [lr]
 800a75a:	b932      	cbnz	r2, 800a76a <_strtoul_l.constprop.0+0xc6>
 800a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a760:	b106      	cbz	r6, 800a764 <_strtoul_l.constprop.0+0xc0>
 800a762:	4240      	negs	r0, r0
 800a764:	2a00      	cmp	r2, #0
 800a766:	d0f9      	beq.n	800a75c <_strtoul_l.constprop.0+0xb8>
 800a768:	b107      	cbz	r7, 800a76c <_strtoul_l.constprop.0+0xc8>
 800a76a:	1e69      	subs	r1, r5, #1
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	e7f5      	b.n	800a75c <_strtoul_l.constprop.0+0xb8>
 800a770:	2430      	movs	r4, #48	; 0x30
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1b5      	bne.n	800a6e2 <_strtoul_l.constprop.0+0x3e>
 800a776:	2308      	movs	r3, #8
 800a778:	e7b3      	b.n	800a6e2 <_strtoul_l.constprop.0+0x3e>
 800a77a:	2c30      	cmp	r4, #48	; 0x30
 800a77c:	d0a9      	beq.n	800a6d2 <_strtoul_l.constprop.0+0x2e>
 800a77e:	230a      	movs	r3, #10
 800a780:	e7af      	b.n	800a6e2 <_strtoul_l.constprop.0+0x3e>
 800a782:	bf00      	nop
 800a784:	0800c9f2 	.word	0x0800c9f2

0800a788 <_strtoul_r>:
 800a788:	f7ff bf8c 	b.w	800a6a4 <_strtoul_l.constprop.0>

0800a78c <__sfputc_r>:
 800a78c:	6893      	ldr	r3, [r2, #8]
 800a78e:	b410      	push	{r4}
 800a790:	3b01      	subs	r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	6093      	str	r3, [r2, #8]
 800a796:	da07      	bge.n	800a7a8 <__sfputc_r+0x1c>
 800a798:	6994      	ldr	r4, [r2, #24]
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	db01      	blt.n	800a7a2 <__sfputc_r+0x16>
 800a79e:	290a      	cmp	r1, #10
 800a7a0:	d102      	bne.n	800a7a8 <__sfputc_r+0x1c>
 800a7a2:	bc10      	pop	{r4}
 800a7a4:	f000 b934 	b.w	800aa10 <__swbuf_r>
 800a7a8:	6813      	ldr	r3, [r2, #0]
 800a7aa:	1c58      	adds	r0, r3, #1
 800a7ac:	6010      	str	r0, [r2, #0]
 800a7ae:	7019      	strb	r1, [r3, #0]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	bc10      	pop	{r4}
 800a7b4:	4770      	bx	lr

0800a7b6 <__sfputs_r>:
 800a7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	460f      	mov	r7, r1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	18d5      	adds	r5, r2, r3
 800a7c0:	42ac      	cmp	r4, r5
 800a7c2:	d101      	bne.n	800a7c8 <__sfputs_r+0x12>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e007      	b.n	800a7d8 <__sfputs_r+0x22>
 800a7c8:	463a      	mov	r2, r7
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	f7ff ffdc 	bl	800a78c <__sfputc_r>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d1f3      	bne.n	800a7c0 <__sfputs_r+0xa>
 800a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7dc <_vfiprintf_r>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	4698      	mov	r8, r3
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	b09d      	sub	sp, #116	; 0x74
 800a7ea:	b118      	cbz	r0, 800a7f4 <_vfiprintf_r+0x18>
 800a7ec:	6a03      	ldr	r3, [r0, #32]
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <_vfiprintf_r+0x18>
 800a7f0:	f7fe fcc2 	bl	8009178 <__sinit>
 800a7f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d405      	bmi.n	800a806 <_vfiprintf_r+0x2a>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	059a      	lsls	r2, r3, #22
 800a7fe:	d402      	bmi.n	800a806 <_vfiprintf_r+0x2a>
 800a800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a802:	f7fe fdf7 	bl	80093f4 <__retarget_lock_acquire_recursive>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	071b      	lsls	r3, r3, #28
 800a80a:	d501      	bpl.n	800a810 <_vfiprintf_r+0x34>
 800a80c:	692b      	ldr	r3, [r5, #16]
 800a80e:	b99b      	cbnz	r3, 800a838 <_vfiprintf_r+0x5c>
 800a810:	4629      	mov	r1, r5
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f93a 	bl	800aa8c <__swsetup_r>
 800a818:	b170      	cbz	r0, 800a838 <_vfiprintf_r+0x5c>
 800a81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a81c:	07dc      	lsls	r4, r3, #31
 800a81e:	d504      	bpl.n	800a82a <_vfiprintf_r+0x4e>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	b01d      	add	sp, #116	; 0x74
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	0598      	lsls	r0, r3, #22
 800a82e:	d4f7      	bmi.n	800a820 <_vfiprintf_r+0x44>
 800a830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a832:	f7fe fde0 	bl	80093f6 <__retarget_lock_release_recursive>
 800a836:	e7f3      	b.n	800a820 <_vfiprintf_r+0x44>
 800a838:	2300      	movs	r3, #0
 800a83a:	9309      	str	r3, [sp, #36]	; 0x24
 800a83c:	2320      	movs	r3, #32
 800a83e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a842:	2330      	movs	r3, #48	; 0x30
 800a844:	f04f 0901 	mov.w	r9, #1
 800a848:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a9fc <_vfiprintf_r+0x220>
 800a850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a854:	4623      	mov	r3, r4
 800a856:	469a      	mov	sl, r3
 800a858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a85c:	b10a      	cbz	r2, 800a862 <_vfiprintf_r+0x86>
 800a85e:	2a25      	cmp	r2, #37	; 0x25
 800a860:	d1f9      	bne.n	800a856 <_vfiprintf_r+0x7a>
 800a862:	ebba 0b04 	subs.w	fp, sl, r4
 800a866:	d00b      	beq.n	800a880 <_vfiprintf_r+0xa4>
 800a868:	465b      	mov	r3, fp
 800a86a:	4622      	mov	r2, r4
 800a86c:	4629      	mov	r1, r5
 800a86e:	4630      	mov	r0, r6
 800a870:	f7ff ffa1 	bl	800a7b6 <__sfputs_r>
 800a874:	3001      	adds	r0, #1
 800a876:	f000 80a9 	beq.w	800a9cc <_vfiprintf_r+0x1f0>
 800a87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a87c:	445a      	add	r2, fp
 800a87e:	9209      	str	r2, [sp, #36]	; 0x24
 800a880:	f89a 3000 	ldrb.w	r3, [sl]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 80a1 	beq.w	800a9cc <_vfiprintf_r+0x1f0>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a894:	f10a 0a01 	add.w	sl, sl, #1
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a8a2:	4654      	mov	r4, sl
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8aa:	4854      	ldr	r0, [pc, #336]	; (800a9fc <_vfiprintf_r+0x220>)
 800a8ac:	f7ff fe36 	bl	800a51c <memchr>
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	b9d8      	cbnz	r0, 800a8ec <_vfiprintf_r+0x110>
 800a8b4:	06d1      	lsls	r1, r2, #27
 800a8b6:	bf44      	itt	mi
 800a8b8:	2320      	movmi	r3, #32
 800a8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8be:	0713      	lsls	r3, r2, #28
 800a8c0:	bf44      	itt	mi
 800a8c2:	232b      	movmi	r3, #43	; 0x2b
 800a8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ce:	d015      	beq.n	800a8fc <_vfiprintf_r+0x120>
 800a8d0:	4654      	mov	r4, sl
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f04f 0c0a 	mov.w	ip, #10
 800a8d8:	9a07      	ldr	r2, [sp, #28]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e0:	3b30      	subs	r3, #48	; 0x30
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d94d      	bls.n	800a982 <_vfiprintf_r+0x1a6>
 800a8e6:	b1b0      	cbz	r0, 800a916 <_vfiprintf_r+0x13a>
 800a8e8:	9207      	str	r2, [sp, #28]
 800a8ea:	e014      	b.n	800a916 <_vfiprintf_r+0x13a>
 800a8ec:	eba0 0308 	sub.w	r3, r0, r8
 800a8f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	46a2      	mov	sl, r4
 800a8f8:	9304      	str	r3, [sp, #16]
 800a8fa:	e7d2      	b.n	800a8a2 <_vfiprintf_r+0xc6>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	1d19      	adds	r1, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	9103      	str	r1, [sp, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfbb      	ittet	lt
 800a908:	425b      	neglt	r3, r3
 800a90a:	f042 0202 	orrlt.w	r2, r2, #2
 800a90e:	9307      	strge	r3, [sp, #28]
 800a910:	9307      	strlt	r3, [sp, #28]
 800a912:	bfb8      	it	lt
 800a914:	9204      	strlt	r2, [sp, #16]
 800a916:	7823      	ldrb	r3, [r4, #0]
 800a918:	2b2e      	cmp	r3, #46	; 0x2e
 800a91a:	d10c      	bne.n	800a936 <_vfiprintf_r+0x15a>
 800a91c:	7863      	ldrb	r3, [r4, #1]
 800a91e:	2b2a      	cmp	r3, #42	; 0x2a
 800a920:	d134      	bne.n	800a98c <_vfiprintf_r+0x1b0>
 800a922:	9b03      	ldr	r3, [sp, #12]
 800a924:	3402      	adds	r4, #2
 800a926:	1d1a      	adds	r2, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9203      	str	r2, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfb8      	it	lt
 800a930:	f04f 33ff 	movlt.w	r3, #4294967295
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa00 <_vfiprintf_r+0x224>
 800a93a:	2203      	movs	r2, #3
 800a93c:	4650      	mov	r0, sl
 800a93e:	7821      	ldrb	r1, [r4, #0]
 800a940:	f7ff fdec 	bl	800a51c <memchr>
 800a944:	b138      	cbz	r0, 800a956 <_vfiprintf_r+0x17a>
 800a946:	2240      	movs	r2, #64	; 0x40
 800a948:	9b04      	ldr	r3, [sp, #16]
 800a94a:	eba0 000a 	sub.w	r0, r0, sl
 800a94e:	4082      	lsls	r2, r0
 800a950:	4313      	orrs	r3, r2
 800a952:	3401      	adds	r4, #1
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95a:	2206      	movs	r2, #6
 800a95c:	4829      	ldr	r0, [pc, #164]	; (800aa04 <_vfiprintf_r+0x228>)
 800a95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a962:	f7ff fddb 	bl	800a51c <memchr>
 800a966:	2800      	cmp	r0, #0
 800a968:	d03f      	beq.n	800a9ea <_vfiprintf_r+0x20e>
 800a96a:	4b27      	ldr	r3, [pc, #156]	; (800aa08 <_vfiprintf_r+0x22c>)
 800a96c:	bb1b      	cbnz	r3, 800a9b6 <_vfiprintf_r+0x1da>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	3307      	adds	r3, #7
 800a972:	f023 0307 	bic.w	r3, r3, #7
 800a976:	3308      	adds	r3, #8
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97c:	443b      	add	r3, r7
 800a97e:	9309      	str	r3, [sp, #36]	; 0x24
 800a980:	e768      	b.n	800a854 <_vfiprintf_r+0x78>
 800a982:	460c      	mov	r4, r1
 800a984:	2001      	movs	r0, #1
 800a986:	fb0c 3202 	mla	r2, ip, r2, r3
 800a98a:	e7a6      	b.n	800a8da <_vfiprintf_r+0xfe>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f04f 0c0a 	mov.w	ip, #10
 800a992:	4619      	mov	r1, r3
 800a994:	3401      	adds	r4, #1
 800a996:	9305      	str	r3, [sp, #20]
 800a998:	4620      	mov	r0, r4
 800a99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a99e:	3a30      	subs	r2, #48	; 0x30
 800a9a0:	2a09      	cmp	r2, #9
 800a9a2:	d903      	bls.n	800a9ac <_vfiprintf_r+0x1d0>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0c6      	beq.n	800a936 <_vfiprintf_r+0x15a>
 800a9a8:	9105      	str	r1, [sp, #20]
 800a9aa:	e7c4      	b.n	800a936 <_vfiprintf_r+0x15a>
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b4:	e7f0      	b.n	800a998 <_vfiprintf_r+0x1bc>
 800a9b6:	ab03      	add	r3, sp, #12
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <_vfiprintf_r+0x230>)
 800a9c0:	a904      	add	r1, sp, #16
 800a9c2:	f3af 8000 	nop.w
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	1c78      	adds	r0, r7, #1
 800a9ca:	d1d6      	bne.n	800a97a <_vfiprintf_r+0x19e>
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x202>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x202>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f7fe fd0c 	bl	80093f6 <__retarget_lock_release_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	065b      	lsls	r3, r3, #25
 800a9e2:	f53f af1d 	bmi.w	800a820 <_vfiprintf_r+0x44>
 800a9e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e8:	e71c      	b.n	800a824 <_vfiprintf_r+0x48>
 800a9ea:	ab03      	add	r3, sp, #12
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <_vfiprintf_r+0x230>)
 800a9f4:	a904      	add	r1, sp, #16
 800a9f6:	f7ff f9cb 	bl	8009d90 <_printf_i>
 800a9fa:	e7e4      	b.n	800a9c6 <_vfiprintf_r+0x1ea>
 800a9fc:	0800c9a3 	.word	0x0800c9a3
 800aa00:	0800c9a9 	.word	0x0800c9a9
 800aa04:	0800c9ad 	.word	0x0800c9ad
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	0800a7b7 	.word	0x0800a7b7

0800aa10 <__swbuf_r>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	460e      	mov	r6, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	4605      	mov	r5, r0
 800aa18:	b118      	cbz	r0, 800aa22 <__swbuf_r+0x12>
 800aa1a:	6a03      	ldr	r3, [r0, #32]
 800aa1c:	b90b      	cbnz	r3, 800aa22 <__swbuf_r+0x12>
 800aa1e:	f7fe fbab 	bl	8009178 <__sinit>
 800aa22:	69a3      	ldr	r3, [r4, #24]
 800aa24:	60a3      	str	r3, [r4, #8]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	071a      	lsls	r2, r3, #28
 800aa2a:	d525      	bpl.n	800aa78 <__swbuf_r+0x68>
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	b31b      	cbz	r3, 800aa78 <__swbuf_r+0x68>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	6922      	ldr	r2, [r4, #16]
 800aa34:	b2f6      	uxtb	r6, r6
 800aa36:	1a98      	subs	r0, r3, r2
 800aa38:	6963      	ldr	r3, [r4, #20]
 800aa3a:	4637      	mov	r7, r6
 800aa3c:	4283      	cmp	r3, r0
 800aa3e:	dc04      	bgt.n	800aa4a <__swbuf_r+0x3a>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f7ff fc94 	bl	800a370 <_fflush_r>
 800aa48:	b9e0      	cbnz	r0, 800aa84 <__swbuf_r+0x74>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	60a3      	str	r3, [r4, #8]
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	6022      	str	r2, [r4, #0]
 800aa56:	701e      	strb	r6, [r3, #0]
 800aa58:	6962      	ldr	r2, [r4, #20]
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d004      	beq.n	800aa6a <__swbuf_r+0x5a>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	07db      	lsls	r3, r3, #31
 800aa64:	d506      	bpl.n	800aa74 <__swbuf_r+0x64>
 800aa66:	2e0a      	cmp	r6, #10
 800aa68:	d104      	bne.n	800aa74 <__swbuf_r+0x64>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f7ff fc7f 	bl	800a370 <_fflush_r>
 800aa72:	b938      	cbnz	r0, 800aa84 <__swbuf_r+0x74>
 800aa74:	4638      	mov	r0, r7
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	f000 f806 	bl	800aa8c <__swsetup_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0d5      	beq.n	800aa30 <__swbuf_r+0x20>
 800aa84:	f04f 37ff 	mov.w	r7, #4294967295
 800aa88:	e7f4      	b.n	800aa74 <__swbuf_r+0x64>
	...

0800aa8c <__swsetup_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4b2a      	ldr	r3, [pc, #168]	; (800ab38 <__swsetup_r+0xac>)
 800aa90:	4605      	mov	r5, r0
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	460c      	mov	r4, r1
 800aa96:	b118      	cbz	r0, 800aaa0 <__swsetup_r+0x14>
 800aa98:	6a03      	ldr	r3, [r0, #32]
 800aa9a:	b90b      	cbnz	r3, 800aaa0 <__swsetup_r+0x14>
 800aa9c:	f7fe fb6c 	bl	8009178 <__sinit>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaa6:	0718      	lsls	r0, r3, #28
 800aaa8:	d422      	bmi.n	800aaf0 <__swsetup_r+0x64>
 800aaaa:	06d9      	lsls	r1, r3, #27
 800aaac:	d407      	bmi.n	800aabe <__swsetup_r+0x32>
 800aaae:	2309      	movs	r3, #9
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	e034      	b.n	800ab28 <__swsetup_r+0x9c>
 800aabe:	0758      	lsls	r0, r3, #29
 800aac0:	d512      	bpl.n	800aae8 <__swsetup_r+0x5c>
 800aac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac4:	b141      	cbz	r1, 800aad8 <__swsetup_r+0x4c>
 800aac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaca:	4299      	cmp	r1, r3
 800aacc:	d002      	beq.n	800aad4 <__swsetup_r+0x48>
 800aace:	4628      	mov	r0, r5
 800aad0:	f7fe fcc6 	bl	8009460 <_free_r>
 800aad4:	2300      	movs	r3, #0
 800aad6:	6363      	str	r3, [r4, #52]	; 0x34
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	2300      	movs	r3, #0
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	f043 0308 	orr.w	r3, r3, #8
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	b94b      	cbnz	r3, 800ab08 <__swsetup_r+0x7c>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aafe:	d003      	beq.n	800ab08 <__swsetup_r+0x7c>
 800ab00:	4621      	mov	r1, r4
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f88b 	bl	800ac1e <__smakebuf_r>
 800ab08:	89a0      	ldrh	r0, [r4, #12]
 800ab0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab0e:	f010 0301 	ands.w	r3, r0, #1
 800ab12:	d00a      	beq.n	800ab2a <__swsetup_r+0x9e>
 800ab14:	2300      	movs	r3, #0
 800ab16:	60a3      	str	r3, [r4, #8]
 800ab18:	6963      	ldr	r3, [r4, #20]
 800ab1a:	425b      	negs	r3, r3
 800ab1c:	61a3      	str	r3, [r4, #24]
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	b943      	cbnz	r3, 800ab34 <__swsetup_r+0xa8>
 800ab22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab26:	d1c4      	bne.n	800aab2 <__swsetup_r+0x26>
 800ab28:	bd38      	pop	{r3, r4, r5, pc}
 800ab2a:	0781      	lsls	r1, r0, #30
 800ab2c:	bf58      	it	pl
 800ab2e:	6963      	ldrpl	r3, [r4, #20]
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	e7f4      	b.n	800ab1e <__swsetup_r+0x92>
 800ab34:	2000      	movs	r0, #0
 800ab36:	e7f7      	b.n	800ab28 <__swsetup_r+0x9c>
 800ab38:	2000008c 	.word	0x2000008c

0800ab3c <_raise_r>:
 800ab3c:	291f      	cmp	r1, #31
 800ab3e:	b538      	push	{r3, r4, r5, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	d904      	bls.n	800ab50 <_raise_r+0x14>
 800ab46:	2316      	movs	r3, #22
 800ab48:	6003      	str	r3, [r0, #0]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ab52:	b112      	cbz	r2, 800ab5a <_raise_r+0x1e>
 800ab54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab58:	b94b      	cbnz	r3, 800ab6e <_raise_r+0x32>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f830 	bl	800abc0 <_getpid_r>
 800ab60:	462a      	mov	r2, r5
 800ab62:	4601      	mov	r1, r0
 800ab64:	4620      	mov	r0, r4
 800ab66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab6a:	f000 b817 	b.w	800ab9c <_kill_r>
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d00a      	beq.n	800ab88 <_raise_r+0x4c>
 800ab72:	1c59      	adds	r1, r3, #1
 800ab74:	d103      	bne.n	800ab7e <_raise_r+0x42>
 800ab76:	2316      	movs	r3, #22
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	e7e7      	b.n	800ab4e <_raise_r+0x12>
 800ab7e:	2400      	movs	r4, #0
 800ab80:	4628      	mov	r0, r5
 800ab82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab86:	4798      	blx	r3
 800ab88:	2000      	movs	r0, #0
 800ab8a:	e7e0      	b.n	800ab4e <_raise_r+0x12>

0800ab8c <raise>:
 800ab8c:	4b02      	ldr	r3, [pc, #8]	; (800ab98 <raise+0xc>)
 800ab8e:	4601      	mov	r1, r0
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f7ff bfd3 	b.w	800ab3c <_raise_r>
 800ab96:	bf00      	nop
 800ab98:	2000008c 	.word	0x2000008c

0800ab9c <_kill_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_kill_r+0x20>)
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	4611      	mov	r1, r2
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	f7f7 fd1a 	bl	80025e2 <_kill>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	d102      	bne.n	800abb8 <_kill_r+0x1c>
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	b103      	cbz	r3, 800abb8 <_kill_r+0x1c>
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	bf00      	nop
 800abbc:	20002a38 	.word	0x20002a38

0800abc0 <_getpid_r>:
 800abc0:	f7f7 bd08 	b.w	80025d4 <_getpid>

0800abc4 <_malloc_usable_size_r>:
 800abc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc8:	1f18      	subs	r0, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bfbc      	itt	lt
 800abce:	580b      	ldrlt	r3, [r1, r0]
 800abd0:	18c0      	addlt	r0, r0, r3
 800abd2:	4770      	bx	lr

0800abd4 <__swhatbuf_r>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	460c      	mov	r4, r1
 800abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abdc:	4615      	mov	r5, r2
 800abde:	2900      	cmp	r1, #0
 800abe0:	461e      	mov	r6, r3
 800abe2:	b096      	sub	sp, #88	; 0x58
 800abe4:	da0c      	bge.n	800ac00 <__swhatbuf_r+0x2c>
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	2100      	movs	r1, #0
 800abea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abee:	bf0c      	ite	eq
 800abf0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800abf4:	2340      	movne	r3, #64	; 0x40
 800abf6:	2000      	movs	r0, #0
 800abf8:	6031      	str	r1, [r6, #0]
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	b016      	add	sp, #88	; 0x58
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	466a      	mov	r2, sp
 800ac02:	f000 f849 	bl	800ac98 <_fstat_r>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	dbed      	blt.n	800abe6 <__swhatbuf_r+0x12>
 800ac0a:	9901      	ldr	r1, [sp, #4]
 800ac0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ac10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ac14:	4259      	negs	r1, r3
 800ac16:	4159      	adcs	r1, r3
 800ac18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1c:	e7eb      	b.n	800abf6 <__swhatbuf_r+0x22>

0800ac1e <__smakebuf_r>:
 800ac1e:	898b      	ldrh	r3, [r1, #12]
 800ac20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac22:	079d      	lsls	r5, r3, #30
 800ac24:	4606      	mov	r6, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	d507      	bpl.n	800ac3a <__smakebuf_r+0x1c>
 800ac2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	6123      	str	r3, [r4, #16]
 800ac32:	2301      	movs	r3, #1
 800ac34:	6163      	str	r3, [r4, #20]
 800ac36:	b002      	add	sp, #8
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	466a      	mov	r2, sp
 800ac3c:	ab01      	add	r3, sp, #4
 800ac3e:	f7ff ffc9 	bl	800abd4 <__swhatbuf_r>
 800ac42:	9900      	ldr	r1, [sp, #0]
 800ac44:	4605      	mov	r5, r0
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7fe fc7a 	bl	8009540 <_malloc_r>
 800ac4c:	b948      	cbnz	r0, 800ac62 <__smakebuf_r+0x44>
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	059a      	lsls	r2, r3, #22
 800ac54:	d4ef      	bmi.n	800ac36 <__smakebuf_r+0x18>
 800ac56:	f023 0303 	bic.w	r3, r3, #3
 800ac5a:	f043 0302 	orr.w	r3, r3, #2
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	e7e3      	b.n	800ac2a <__smakebuf_r+0xc>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	6020      	str	r0, [r4, #0]
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	9b00      	ldr	r3, [sp, #0]
 800ac6e:	6120      	str	r0, [r4, #16]
 800ac70:	6163      	str	r3, [r4, #20]
 800ac72:	9b01      	ldr	r3, [sp, #4]
 800ac74:	b15b      	cbz	r3, 800ac8e <__smakebuf_r+0x70>
 800ac76:	4630      	mov	r0, r6
 800ac78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7c:	f000 f81e 	bl	800acbc <_isatty_r>
 800ac80:	b128      	cbz	r0, 800ac8e <__smakebuf_r+0x70>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	431d      	orrs	r5, r3
 800ac92:	81a5      	strh	r5, [r4, #12]
 800ac94:	e7cf      	b.n	800ac36 <__smakebuf_r+0x18>
	...

0800ac98 <_fstat_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4d06      	ldr	r5, [pc, #24]	; (800acb8 <_fstat_r+0x20>)
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	f7f7 fcfa 	bl	800269e <_fstat>
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	d102      	bne.n	800acb4 <_fstat_r+0x1c>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	b103      	cbz	r3, 800acb4 <_fstat_r+0x1c>
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
 800acb6:	bf00      	nop
 800acb8:	20002a38 	.word	0x20002a38

0800acbc <_isatty_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	2300      	movs	r3, #0
 800acc0:	4d05      	ldr	r5, [pc, #20]	; (800acd8 <_isatty_r+0x1c>)
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	f7f7 fcf8 	bl	80026bc <_isatty>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_isatty_r+0x1a>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_isatty_r+0x1a>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	20002a38 	.word	0x20002a38

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
